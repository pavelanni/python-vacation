{
    "docs": [
        {
            "location": "/index.html",
            "text": "Python Vacation\n\n\nThis book is written as a series of simple programming exercises which we did with my son during summer vacation. I found out that despite the fact that he has completed one of the online Python courses, he still needed some simple practical projects to use his skills. So we started with simple ordering application with text-based menus, moved to its web-based version, added some styling, then connected it to a database\u2026 In other words, a lot of programming adventures during summer vacation.",
            "title": "Home"
        },
        {
            "location": "/index.html#python-vacation",
            "text": "This book is written as a series of simple programming exercises which we did with my son during summer vacation. I found out that despite the fact that he has completed one of the online Python courses, he still needed some simple practical projects to use his skills. So we started with simple ordering application with text-based menus, moved to its web-based version, added some styling, then connected it to a database\u2026 In other words, a lot of programming adventures during summer vacation.",
            "title": "Python Vacation"
        },
        {
            "location": "/Python_vacation_day00/index.html",
            "text": "Python Vacation \u2013 Day 0\n\n\nCoffee for friends\n\n\nIt all started on 4\nth\n of July. My 13-year old son came home with an idea. \n\n\n\u201cI want to treat my neighborhood friends with Frappuccino to celebrate Independence Day!\u201d said Erik.\n\n\n\u201cGood idea! Do you have everything you need?\u201d\n\n\n\u201cYes, I have coffee, I have chocolate, I have several flavors to add and I have chocolate cream for toppings! I will take orders on my iPad and prepare them here. Just a moment!\u201d and off he went.\n\n\nHe came back with notes on his iPad, prepared six drinks for his friends and left again.\n\n\n\u201cWasn\u2019t it a good idea?\u201d he asked me when he came home with six empty plastic cups. \u201cYes, great idea,\u201d said I. \u201cBut\u2026\u201d\n\n\n\u201cWhat \u2018BUT\u2019??\u201d said Erik.\n\n\n\u201cYou see, you used your iPad to take orders, but you used it just as a notepad. It would be much easier to take just a notepad and a pencil with you for that. With iPad, you can do it in much better way\u2026\u201d\n\n\n\u201cHow?\u201d\n\n\n\u201cYou could create a small application to take orders where you or your friends would just click on the available choices for flavors and toppings.\u201d\n\n\n\u201cLike radio buttons, right?\u201d\n\n\n\u201cYes, something like that. You\u2019ve taken that Python course at Codeacademy haven\u2019t you? Don\u2019t you want to create something real with Python, rather than doing exercises in their sandbox?\u201d\n\n\n\u201cYes, that would be cool!\u201d said Erik. \u201cBut it must be difficult\u2014to make it look like a real online coffee shop\u2026\u201d\n\n\n\u201cDon\u2019t worry, we\u2019ll do it step by step. Open your laptop and start a terminal.\u201d\n\n\nI have to admit, my son uses Linux on his laptop. I know, it\u2019s torture for a 13-year old, but my way of thinking was: \u201cHe will learn Windows or Mac OS later anyway\u2014at school or with friends. I\u2019ll give him a chance to work with Linux at home. It won\u2019t hurt to know a bit of Linux.\u201d\n\n\nFirst lines of code\n\n\n\u201cIn the terminal type \u2018python3\u2019,\u201d I said to Erik. Yes, I know there is a never-ending discussion \u201cPython 2 vs. Python 3\u201d, but at least it seems there is a consensus that if you are just starting learning Python, it\u2019s better to start with Python 3. Your mileage may vary, of course. \n\n\nerik@idea:~$\n python3\n\nPython 3.5.2 (default, Nov 17 2016, 17:05:23) \n\n\n[GCC 5.4.0 20160609] on linux\n\n\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\n\n>>> \n\n\n\n\n\u201cDone. What\u2019s next?\u201d asked my son.\n\n\n\u201cWell, we want to take orders, right? So we have to ask our customers what they want. And get some \ninput\n from them, right? What did you start with when taking orders from your friends?\u201d\n\n\n\u201cI asked them if they want coffee or chocolate. Some of them are young and they don\u2019t drink coffee.\u201d\n\n\n\u201cOkay, let\u2019s do that. Do you remember how to ask for input in Python?\u201d\n\n\n\u201cBarely\u2026\u201d\n\n\n\u201cWell, I\u2019ll help you. There is a function called \ninput()\n. It can ask a question and you put this question in quotes into parenthesis. And then the function waits for the user to type something and press \nEnter\n. After that, the function \nreturns\n a value. You can take that value and assign it to a variable. \u201c\n\n\nErik\u2019s face showed that he is beginning to recall something from that Python course. Suddenly there was a connection between abstract things like \nfunctions\n and his friends and cups of Frappuccino. \u201cAnd to assign something to a variable I type its name and then \u2018equal\u2019 sign and then the value, right?\u201d\n\n\n\u201cExactly! Go ahead. Let\u2019s name that variable \nanswer\n and assign to it what we get from the \ninput()\n function. How would you write it?\u201d\n\n\n>>> \nanswer\n \n=\n \ninput\n()\n\n\n\n\n\n\u201cNothing happened,\u201d said Erik.\n\n\n\u201cWhat did you expect?\u201d\n\n\n\u201cI thought it will ask me what I want\u2026\u201d\n\n\n\u201cRemember: computer only does what you tell it to do. Did you tell it to ask you a question?\u201d\n\n\n\u201cNo\u2026 A-ha, I know! You said that I have to put the question between the parenthesis. But what should I do now? It doesn\u2019t show the prompt.\u201d\n\n\n\u201cIt\u2019s because it is waiting for your input. Say something and press \nEnter\n\u201c\n\n\ncoffee\n\n\n>>> \n\n\n\n\n\n\u201cNow type this \ninput()\n function again, but with a question.\u201d\n\n\n>>> \nanswer\n \n=\n \ninput\n(\n\"Do you want coffee or chocolate?\"\n)\n\n\nDo you want coffee or chocolate?coffee\n\n\n>>> \n\n\n\n\n\n\u201cNow let\u2019s test if it gets the answer. Type \nprint(answer)\n\u201c\n\n\n>>> \nprint\n(\nanswer\n)\n\n\ncoffee\n\n\n>>> \n\n\n\n\n\n\u201cIt works!\u201d, Erik was happy. One thing is to do course exercises in their sandbox environment and another thing is to get something working on your own computer. More than that\u2014it\u2019s not just an \nexercise\n, you are working on your own project!\n\n\nMore options\n\n\n\u201cWell, it works,\u201d I said. \u201cWhat were your other components?\u201d\n\n\n\u201cI asked them which flavor they want and also which topping.\u201d\n\n\n\u201cGo ahead and ask those questions with Python. But you will need more variables, right? This time let\u2019s use \nflavor\n and \ntopping\n, Okay?\u201d\n\n\n\u201cOkay,\u201d said Erik and typed:\n\n\n>>> \nflavor\n \n=\n \ninput\n(\n\"What flavor do you want?\"\n)\n\n\nWhat flavor do you want?strawberry\n\n\n>>> \ntopping\n \n=\n \ninput\n(\n\"What topping do you want?\"\n)\n\n\nWhat topping do you want?chocolate\n\n\n>>> \n\n\n\n\n\n\u201cGood. Now test the variables if you get the order right.\u201d\n\n\n>>> \nprint\n(\nflavor\n)\n\n\nstrawberry\n\n\n>>> \nprint\n(\ntopping\n)\n\n\nchocolate\n\n\n>>> \n\n\n\n\n\n\u201cNow you can type something like: \u2018You have ordered coffee with strawberry flavor and chocolate topping,\u201d said I and thought to myself: \u201cHow could they even drink this??? Coffee with strawberry?? I don\u2019t understand\u2026\u201d\n\n\n\u201cI don\u2019t remember how to do it with \nprint\n. Can I google it?\u201d\n\n\n\u201cOf course! It\u2019s not a test, it\u2019s your own project. Go ahead!\u201d\n\n\nIn a couple of minutes Erik found the right example and typed:\n\n\n>>> \nprint\n(\n\"You have ordered \"\n,\n \nanswer\n,\n \n\" with \"\n,\n \nflavor\n,\n \n\" flavor and \"\n,\n \ntopping\n,\n \n\" topping. Thanks!\"\n)\n\n\nYou have ordered  coffee  with  strawberry  flavor and  chocolate  topping. Thanks!\n\n\n>>> \n\n\n\n\n\n\u201cCool! It works like a real thing! But how can I save it as a program to run it again?\u201d\n\n\n\u201cGood question. And just in time. I was just going to switch to the editor. Open some text editor.\u201d\n\n\n\u201cLike LibreOffice?\u201d\n\n\n\u201cNo, LibreOffice is not good for that. You need a \ntext\n editor, not a word processor. Something like \ngedit\n will work perfectly. Later you will discover Atom, Sublime Text and, maybe, even Vim.\u201d\n\n\nFirst script\n\n\n\u201cLet\u2019s start with something simple, just to try it. You know it\u2019s a long tradition that the first program people write in any language is \u2018Hello, World!\u2019. Let\u2019s follow the tradition.\u201d\n\n\n\u201cBut I wrote \u2018Hello, World\u2019 already in my online Python class!\u201d\n\n\n\u201cWell, but you haven\u2019t tried it yet on your own computer, have you? If you have already done it in that class, it must be easy for you now.\u201d\n\n\nErik opened a new file in \ngedit\n and wrote:\n\n\nprint\n(\n'Hello, World'\n)\n\n\n\n\n\n\u201cGood,\u201d said I. \u201cNow let\u2019s run it. Save the file with any name, just make sure it ends with \n.py\n. Then go to the terminal and type \npython3\n and the name of your file.\u201d\n\n\nHe typed:\n\n\nerik@idea:~$\n python3 hello.py\n\nHello, World\n\n\n\n\n\n\u201cIt works!\u201d said Erik. \n\n\n\u201cOf course, it works, why shouldn\u2019t it? That was easy. Now let\u2019s make two things which will convert our script into an application. First, place the following string at the very beginning of your script: \n#!/usr/bin/python3\n. This will tell Linux that it\u2019s a Python script and that we want to use Python 3 for it. Second, go to the terminal and make this script executable.\u201d\n\n\n\u201cHow do I do that?\u201d\n\n\n\u201cYeah, it seems you need another course, on Linux basic commands\u2026 Okay, this time I will help you. Type \nchmod a+x hello.py\n. After that, you will be able to run your script without \npython3\n in front of it, just like this \n./hello.py\n. \u201c\n\n\n\u201cAnd what does this \u2018dot-slash\u2019 mean?\u201d\n\n\n\u201cIt means that you want to run \nthis particular\n application in your current directory, and not something else. But this is part of \u2018Linux basics\u2019, we will discuss it later.\u201d\n\n\nAfter Erik has done these two steps, he tried to run the application:\n\n\nerik@idea:~$\n ./hello.py\n\nHello, World\n\n\n\n\n\n\u201cGreat, now you can run it as any other application. Congratulations, you\u2019ve created your first application!\u201d\n\n\n\u201cBut that was very simple. I want to work on my Coffee Shop application!\u201d\n\n\n\u201cLet\u2019s take a break and continue tomorrow, Okay?\u201d",
            "title": "Day 0 - Coffee for Friends"
        },
        {
            "location": "/Python_vacation_day00/index.html#python-vacation-day-0",
            "text": "",
            "title": "Python Vacation -- Day 0"
        },
        {
            "location": "/Python_vacation_day00/index.html#coffee-for-friends",
            "text": "It all started on 4 th  of July. My 13-year old son came home with an idea.   \u201cI want to treat my neighborhood friends with Frappuccino to celebrate Independence Day!\u201d said Erik.  \u201cGood idea! Do you have everything you need?\u201d  \u201cYes, I have coffee, I have chocolate, I have several flavors to add and I have chocolate cream for toppings! I will take orders on my iPad and prepare them here. Just a moment!\u201d and off he went.  He came back with notes on his iPad, prepared six drinks for his friends and left again.  \u201cWasn\u2019t it a good idea?\u201d he asked me when he came home with six empty plastic cups. \u201cYes, great idea,\u201d said I. \u201cBut\u2026\u201d  \u201cWhat \u2018BUT\u2019??\u201d said Erik.  \u201cYou see, you used your iPad to take orders, but you used it just as a notepad. It would be much easier to take just a notepad and a pencil with you for that. With iPad, you can do it in much better way\u2026\u201d  \u201cHow?\u201d  \u201cYou could create a small application to take orders where you or your friends would just click on the available choices for flavors and toppings.\u201d  \u201cLike radio buttons, right?\u201d  \u201cYes, something like that. You\u2019ve taken that Python course at Codeacademy haven\u2019t you? Don\u2019t you want to create something real with Python, rather than doing exercises in their sandbox?\u201d  \u201cYes, that would be cool!\u201d said Erik. \u201cBut it must be difficult\u2014to make it look like a real online coffee shop\u2026\u201d  \u201cDon\u2019t worry, we\u2019ll do it step by step. Open your laptop and start a terminal.\u201d  I have to admit, my son uses Linux on his laptop. I know, it\u2019s torture for a 13-year old, but my way of thinking was: \u201cHe will learn Windows or Mac OS later anyway\u2014at school or with friends. I\u2019ll give him a chance to work with Linux at home. It won\u2019t hurt to know a bit of Linux.\u201d",
            "title": "Coffee for friends"
        },
        {
            "location": "/Python_vacation_day00/index.html#first-lines-of-code",
            "text": "\u201cIn the terminal type \u2018python3\u2019,\u201d I said to Erik. Yes, I know there is a never-ending discussion \u201cPython 2 vs. Python 3\u201d, but at least it seems there is a consensus that if you are just starting learning Python, it\u2019s better to start with Python 3. Your mileage may vary, of course.   erik@idea:~$  python3 Python 3.5.2 (default, Nov 17 2016, 17:05:23)   [GCC 5.4.0 20160609] on linux  Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.   >>>    \u201cDone. What\u2019s next?\u201d asked my son.  \u201cWell, we want to take orders, right? So we have to ask our customers what they want. And get some  input  from them, right? What did you start with when taking orders from your friends?\u201d  \u201cI asked them if they want coffee or chocolate. Some of them are young and they don\u2019t drink coffee.\u201d  \u201cOkay, let\u2019s do that. Do you remember how to ask for input in Python?\u201d  \u201cBarely\u2026\u201d  \u201cWell, I\u2019ll help you. There is a function called  input() . It can ask a question and you put this question in quotes into parenthesis. And then the function waits for the user to type something and press  Enter . After that, the function  returns  a value. You can take that value and assign it to a variable. \u201c  Erik\u2019s face showed that he is beginning to recall something from that Python course. Suddenly there was a connection between abstract things like  functions  and his friends and cups of Frappuccino. \u201cAnd to assign something to a variable I type its name and then \u2018equal\u2019 sign and then the value, right?\u201d  \u201cExactly! Go ahead. Let\u2019s name that variable  answer  and assign to it what we get from the  input()  function. How would you write it?\u201d  >>>  answer   =   input ()   \u201cNothing happened,\u201d said Erik.  \u201cWhat did you expect?\u201d  \u201cI thought it will ask me what I want\u2026\u201d  \u201cRemember: computer only does what you tell it to do. Did you tell it to ask you a question?\u201d  \u201cNo\u2026 A-ha, I know! You said that I have to put the question between the parenthesis. But what should I do now? It doesn\u2019t show the prompt.\u201d  \u201cIt\u2019s because it is waiting for your input. Say something and press  Enter \u201c  coffee  >>>    \u201cNow type this  input()  function again, but with a question.\u201d  >>>  answer   =   input ( \"Do you want coffee or chocolate?\" )  Do you want coffee or chocolate?coffee  >>>    \u201cNow let\u2019s test if it gets the answer. Type  print(answer) \u201c  >>>  print ( answer )  coffee  >>>    \u201cIt works!\u201d, Erik was happy. One thing is to do course exercises in their sandbox environment and another thing is to get something working on your own computer. More than that\u2014it\u2019s not just an  exercise , you are working on your own project!",
            "title": "First lines of code"
        },
        {
            "location": "/Python_vacation_day00/index.html#more-options",
            "text": "\u201cWell, it works,\u201d I said. \u201cWhat were your other components?\u201d  \u201cI asked them which flavor they want and also which topping.\u201d  \u201cGo ahead and ask those questions with Python. But you will need more variables, right? This time let\u2019s use  flavor  and  topping , Okay?\u201d  \u201cOkay,\u201d said Erik and typed:  >>>  flavor   =   input ( \"What flavor do you want?\" )  What flavor do you want?strawberry  >>>  topping   =   input ( \"What topping do you want?\" )  What topping do you want?chocolate  >>>    \u201cGood. Now test the variables if you get the order right.\u201d  >>>  print ( flavor )  strawberry  >>>  print ( topping )  chocolate  >>>    \u201cNow you can type something like: \u2018You have ordered coffee with strawberry flavor and chocolate topping,\u201d said I and thought to myself: \u201cHow could they even drink this??? Coffee with strawberry?? I don\u2019t understand\u2026\u201d  \u201cI don\u2019t remember how to do it with  print . Can I google it?\u201d  \u201cOf course! It\u2019s not a test, it\u2019s your own project. Go ahead!\u201d  In a couple of minutes Erik found the right example and typed:  >>>  print ( \"You have ordered \" ,   answer ,   \" with \" ,   flavor ,   \" flavor and \" ,   topping ,   \" topping. Thanks!\" )  You have ordered  coffee  with  strawberry  flavor and  chocolate  topping. Thanks!  >>>    \u201cCool! It works like a real thing! But how can I save it as a program to run it again?\u201d  \u201cGood question. And just in time. I was just going to switch to the editor. Open some text editor.\u201d  \u201cLike LibreOffice?\u201d  \u201cNo, LibreOffice is not good for that. You need a  text  editor, not a word processor. Something like  gedit  will work perfectly. Later you will discover Atom, Sublime Text and, maybe, even Vim.\u201d",
            "title": "More options"
        },
        {
            "location": "/Python_vacation_day00/index.html#first-script",
            "text": "\u201cLet\u2019s start with something simple, just to try it. You know it\u2019s a long tradition that the first program people write in any language is \u2018Hello, World!\u2019. Let\u2019s follow the tradition.\u201d  \u201cBut I wrote \u2018Hello, World\u2019 already in my online Python class!\u201d  \u201cWell, but you haven\u2019t tried it yet on your own computer, have you? If you have already done it in that class, it must be easy for you now.\u201d  Erik opened a new file in  gedit  and wrote:  print ( 'Hello, World' )   \u201cGood,\u201d said I. \u201cNow let\u2019s run it. Save the file with any name, just make sure it ends with  .py . Then go to the terminal and type  python3  and the name of your file.\u201d  He typed:  erik@idea:~$  python3 hello.py Hello, World   \u201cIt works!\u201d said Erik.   \u201cOf course, it works, why shouldn\u2019t it? That was easy. Now let\u2019s make two things which will convert our script into an application. First, place the following string at the very beginning of your script:  #!/usr/bin/python3 . This will tell Linux that it\u2019s a Python script and that we want to use Python 3 for it. Second, go to the terminal and make this script executable.\u201d  \u201cHow do I do that?\u201d  \u201cYeah, it seems you need another course, on Linux basic commands\u2026 Okay, this time I will help you. Type  chmod a+x hello.py . After that, you will be able to run your script without  python3  in front of it, just like this  ./hello.py . \u201c  \u201cAnd what does this \u2018dot-slash\u2019 mean?\u201d  \u201cIt means that you want to run  this particular  application in your current directory, and not something else. But this is part of \u2018Linux basics\u2019, we will discuss it later.\u201d  After Erik has done these two steps, he tried to run the application:  erik@idea:~$  ./hello.py Hello, World   \u201cGreat, now you can run it as any other application. Congratulations, you\u2019ve created your first application!\u201d  \u201cBut that was very simple. I want to work on my Coffee Shop application!\u201d  \u201cLet\u2019s take a break and continue tomorrow, Okay?\u201d",
            "title": "First script"
        },
        {
            "location": "/Python_vacation_day01/index.html",
            "text": "Python Vacation \u2013 Day 1\n\n\nText dialogs\n\n\nNext day we decided to get right to the Coffee Shop application. Erik has done enough simple exercises already and was eager to write something really useful.\n\n\n\u201cRemember what we did yesterday to take orders from the customers?\u201d\n\n\n\u201cYes, we used the \ninput()\n function.\u201d\n\n\n\u201cAnd then?\u201d\n\n\n\u201cAnd then we saved the input to a variable and then printed it like \u2018You\u2019ve ordered this and that\u2019. \u201c\n\n\n\u201cOkay, good. Now let\u2019s do the same thing in the script. Open a new file and save it right away\u2013you know, I don\u2019t like when you have a bunch of files called \nUntitled\n in your home directory.\u201d\n\n\nErik created a file and saved it as \ncoffeeshop.py\n.\n\n\n\u201cWhat should be at the beginning of each Python script?\u201d asked I.\n\n\n\u201cSomething about python3 with some cryptic letters in the beginning. Let me check in my \nhello.py\n file. Oh, right, it should be \n#!/usr/bin/python3\n. \u201c\n\n\n\u201cYou\u2019re right! I\u2019m sure pretty soon you will write it automatically, without a cheat sheet! Now write the \ninput()\n dialog, like you did yesterday in the console session. Remember?\u201d\n\n\n\u201cYes!\u201d said he and started typing. A couple minutes later he showed me the script.\n\n\n#!/usr/bin/python3\n\n\nanswer\n \n=\n \ninput\n(\n\"Do you want coffee or chocolate?\"\n)\n\n\nflavor\n \n=\n \ninput\n(\n\"What flavor do you want?\"\n)\n\n\ntopping\n \n=\n \ninput\n(\n\"What topping do you want?\"\n)\n\n\nprint\n(\n\"You have ordered \"\n,\n \nanswer\n,\n \n\" with \"\n,\n \nflavor\n,\n \n\" flavor and \"\n,\n \ntopping\n,\n \n\" topping. Thanks!\"\n)\n\n\n\n\n\n\u201cGood. Let\u2019s run it! Remember what to do? You have already placed the python3 string in the beginning, now you just have to do \nchmod a+x coffeeshop.py\n. Go ahead and then run the script.\u201d\n\n\nerik@idea:~$\n chmod a+x coffeeshop.py\n\nerik@idea:~$\n ./coffeeshop.py\n\nDo you want coffee or chocolate?coffee\n\n\nWhat flavor do you want?strawberry\n\n\nWhat topping do you want?chocolate\n\n\nYou have ordered coffee with strawberry flavor and chocolate topping. Thanks!\n\n\nerik@idea:~$\n \n\n\n\n\n\u201cWow, it really works! Great job, Erik!\u201d\n\n\n\u201cYeah, I copy-pasted the commands from our yesterday session. I didn\u2019t close that window,\u201d and he smiled as if he has cheated a little.\n\n\n\u201cThat\u2019s okay,\u201d said I. \u201cThere is a saying among programmers: \u201cDRY - Don\u2019t Repeat Yourself.\u201d So there is nothing wrong with reusing your own work. Now let\u2019s see how we can improve it. What do you think?\u201d\n\n\n\u201cI see that they can order a flavor or topping which I don\u2019t have. And also I think it takes too long to type \nstrawberry\n.\u201d\n\n\n\u201cSo, what would be your solution?\u201d I asked.\n\n\n\u201cI would give them a list of flavors and toppings to choose from and ask to type a letter.\u201d\n\n\n\u201cGood solution. But there could be different flavors with the same first letter\u2026 For simplicity let\u2019s use numbers. Like if you want strawberry flavor, press \u20182\u2019 or something like that. Will this work for you?\u201d\n\n\n\u201cYes, that\u2019s okay,\u201d said Erik. \u201cWhat should I do now?\u201d\n\n\n\u201cFirst, I think we have to create lists of your flavors and toppings. And I think your base product\u2013coffee or chocolate\u2013should also be a list. Do you remember how to create lists in Python?\u201d\n\n\n\u201cWith square brackets?\u201d\n\n\n\u201cYes! And don\u2019t forget that each element inside the brackets should be in quotes. Single quotes or double quotes\u2013whatever you prefer. Let\u2019s put the lists in the beginning of the script. Right after the first line make an empty line and put your lists after it.\u201d\n\n\n\u201cOkay,\u201d he said and typed:\n\n\n#!/usr/bin/python3\n\n\n\nproducts\n \n=\n \n[\n\"chocolate\"\n,\n \n\"coffee\"\n]\n\n\nflavors\n \n=\n \n[\n\"caramel\"\n,\n\"butterscotch\"\n,\n\"strawberry\"\n,\n\"raspberry\"\n,\n\"blueberry\"\n,\n\"marshmallow\"\n,\n\"plain\"\n]\n\n\ntoppings\n \n=\n \n[\n\"chocolate\"\n,\n \n\"sweetstrawberry\"\n,\n \n\"caramel\"\n]\n\n\n\n\n\n\u201cGood, but let\u2019s make a little bit better. Remember, in Python, we want to make programs readable. We are very specific when it comes to spaces, tabs, indents. There is even a document which tells people how to make code more readable. It\u2019s highly recommended to follow some simple rules. For example, one of the rules is not to make lines longer than 80 characters. You see, in your code, the \nflavors\n list is too long. Why don\u2019t we place every flavor on a separate line? Just make sure they are placed one under another. With \ngedit\n you will use spaces, but other editors usually do it for you.\u201d\n\n\nAfter tapping [Space] and [Enter] several tiems Erik came up with this:\n\n\nproducts\n \n=\n \n[\n\"chocolate\"\n,\n \n\"coffee\"\n]\n\n\nflavors\n \n=\n \n[\n\"caramel\"\n,\n\n           \n\"butterscotch\"\n,\n\n           \n\"strawberry\"\n,\n\n           \n\"raspberry\"\n,\n\n           \n\"blueberry\"\n,\n\n           \n\"sweetstrawberry\"\n,\n\n           \n\"marshmallow\"\n,\n\n           \n\"plain\"\n]\n\n\ntoppings\n \n=\n \n[\n\"chocolate\"\n,\n \n\"sweetstrawberry\"\n,\n \n\"caramel\"\n]\n\n\n\n\n\n\u201cMuch, much better,\u201d said I. \u201cAlso, as we are talking about readability, let\u2019s rename the variable \nanswer\n to \nproduct\n. It will make more sense, do you agree?\u201d\n\n\n\u201cOkay, done. What\u2019s next? Somehow I should print products, flavors, and toppings and then ask for input, right?\u201d\n\n\n\u201cAbsolutely right! How do you print a list line by line? What in Python can do things several times in a row?\u201d\n\n\n\u201cA loop?\u201d\n\n\n\u201cRight, a loop. But which loop? What kinds of loops do you know in Python?\u201d\n\n\n\u201cI remember there is a \nwhile\n loop and a \nfor\n loop.\u201d\n\n\n\u201cRight. And what is the difference between them? Which one can help us here with lists?\u201d\n\n\n\u201cI remember that \nwhile\n loop you can run forever. And \nfor\n loop you repeat step by step several times, \u201d said Erik.\n\n\n\u201cSo, how do you do something with every element in a list in Python? Like, print it, for example. You can Google it, not a problem.\u201d\n\n\nHe opened a new tab and asked Google: \npython loop list\n. After going through several sites he finally found this page: (\nhttp://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python/\n) and typed right after the list definitions in his script:\n\n\nfor\n \np\n \nin\n \nproducts\n:\n\n    \nprint\n(\np\n)\n\n\n\n\n\n\u201cLooks good to me. Now try to run it and if it works, do the same for other lists.\u201d\n\n\nerik@idea:~$\n ./coffeeshop.py\n\nchocolate\n\n\ncoffee\n\n\nDo you want coffee or chocolate?\n\n\n\n\n\n\u201cYou can stop it with [Ctrl]-[C] now. We are not going to go through all the dialogs again. We are going to re-write it now,\u201d said I. \u201cRemember, you were going to make it like a menu with letters or numbers?\u201d\n\n\n\u201cYes, and you said that numbers would be a better choice. But I didn\u2019t understand why.\u201d\n\n\n\u201cWell, first, I said that it\u2019s quite possible that you have two flavors with names beginning with the same letter. Second, with letters we would have to write many \nif\ns, like \u201cif the user presses \u2018S\u2019 that means \u2018strawberry\u2019 and others. Third, adding a new flavor would mean that we have to write a new \nif\n. Let\u2019s start simple, with numbers. You would say \u2018for strawberry press 2\u2019 and then strawberry would be the \nsecond\n element in your list. Much easier, right?\u201d\n\n\n\u201cSo, I should print numbers and their list entries, right? I remember I can use the \nrange()\n function to print a list of numbers.\u201d\n\n\n\u201cRight. But there is a better, more \nPythonic\n way of doing this. Take a look at the page you\u2019ve just found. They mention the construct called \nenumerate\n. I think this is what we can use here.\u201d\n\n\nErik scanned the page (\nhttp://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python/\n) and found the \nenumerate\n example. In our case the task was even simpler than in the example so he quickly wrote this:\n\n\nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n):\n\n    \nprint\n(\ni\n,\n \nproduct\n)\n\n\n\n\n\nHe tried to run it and got this:\n\n\n0 chocolate\n1 coffee\n\n\n\n\n\u201cBut it starts with zero!\u201d said Erik. \u201cA-ha, I understand, it\u2019s because indexes in Python start with zero.\u201d\n\n\n\u201cGreat that you remember that! It\u2019s one of the most fundamental concepts in programming! Of course, I\u2019m joking, but only partly joking,\u201d said I. \u201cYou can change that. Smart people, who wrote the \nenumerate()\n function, predicted that somebody will need to show such a list to non-programmers and start it with \u20181\u2019. So you can add this parameter right after \nflavors\n: add a comma and type \nstart=1\n.\u201d\n\n\nErik changed his code to this:\n\n\nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nproduct\n)\n\n\n\n\n\nand got the expected result:\n\n\n1 chocolate\n2 coffee\n\n\n\u201cWell done!\u201d said I. \u201cNow add the same thing to other lists: flavors and toppings. After that let\u2019s take a break. Tomorrow we\u2019ll work with menus.\u201d\n\n\nHe worked for a while and here is what he\u2019s got:\n\n\n#!/usr/bin/python3\n\n\n\nproducts\n \n=\n \n[\n\"chocolate\"\n,\n \n\"coffee\"\n]\n\n\nflavors\n \n=\n \n[\n\"caramel\"\n,\n\n           \n\"butterscotch\"\n,\n\n           \n\"strawberry\"\n,\n\n           \n\"raspberry\"\n,\n\n           \n\"blueberry\"\n,\n\n           \n\"sweetstrawberry\"\n,\n\n           \n\"marshmallow\"\n,\n\n           \n\"plain\"\n]\n\n\ntoppings\n \n=\n \n[\n\"chocolate\"\n,\n \n\"sweetstrawberry\"\n,\n \n\"caramel\"\n]\n\n\n\nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nproduct\n)\n\n\n\nfor\n \ni\n,\n \nflavor\n \nin\n \nenumerate\n(\nflavors\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nflavor\n)\n\n\n\nfor\n \ni\n,\n \ntopping\n \nin\n \nenumerate\n(\ntoppings\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \ntopping\n)\n\n\n\n\n\nHe ran the script and got the expected result:\n\n\nerik@idea:~$\n ./coffeeshop.py\n\n1 chocolate\n\n\n2 coffee\n\n\n1 caramel\n\n\n2 butterscotch\n\n\n3 strawberry\n\n\n4 raspberry\n\n\n5 blueberry\n\n\n6 sweetstrawberry\n\n\n7 marshmallow\n\n\n8 plain\n\n\n1 chocolate\n\n\n2 sweetstrawberry\n\n\n3 caramel",
            "title": "Day 1 - Text Dialogues"
        },
        {
            "location": "/Python_vacation_day01/index.html#python-vacation-day-1",
            "text": "",
            "title": "Python Vacation -- Day 1"
        },
        {
            "location": "/Python_vacation_day01/index.html#text-dialogs",
            "text": "Next day we decided to get right to the Coffee Shop application. Erik has done enough simple exercises already and was eager to write something really useful.  \u201cRemember what we did yesterday to take orders from the customers?\u201d  \u201cYes, we used the  input()  function.\u201d  \u201cAnd then?\u201d  \u201cAnd then we saved the input to a variable and then printed it like \u2018You\u2019ve ordered this and that\u2019. \u201c  \u201cOkay, good. Now let\u2019s do the same thing in the script. Open a new file and save it right away\u2013you know, I don\u2019t like when you have a bunch of files called  Untitled  in your home directory.\u201d  Erik created a file and saved it as  coffeeshop.py .  \u201cWhat should be at the beginning of each Python script?\u201d asked I.  \u201cSomething about python3 with some cryptic letters in the beginning. Let me check in my  hello.py  file. Oh, right, it should be  #!/usr/bin/python3 . \u201c  \u201cYou\u2019re right! I\u2019m sure pretty soon you will write it automatically, without a cheat sheet! Now write the  input()  dialog, like you did yesterday in the console session. Remember?\u201d  \u201cYes!\u201d said he and started typing. A couple minutes later he showed me the script.  #!/usr/bin/python3  answer   =   input ( \"Do you want coffee or chocolate?\" )  flavor   =   input ( \"What flavor do you want?\" )  topping   =   input ( \"What topping do you want?\" )  print ( \"You have ordered \" ,   answer ,   \" with \" ,   flavor ,   \" flavor and \" ,   topping ,   \" topping. Thanks!\" )   \u201cGood. Let\u2019s run it! Remember what to do? You have already placed the python3 string in the beginning, now you just have to do  chmod a+x coffeeshop.py . Go ahead and then run the script.\u201d  erik@idea:~$  chmod a+x coffeeshop.py erik@idea:~$  ./coffeeshop.py Do you want coffee or chocolate?coffee  What flavor do you want?strawberry  What topping do you want?chocolate  You have ordered coffee with strawberry flavor and chocolate topping. Thanks!  erik@idea:~$    \u201cWow, it really works! Great job, Erik!\u201d  \u201cYeah, I copy-pasted the commands from our yesterday session. I didn\u2019t close that window,\u201d and he smiled as if he has cheated a little.  \u201cThat\u2019s okay,\u201d said I. \u201cThere is a saying among programmers: \u201cDRY - Don\u2019t Repeat Yourself.\u201d So there is nothing wrong with reusing your own work. Now let\u2019s see how we can improve it. What do you think?\u201d  \u201cI see that they can order a flavor or topping which I don\u2019t have. And also I think it takes too long to type  strawberry .\u201d  \u201cSo, what would be your solution?\u201d I asked.  \u201cI would give them a list of flavors and toppings to choose from and ask to type a letter.\u201d  \u201cGood solution. But there could be different flavors with the same first letter\u2026 For simplicity let\u2019s use numbers. Like if you want strawberry flavor, press \u20182\u2019 or something like that. Will this work for you?\u201d  \u201cYes, that\u2019s okay,\u201d said Erik. \u201cWhat should I do now?\u201d  \u201cFirst, I think we have to create lists of your flavors and toppings. And I think your base product\u2013coffee or chocolate\u2013should also be a list. Do you remember how to create lists in Python?\u201d  \u201cWith square brackets?\u201d  \u201cYes! And don\u2019t forget that each element inside the brackets should be in quotes. Single quotes or double quotes\u2013whatever you prefer. Let\u2019s put the lists in the beginning of the script. Right after the first line make an empty line and put your lists after it.\u201d  \u201cOkay,\u201d he said and typed:  #!/usr/bin/python3  products   =   [ \"chocolate\" ,   \"coffee\" ]  flavors   =   [ \"caramel\" , \"butterscotch\" , \"strawberry\" , \"raspberry\" , \"blueberry\" , \"marshmallow\" , \"plain\" ]  toppings   =   [ \"chocolate\" ,   \"sweetstrawberry\" ,   \"caramel\" ]   \u201cGood, but let\u2019s make a little bit better. Remember, in Python, we want to make programs readable. We are very specific when it comes to spaces, tabs, indents. There is even a document which tells people how to make code more readable. It\u2019s highly recommended to follow some simple rules. For example, one of the rules is not to make lines longer than 80 characters. You see, in your code, the  flavors  list is too long. Why don\u2019t we place every flavor on a separate line? Just make sure they are placed one under another. With  gedit  you will use spaces, but other editors usually do it for you.\u201d  After tapping [Space] and [Enter] several tiems Erik came up with this:  products   =   [ \"chocolate\" ,   \"coffee\" ]  flavors   =   [ \"caramel\" , \n            \"butterscotch\" , \n            \"strawberry\" , \n            \"raspberry\" , \n            \"blueberry\" , \n            \"sweetstrawberry\" , \n            \"marshmallow\" , \n            \"plain\" ]  toppings   =   [ \"chocolate\" ,   \"sweetstrawberry\" ,   \"caramel\" ]   \u201cMuch, much better,\u201d said I. \u201cAlso, as we are talking about readability, let\u2019s rename the variable  answer  to  product . It will make more sense, do you agree?\u201d  \u201cOkay, done. What\u2019s next? Somehow I should print products, flavors, and toppings and then ask for input, right?\u201d  \u201cAbsolutely right! How do you print a list line by line? What in Python can do things several times in a row?\u201d  \u201cA loop?\u201d  \u201cRight, a loop. But which loop? What kinds of loops do you know in Python?\u201d  \u201cI remember there is a  while  loop and a  for  loop.\u201d  \u201cRight. And what is the difference between them? Which one can help us here with lists?\u201d  \u201cI remember that  while  loop you can run forever. And  for  loop you repeat step by step several times, \u201d said Erik.  \u201cSo, how do you do something with every element in a list in Python? Like, print it, for example. You can Google it, not a problem.\u201d  He opened a new tab and asked Google:  python loop list . After going through several sites he finally found this page: ( http://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python/ ) and typed right after the list definitions in his script:  for   p   in   products : \n     print ( p )   \u201cLooks good to me. Now try to run it and if it works, do the same for other lists.\u201d  erik@idea:~$  ./coffeeshop.py chocolate  coffee  Do you want coffee or chocolate?   \u201cYou can stop it with [Ctrl]-[C] now. We are not going to go through all the dialogs again. We are going to re-write it now,\u201d said I. \u201cRemember, you were going to make it like a menu with letters or numbers?\u201d  \u201cYes, and you said that numbers would be a better choice. But I didn\u2019t understand why.\u201d  \u201cWell, first, I said that it\u2019s quite possible that you have two flavors with names beginning with the same letter. Second, with letters we would have to write many  if s, like \u201cif the user presses \u2018S\u2019 that means \u2018strawberry\u2019 and others. Third, adding a new flavor would mean that we have to write a new  if . Let\u2019s start simple, with numbers. You would say \u2018for strawberry press 2\u2019 and then strawberry would be the  second  element in your list. Much easier, right?\u201d  \u201cSo, I should print numbers and their list entries, right? I remember I can use the  range()  function to print a list of numbers.\u201d  \u201cRight. But there is a better, more  Pythonic  way of doing this. Take a look at the page you\u2019ve just found. They mention the construct called  enumerate . I think this is what we can use here.\u201d  Erik scanned the page ( http://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python/ ) and found the  enumerate  example. In our case the task was even simpler than in the example so he quickly wrote this:  for   i ,   product   in   enumerate ( products ): \n     print ( i ,   product )   He tried to run it and got this:  0 chocolate\n1 coffee  \u201cBut it starts with zero!\u201d said Erik. \u201cA-ha, I understand, it\u2019s because indexes in Python start with zero.\u201d  \u201cGreat that you remember that! It\u2019s one of the most fundamental concepts in programming! Of course, I\u2019m joking, but only partly joking,\u201d said I. \u201cYou can change that. Smart people, who wrote the  enumerate()  function, predicted that somebody will need to show such a list to non-programmers and start it with \u20181\u2019. So you can add this parameter right after  flavors : add a comma and type  start=1 .\u201d  Erik changed his code to this:  for   i ,   product   in   enumerate ( products ,   start = 1 ): \n     print ( i ,   product )   and got the expected result:  1 chocolate\n2 coffee \n\u201cWell done!\u201d said I. \u201cNow add the same thing to other lists: flavors and toppings. After that let\u2019s take a break. Tomorrow we\u2019ll work with menus.\u201d  He worked for a while and here is what he\u2019s got:  #!/usr/bin/python3  products   =   [ \"chocolate\" ,   \"coffee\" ]  flavors   =   [ \"caramel\" , \n            \"butterscotch\" , \n            \"strawberry\" , \n            \"raspberry\" , \n            \"blueberry\" , \n            \"sweetstrawberry\" , \n            \"marshmallow\" , \n            \"plain\" ]  toppings   =   [ \"chocolate\" ,   \"sweetstrawberry\" ,   \"caramel\" ]  for   i ,   product   in   enumerate ( products ,   start = 1 ): \n     print ( i ,   product )  for   i ,   flavor   in   enumerate ( flavors ,   start = 1 ): \n     print ( i ,   flavor )  for   i ,   topping   in   enumerate ( toppings ,   start = 1 ): \n     print ( i ,   topping )   He ran the script and got the expected result:  erik@idea:~$  ./coffeeshop.py 1 chocolate  2 coffee  1 caramel  2 butterscotch  3 strawberry  4 raspberry  5 blueberry  6 sweetstrawberry  7 marshmallow  8 plain  1 chocolate  2 sweetstrawberry  3 caramel",
            "title": "Text dialogs"
        },
        {
            "location": "/Python_vacation_day02/index.html",
            "text": "Python Vacation \u2013 Day 2\n\n\nMenus\n\n\nNext day we started with refreshing our recently acquired Python skills. \n\n\n\u201cSo, what have we learned yesterday?\u201d I asked Erik.\n\n\n\u201cLists! And \nenumerate()\n!\u201d he answered quickly. \n\n\n\u201cRight, that was your last script that used \nenumerate()\n. What else? Do you remember what we started with?\u201d\n\n\n\u201cYes, I remember: we worked with \ninput()\n. We tried to ask questions like \u2018What flavor do you want?\u2019. But then we decided that menus will work better because people won\u2019t order something we don\u2019t have.\u201d\n\n\n\u201cYes, that\u2019s right. Now after we have learned how to print out lists and also lists with numbers, we can just add what we learned about \ninput()\n and create our first menu. Why don\u2019t you add \ninput()\n after you have listed the choices and get the number your customer pressed? Remember, you have to assign the user\u2019s input to a variable? When you got the input, you can print it out.\u201d\n\n\n\u201cOkay,\u201d said Erik and started typing. Here is what he\u2019s got:\n\n\n#!/usr/bin/python3\n\n\n\nproducts\n \n=\n \n[\n\"chocolate\"\n,\n \n\"coffee\"\n]\n\n\nflavors\n \n=\n \n[\n\"caramel\"\n,\n\n           \n\"butterscotch\"\n,\n\n           \n\"strawberry\"\n,\n\n           \n\"raspberry\"\n,\n\n           \n\"blueberry\"\n,\n\n           \n\"sweetstrawberry\"\n,\n\n           \n\"marshmallow\"\n,\n\n           \n\"plain\"\n]\n\n\ntoppings\n \n=\n \n[\n\"chocolate\"\n,\n \n\"sweetstrawberry\"\n,\n \n\"caramel\"\n]\n\n\n\nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nproduct\n)\n\n\np\n \n=\n \ninput\n()\n\n\nprint\n(\np\n)\n\n\n\nfor\n \ni\n,\n \nflavor\n \nin\n \nenumerate\n(\nflavors\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nflavor\n)\n\n\nf\n \n=\n \ninput\n()\n\n\nprint\n(\nf\n)\n\n\n\nfor\n \ni\n,\n \ntopping\n \nin\n \nenumerate\n(\ntoppings\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \ntopping\n)\n\n\nt\n \n=\n \ninput\n()\n\n\nprint\n(\nt\n)\n\n\n\n\n\nHe saved the file and ran it in the terminal:\n\n\nerik@idea:~$\n ./coffeeshop.py\n\n1 chocolate\n\n\n2 coffee\n\n\n2\n\n\n2\n\n\n1 caramel\n\n\n2 butterscotch\n\n\n3 strawberry\n\n\n4 raspberry\n\n\n5 blueberry\n\n\n6 sweetstrawberry\n\n\n7 marshmallow\n\n\n8 plain\n\n\n7\n\n\n7\n\n\n1 chocolate\n\n\n2 sweetstrawberry\n\n\n3 caramel\n\n\n1\n\n\n1\n\n\n\n\n\n\u201cThis is good, but in reality, you wanted to print out something like \u2018Here is your order: base product: coffee, flavor: marshmallow, topping: chocolate\u2019, right? How would you get products and flavors from the numbers?\u201d\n\n\n\u201cYes, you told me yesterday! We\u2019ll use them as list indexes!\u201d\n\n\n\u201cGo ahead!\u201d\n\n\nErik came up with this script:\n\n\n#!/usr/bin/python3\n\n\n\nproducts\n \n=\n \n[\n\"chocolate\"\n,\n \n\"coffee\"\n]\n\n\nflavors\n \n=\n \n[\n\"caramel\"\n,\n\n           \n\"butterscotch\"\n,\n\n           \n\"strawberry\"\n,\n\n           \n\"raspberry\"\n,\n\n           \n\"blueberry\"\n,\n\n           \n\"sweetstrawberry\"\n,\n\n           \n\"marshmallow\"\n,\n\n           \n\"plain\"\n]\n\n\ntoppings\n \n=\n \n[\n\"chocolate\"\n,\n \n\"sweetstrawberry\"\n,\n \n\"caramel\"\n]\n\n\n\nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nproduct\n)\n\n\np\n \n=\n \ninput\n()\n\n\n\nfor\n \ni\n,\n \nflavor\n \nin\n \nenumerate\n(\nflavors\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nflavor\n)\n\n\nf\n \n=\n \ninput\n()\n\n\n\nfor\n \ni\n,\n \ntopping\n \nin\n \nenumerate\n(\ntoppings\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \ntopping\n)\n\n\nt\n \n=\n \ninput\n()\n\n\n\nprint\n(\n\"Here is your order: base product: \"\n,\n \nproducts\n[\np\n],\n \n  \n\", flavor: \"\n,\n \nflavors\n[\nf\n],\n \n\", topping: \"\n,\n \ntoppings\n[\nt\n])\n\n\n\n\n\nHe ran it, answered all the questions and got this:\n\n\nTraceback (most recent call last):\n  File \"./coffeeshop-day2.py\", line 26, in <module>\n    print(\"Here is your order: base product: \", products[p], \nTypeError: list indices must be integers or slices, not str\n\n\n\n\n\u201cWhat\u2019s this?\u201d he looked puzzled.\n\n\n\u201cThis is your first error message! Congratulations!\u201d\n\n\n\u201cWhy are you so glad??? What\u2019s so good about error messages?\u201d Erik was clearly offended. Of course, he was sure that his dad is making fun of him.\n\n\n\u201cErik, don\u2019t get me wrong. Believe me, I want your application to work as much as you do. That\u2019s why I\u2019m glad to see an error message\u2013at least it gives us some information. It\u2019s much worse when your program just doesn\u2019t work and says nothing. Also, you have heard this from me many times already: making mistakes is the best way to learn. Don\u2019t worry, we\u2019ll fix it.\u201d\n\n\n\u201cBut what should we do?\u201d\n\n\n\u201cYou see, in this case, Python is pretty clear about what\u2019s wrong. It says that list indices must be integers, not strings. Remember, before we started working with menus, when you asked your users about their preferences what did you get?\u201d\n\n\n\u201cThey could answer \u2018coffee\u2019 or \u2018strawberry\u2019.\u201d\n\n\n\u201cAnd what are they in Python?\u201d\n\n\n\u201cStrings?\u201d\n\n\n\u201cRight, they are strings! And now when your users input \u20181\u2019 or \u20183\u2019, or \u20187\u2019 - they also input \nstrings\n which consist of numbers. They are not numbers, they are strings consisting of \nletters\n \u20181\u2019, \u20183\u2019, \u20187\u2019. Luckily, in Python, we can easily convert them to numbers with function \nint()\n. You have to do this: take \u2018p\u2019 or \u2018f\u2019 or \u2018t\u2019\u2013the answer you received from the user\u2013and convert it to an integer using \nint()\n. You can do it right after the \ninput()\n call and assign it to something like \np_index\n. In Python you can even assign it to the same variable\u2013what used to be a string, becomes an integer. But for now let\u2019s have separate variables: our program will be more readable this way.\u201d\n\n\n\u201cLike this?\u201d\n\n\np_index\n \n=\n \nint\n(\np\n)\n\n\n\n\n\n\u201cYes, exactly.\u201d\n\n\nHe made the changes:\n\n\n.\n \n.\n \n.\n\n\n\nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nproduct\n)\n\n\np\n \n=\n \ninput\n()\n\n\np_index\n \n=\n \nint\n(\np\n)\n\n\n\nfor\n \ni\n,\n \nflavor\n \nin\n \nenumerate\n(\nflavors\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nflavor\n)\n\n\nf\n \n=\n \ninput\n()\n\n\nf_index\n \n=\n \nint\n(\nf\n)\n\n\n\nfor\n \ni\n,\n \ntopping\n \nin\n \nenumerate\n(\ntoppings\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \ntopping\n)\n\n\nt\n \n=\n \ninput\n()\n\n\nt_index\n \n=\n \nint\n(\nt\n)\n\n\n\nprint\n(\n\"Here is your order: base product: \"\n,\n \nproducts\n[\np_index\n],\n \n  \n\", flavor: \"\n,\n \nflavors\n[\nf_index\n],\n \n\", topping: \"\n,\n \ntoppings\n[\nt_index\n])\n\n\n\n\n\n\u2026and ran the script:\n\n\n1 chocolate\n2 coffee\n1\n1 caramel\n2 butterscotch\n3 strawberry\n4 raspberry\n5 blueberry\n6 sweetstrawberry\n7 marshmallow\n8 plain\n5\n1 chocolate\n2 sweetstrawberry\n3 caramel\n1\nHere is your order: base product:  coffee , flavor:  sweetstrawberry , topping:  sweetstrawberry\n\n\n\n\n\u201cWait! It got it all wrong! I asked for chocolate with blueberry and it gave me coffee with sweetstrawberry!\u201d\n\n\n\u201cFirst of all, let me ask you: \u2018Who is that \u2018it\u2019 you are talking about?\u2019\u201c\n\n\n\u201cPython, of course, who else??\u201d\n\n\n\u201cErik, dear, please remember: computer and Python do only what \nyou\n told them to do. If \nyour\n program doesn\u2019t work as expected, please don\u2019t blame Python for that. Just try to think: what could be wrong here? You converted the strings to numbers, that\u2019s fine. You used those numbers as indexes for your lists\u2026\u201d\n\n\n\u201cA-ha! I understand now! Yesterday we talked about indexes and that they always start with zero. And we used that \nstart=1\n to make our lists more human-readable. Yes, now I see that it took the \nnext\n element in all three cases! Okay, I will just subtract 1 from the numbers before using them with lists!\u201d\n\n\nI suggested: \u201cYou can do this even inside the square brackets. No need for a separate line of code for that.\u201d\n\n\nHe fixed his code:\n\n\nprint\n(\n\"Here is your order: base product: \"\n,\n \nproducts\n[\np_index\n-\n1\n],\n \n  \n\", flavor: \"\n,\n \nflavors\n[\nf_index\n-\n1\n],\n \n\", topping: \"\n,\n \ntoppings\n[\nt_index\n-\n1\n])\n\n\n\n\n\n\u2026and finally got his order right!\n\n\n\u201cLet me try your program too,\u201d asked I.\n\n\n\u201cGo ahead, order something,\u201d Erik was very proud of his first application.\n\n\nerik@idea:~$\n ./coffeeshop.py\n\n1 chocolate\n\n\n2 coffee\n\n\nfgdhjkfjgd\n\n\nTraceback (most recent call last):\n\n\n  File \"./coffeeshop-day2.py\", line 17, in <module>\n\n\n    p_index = int(p)\n\n\nValueError: invalid literal for int() with base 10: 'fgdhjkfjgd'\n\n\n\n\n\n\u201cWHAT ARE YOU DOING???\u201d Erik was outraged.\n\n\n\u201cI am testing your program,\u201d I answered as calmly as possible.\n\n\n\u201cBut you are not supposed to enter things like that! You see, it clearly indicates that the product number should be either 1 or 2! And not these stupid characters that you entered!\u201d\n\n\n\u201cBut I am just a stupid user, I know nothing about your expectations. And I don\u2019t read your menus carefully. Or I am a hacker who tries to break into your program. Or I\u2019m a kid who just likes to play with the keyboard. You as a programmer are responsible for checking if the input is correct.\u201d\n\n\n\u201cBut how do I do that?\u201d\n\n\n\u201cThere many ways to check your input. One of them is called \u2018Exceptions\u2019 in Python. And we will talk about it tomorrow. Let me try one more time.\u201d\n\n\n\u201cYes, but please, use just numbers!\u201d\n\n\nerik@idea:~$\n ./coffeeshop.py\n\n1 chocolate\n\n\n2 coffee\n\n\n99\n\n\n1 caramel\n\n\n2 butterscotch\n\n\n3 strawberry\n\n\n4 raspberry\n\n\n5 blueberry\n\n\n6 sweetstrawberry\n\n\n7 marshmallow\n\n\n8 plain\n\n\n0\n\n\n1 chocolate\n\n\n2 sweetstrawberry\n\n\n3 caramel\n\n\n356\n\n\nTraceback (most recent call last):\n\n\n  File \"./coffeeshop-day2.py\", line 29, in <module>\n\n\n    print(\"Here is your order: base product: \", products[p_index-1], \n\n\nIndexError: list index out of range\n\n\n\n\n\n\u201cAGAIN??? You broke it again!\u201d\n\n\n\u201cYou see, Python clearly tells you that the index I\u2019ve entered is out of range. Which means we have to check the input not only for being a number but also for being a \u2018good\u2019 number, i.e. being in the range of our lists\u2019 indexes. And, as far as you can see, for different lists this range is different.\u201d\n\n\n\u201cOkay, okay, I\u2019ll do that. But it\u2019s so-o boring to check everything!..\u201d\n\n\n\u201cI completely agree with you. It\u2019s probably the most boring part of programming. But at the same time, it\u2019s one of the most important parts, if we want to write safe programs and be protected from hacker attacks. Believe it or not, a lot of hacker attacks happen just because programmers didn\u2019t check the input.\n\n\n\u201cLet\u2019s leave it for tomorrow. We\u2019ll have to do two things: check if the input is an integer number and check if it\u2019s in the range of list indexes,\u201d with this I felt much better: now we had a plan for tomorrow.\n\n\nTODO: add links to the examples of hacker attacks",
            "title": "Day 2 - Menus"
        },
        {
            "location": "/Python_vacation_day02/index.html#python-vacation-day-2",
            "text": "",
            "title": "Python Vacation -- Day 2"
        },
        {
            "location": "/Python_vacation_day02/index.html#menus",
            "text": "Next day we started with refreshing our recently acquired Python skills.   \u201cSo, what have we learned yesterday?\u201d I asked Erik.  \u201cLists! And  enumerate() !\u201d he answered quickly.   \u201cRight, that was your last script that used  enumerate() . What else? Do you remember what we started with?\u201d  \u201cYes, I remember: we worked with  input() . We tried to ask questions like \u2018What flavor do you want?\u2019. But then we decided that menus will work better because people won\u2019t order something we don\u2019t have.\u201d  \u201cYes, that\u2019s right. Now after we have learned how to print out lists and also lists with numbers, we can just add what we learned about  input()  and create our first menu. Why don\u2019t you add  input()  after you have listed the choices and get the number your customer pressed? Remember, you have to assign the user\u2019s input to a variable? When you got the input, you can print it out.\u201d  \u201cOkay,\u201d said Erik and started typing. Here is what he\u2019s got:  #!/usr/bin/python3  products   =   [ \"chocolate\" ,   \"coffee\" ]  flavors   =   [ \"caramel\" , \n            \"butterscotch\" , \n            \"strawberry\" , \n            \"raspberry\" , \n            \"blueberry\" , \n            \"sweetstrawberry\" , \n            \"marshmallow\" , \n            \"plain\" ]  toppings   =   [ \"chocolate\" ,   \"sweetstrawberry\" ,   \"caramel\" ]  for   i ,   product   in   enumerate ( products ,   start = 1 ): \n     print ( i ,   product )  p   =   input ()  print ( p )  for   i ,   flavor   in   enumerate ( flavors ,   start = 1 ): \n     print ( i ,   flavor )  f   =   input ()  print ( f )  for   i ,   topping   in   enumerate ( toppings ,   start = 1 ): \n     print ( i ,   topping )  t   =   input ()  print ( t )   He saved the file and ran it in the terminal:  erik@idea:~$  ./coffeeshop.py 1 chocolate  2 coffee  2  2  1 caramel  2 butterscotch  3 strawberry  4 raspberry  5 blueberry  6 sweetstrawberry  7 marshmallow  8 plain  7  7  1 chocolate  2 sweetstrawberry  3 caramel  1  1   \u201cThis is good, but in reality, you wanted to print out something like \u2018Here is your order: base product: coffee, flavor: marshmallow, topping: chocolate\u2019, right? How would you get products and flavors from the numbers?\u201d  \u201cYes, you told me yesterday! We\u2019ll use them as list indexes!\u201d  \u201cGo ahead!\u201d  Erik came up with this script:  #!/usr/bin/python3  products   =   [ \"chocolate\" ,   \"coffee\" ]  flavors   =   [ \"caramel\" , \n            \"butterscotch\" , \n            \"strawberry\" , \n            \"raspberry\" , \n            \"blueberry\" , \n            \"sweetstrawberry\" , \n            \"marshmallow\" , \n            \"plain\" ]  toppings   =   [ \"chocolate\" ,   \"sweetstrawberry\" ,   \"caramel\" ]  for   i ,   product   in   enumerate ( products ,   start = 1 ): \n     print ( i ,   product )  p   =   input ()  for   i ,   flavor   in   enumerate ( flavors ,   start = 1 ): \n     print ( i ,   flavor )  f   =   input ()  for   i ,   topping   in   enumerate ( toppings ,   start = 1 ): \n     print ( i ,   topping )  t   =   input ()  print ( \"Here is your order: base product: \" ,   products [ p ],  \n   \", flavor: \" ,   flavors [ f ],   \", topping: \" ,   toppings [ t ])   He ran it, answered all the questions and got this:  Traceback (most recent call last):\n  File \"./coffeeshop-day2.py\", line 26, in <module>\n    print(\"Here is your order: base product: \", products[p], \nTypeError: list indices must be integers or slices, not str  \u201cWhat\u2019s this?\u201d he looked puzzled.  \u201cThis is your first error message! Congratulations!\u201d  \u201cWhy are you so glad??? What\u2019s so good about error messages?\u201d Erik was clearly offended. Of course, he was sure that his dad is making fun of him.  \u201cErik, don\u2019t get me wrong. Believe me, I want your application to work as much as you do. That\u2019s why I\u2019m glad to see an error message\u2013at least it gives us some information. It\u2019s much worse when your program just doesn\u2019t work and says nothing. Also, you have heard this from me many times already: making mistakes is the best way to learn. Don\u2019t worry, we\u2019ll fix it.\u201d  \u201cBut what should we do?\u201d  \u201cYou see, in this case, Python is pretty clear about what\u2019s wrong. It says that list indices must be integers, not strings. Remember, before we started working with menus, when you asked your users about their preferences what did you get?\u201d  \u201cThey could answer \u2018coffee\u2019 or \u2018strawberry\u2019.\u201d  \u201cAnd what are they in Python?\u201d  \u201cStrings?\u201d  \u201cRight, they are strings! And now when your users input \u20181\u2019 or \u20183\u2019, or \u20187\u2019 - they also input  strings  which consist of numbers. They are not numbers, they are strings consisting of  letters  \u20181\u2019, \u20183\u2019, \u20187\u2019. Luckily, in Python, we can easily convert them to numbers with function  int() . You have to do this: take \u2018p\u2019 or \u2018f\u2019 or \u2018t\u2019\u2013the answer you received from the user\u2013and convert it to an integer using  int() . You can do it right after the  input()  call and assign it to something like  p_index . In Python you can even assign it to the same variable\u2013what used to be a string, becomes an integer. But for now let\u2019s have separate variables: our program will be more readable this way.\u201d  \u201cLike this?\u201d  p_index   =   int ( p )   \u201cYes, exactly.\u201d  He made the changes:  .   .   .  for   i ,   product   in   enumerate ( products ,   start = 1 ): \n     print ( i ,   product )  p   =   input ()  p_index   =   int ( p )  for   i ,   flavor   in   enumerate ( flavors ,   start = 1 ): \n     print ( i ,   flavor )  f   =   input ()  f_index   =   int ( f )  for   i ,   topping   in   enumerate ( toppings ,   start = 1 ): \n     print ( i ,   topping )  t   =   input ()  t_index   =   int ( t )  print ( \"Here is your order: base product: \" ,   products [ p_index ],  \n   \", flavor: \" ,   flavors [ f_index ],   \", topping: \" ,   toppings [ t_index ])   \u2026and ran the script:  1 chocolate\n2 coffee\n1\n1 caramel\n2 butterscotch\n3 strawberry\n4 raspberry\n5 blueberry\n6 sweetstrawberry\n7 marshmallow\n8 plain\n5\n1 chocolate\n2 sweetstrawberry\n3 caramel\n1\nHere is your order: base product:  coffee , flavor:  sweetstrawberry , topping:  sweetstrawberry  \u201cWait! It got it all wrong! I asked for chocolate with blueberry and it gave me coffee with sweetstrawberry!\u201d  \u201cFirst of all, let me ask you: \u2018Who is that \u2018it\u2019 you are talking about?\u2019\u201c  \u201cPython, of course, who else??\u201d  \u201cErik, dear, please remember: computer and Python do only what  you  told them to do. If  your  program doesn\u2019t work as expected, please don\u2019t blame Python for that. Just try to think: what could be wrong here? You converted the strings to numbers, that\u2019s fine. You used those numbers as indexes for your lists\u2026\u201d  \u201cA-ha! I understand now! Yesterday we talked about indexes and that they always start with zero. And we used that  start=1  to make our lists more human-readable. Yes, now I see that it took the  next  element in all three cases! Okay, I will just subtract 1 from the numbers before using them with lists!\u201d  I suggested: \u201cYou can do this even inside the square brackets. No need for a separate line of code for that.\u201d  He fixed his code:  print ( \"Here is your order: base product: \" ,   products [ p_index - 1 ],  \n   \", flavor: \" ,   flavors [ f_index - 1 ],   \", topping: \" ,   toppings [ t_index - 1 ])   \u2026and finally got his order right!  \u201cLet me try your program too,\u201d asked I.  \u201cGo ahead, order something,\u201d Erik was very proud of his first application.  erik@idea:~$  ./coffeeshop.py 1 chocolate  2 coffee  fgdhjkfjgd  Traceback (most recent call last):    File \"./coffeeshop-day2.py\", line 17, in <module>      p_index = int(p)  ValueError: invalid literal for int() with base 10: 'fgdhjkfjgd'   \u201cWHAT ARE YOU DOING???\u201d Erik was outraged.  \u201cI am testing your program,\u201d I answered as calmly as possible.  \u201cBut you are not supposed to enter things like that! You see, it clearly indicates that the product number should be either 1 or 2! And not these stupid characters that you entered!\u201d  \u201cBut I am just a stupid user, I know nothing about your expectations. And I don\u2019t read your menus carefully. Or I am a hacker who tries to break into your program. Or I\u2019m a kid who just likes to play with the keyboard. You as a programmer are responsible for checking if the input is correct.\u201d  \u201cBut how do I do that?\u201d  \u201cThere many ways to check your input. One of them is called \u2018Exceptions\u2019 in Python. And we will talk about it tomorrow. Let me try one more time.\u201d  \u201cYes, but please, use just numbers!\u201d  erik@idea:~$  ./coffeeshop.py 1 chocolate  2 coffee  99  1 caramel  2 butterscotch  3 strawberry  4 raspberry  5 blueberry  6 sweetstrawberry  7 marshmallow  8 plain  0  1 chocolate  2 sweetstrawberry  3 caramel  356  Traceback (most recent call last):    File \"./coffeeshop-day2.py\", line 29, in <module>      print(\"Here is your order: base product: \", products[p_index-1],   IndexError: list index out of range   \u201cAGAIN??? You broke it again!\u201d  \u201cYou see, Python clearly tells you that the index I\u2019ve entered is out of range. Which means we have to check the input not only for being a number but also for being a \u2018good\u2019 number, i.e. being in the range of our lists\u2019 indexes. And, as far as you can see, for different lists this range is different.\u201d  \u201cOkay, okay, I\u2019ll do that. But it\u2019s so-o boring to check everything!..\u201d  \u201cI completely agree with you. It\u2019s probably the most boring part of programming. But at the same time, it\u2019s one of the most important parts, if we want to write safe programs and be protected from hacker attacks. Believe it or not, a lot of hacker attacks happen just because programmers didn\u2019t check the input.  \u201cLet\u2019s leave it for tomorrow. We\u2019ll have to do two things: check if the input is an integer number and check if it\u2019s in the range of list indexes,\u201d with this I felt much better: now we had a plan for tomorrow.  TODO: add links to the examples of hacker attacks",
            "title": "Menus"
        },
        {
            "location": "/Python_vacation_day03/index.html",
            "text": "Python Vacation \u2013 Day 3\n\n\nErrors and what to do about them\n\n\nNext day Erik was in a better mood. It seemed he forgot how I tortured his beautiful program. But we were going to talk about errors and exceptions so I had to remind him about yesterday.\n\n\n\u201cRemember what we did last time?\u201d\n\n\n\u201cYes, you did some stupid things with my program. I didn\u2019t know that you are so ignorant and have no idea about how to use computers. If the menu says: Choose between 1 and 2, you should press 1 or 2, and not that garbage you typed last time.\u201d\n\n\n\u201cWell, a lot of developers think this way. But life has more variety than a choice between 1 and 2. I told you already that you should expect a stupid user, who doesn\u2019t read menus, a hacker who wants to break in, a kid who is just playing with the keyboard. It\u2019s all your responsibility to react to bad input and make sure your program doesn\u2019t break.\u201d\n\n\n\u201cOkay, okay\u2026 You said something about \u2018exceptions\u2019 last time. What is it?\u201d\n\n\n\u201cThere are a lot of situations when a Python program could break. Wrong input, division by zero, wrong list index\u2013if your list has 5 elements and you are trying to access its 10\nth\n element. If you don\u2019t do anything about these cases, your Python program just breaks and stops. Sometimes it\u2019s okay\u2014if something really bad is happening. But most of the times you shouldn\u2019t stop your program and just inform the user that an error happened and she should repeat her input. For example, if instead of a number she enters letters, we should tell her that it\u2019s not what we expect and return back to the input prompt. By the way, you haven\u2019t created an input prompt so far. I think you should add something like \u2018Please, choose from this list of base products or flavors\u2019. \u201d \n\n\n\u201cThat\u2019s easy,\u201d said Erik. \u201cI can do that right now. But I will need your help with those \u2018excephtions\u2019. And also, how do we return back to the input?\u201d\n\n\n\u201cWhat do we use in Python, when we have to repeat something?\u201d asked I.\n\n\n\u201cA loop?\u201d guessed Erik.\n\n\n\u201cThat\u2019s right! But which loop? In this case, we have to repeat our input prompt until the user enters the \nright\n thing. Or, in other words, while he continues entering the \nwrong\n thing. You see where I am going?\u201d\n\n\n\u201cOf course! It should be a \nwhile\n loop!\u201d said Erik.\n\n\nI decided to help him a little bit. \u201cI suggest using a variable like \ngood_input\n and set it to False initially. Then it will be a condition of the loop: if the input is not good yet, continue. If the input is good, i.e. is an integer and in the right range, then exit from the loop. Let\u2019s put aside the exceptions part for now and work on the number ranges. You know what to check, right?\u201d\n\n\n\u201cYes, let me try it,\u201d said Erik and started coding.\n\n\nHere is what he\u2019s got:\n\n\ngood_input\n \n=\n \nFalse\n\n\nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n    \nprint\n(\n\"Choose your base product from the menu (press the number):\"\n)\n\n    \nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n        \nprint\n(\ni\n,\n \nproduct\n)\n\n    \np\n \n=\n \ninput\n()\n\n    \np_index\n \n=\n \nint\n(\np\n)\n\n    \nif\n \np_index\n \n<\n \nlen\n(\nproducts\n):\n\n        \ngood_input\n \n=\n \nTrue\n\n\n\n\n\n\u201cNow try it,\u201d said I.\n\n\nerik@idea:~$\n ./coffeeshop.py\n\nChoose your base product from the menu (press the number):\n\n\n1 chocolate\n\n\n2 coffee\n\n\n99\n\n\nChoose your base product from the menu (press the number):\n\n\n1 chocolate\n\n\n2 coffee\n\n\n2\n\n\nChoose your base product from the menu (press the number):\n\n\n1 chocolate\n\n\n2 coffee\n\n\n\n\n\n\u201cHmmm\u2026 It doesn\u2019t let me enter 2\u2026 A-ha, I see! It should be less or \nequal\n the length of the array!\u201d \n\n\nHe changed \n<\n to \n<=\n and it worked now. \n\n\n\u201cTry minus 3\u2026\u201d, I whispered, trying to sound like a voice from the left shoulder.\n\n\nHe entered \n-3\n and the program was okay with that. \u201cI know, I know,\u201d he said and added \nand p_index > 0\n to that \nif\n statement. Now it worked fine both for big numbers and negative ones.\n\n\nI suggested: \u201cIt might be a good idea to let people know what\u2019s wrong with their input. Like \u2018You number should be between this and that\u2019. You can use \nelse\n in your \nif\n statement.\u201d\n\n\n\u201cGood idea!\u201d rejoiced Erik and made his \nif\n statement look like this:\n\n\n    \nif\n \np_index\n \n<=\n \nlen\n(\nproducts\n)\n \nand\n \np_index\n \n>\n \n0\n \n:\n\n        \ngood_input\n \n=\n \nTrue\n\n    \nelse\n:\n\n        \nprint\n(\n\"You should enter a number between 1 and \"\n,\n \nlen\n(\nproducts\n))\n\n\n\n\n\n\u201cGreat!\u201d said I. \u201cNow you can copy this code to other menus. If you have several similar pieces of code, it\u2019s a good practice to make one of them work like you want it to work and then copy it to the other pieces. Even better is to use functions for that, but let\u2019s leave it for the other day.\u201d\n\n\n\u201cCan I use the same \ngood_input\n variable for other loops?\u201d he asked. \n\n\n\u201cYes, go ahead. It\u2019s a disposable variable, reuse it as you like. No need to create a new one for each loop.\u201d\n\n\nErik has copied the loop code to the other two menus. Now his program looked like this:\n\n\n#!/usr/bin/python3\n\n\n\nproducts\n \n=\n \n[\n\"chocolate\"\n,\n \n\"coffee\"\n]\n\n\nflavors\n \n=\n \n[\n\"caramel\"\n,\n\n           \n\"butterscotch\"\n,\n\n           \n\"strawberry\"\n,\n\n           \n\"raspberry\"\n,\n\n           \n\"blueberry\"\n,\n\n           \n\"sweetstrawberry\"\n,\n\n           \n\"marshmallow\"\n,\n\n           \n\"plain\"\n]\n\n\ntoppings\n \n=\n \n[\n\"chocolate\"\n,\n \n\"sweetstrawberry\"\n,\n \n\"caramel\"\n]\n\n\n\n\ngood_input\n \n=\n \nFalse\n\n\nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n    \nprint\n(\n\"Choose your base product from the menu (press the number):\"\n)\n\n    \nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n        \nprint\n(\ni\n,\n \nproduct\n)\n\n    \np\n \n=\n \ninput\n()\n\n    \np_index\n \n=\n \nint\n(\np\n)\n\n    \nif\n \np_index\n \n<=\n \nlen\n(\nproducts\n)\n \nand\n \np_index\n \n>\n \n0\n \n:\n\n        \ngood_input\n \n=\n \nTrue\n\n    \nelse\n:\n\n        \nprint\n(\n\"You should enter a number between 1 and \"\n,\n \nlen\n(\nproducts\n))\n\n\n\ngood_input\n \n=\n \nFalse\n\n\nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n    \nprint\n(\n\"Choose your flavor from the menu (press the number):\"\n)\n\n    \nfor\n \ni\n,\n \nflavor\n \nin\n \nenumerate\n(\nflavors\n,\n \nstart\n=\n1\n):\n\n        \nprint\n(\ni\n,\n \nflavor\n)\n\n    \nf\n \n=\n \ninput\n()\n\n    \nf_index\n \n=\n \nint\n(\nf\n)\n\n    \nif\n \nf_index\n \n<=\n \nlen\n(\nflavors\n)\n \nand\n \nf_index\n \n>\n \n0\n \n:\n\n        \ngood_input\n \n=\n \nTrue\n\n\n\ngood_input\n \n=\n \nFalse\n\n\nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n    \nprint\n(\n\"Choose your topping from the menu (press the number):\"\n)\n\n    \nfor\n \ni\n,\n \ntopping\n \nin\n \nenumerate\n(\ntoppings\n,\n \nstart\n=\n1\n):\n\n        \nprint\n(\ni\n,\n \ntopping\n)\n\n    \nt\n \n=\n \ninput\n()\n\n    \nt_index\n \n=\n \nint\n(\nt\n)\n\n    \nif\n \nt_index\n \n<=\n \nlen\n(\ntoppings\n)\n \nand\n \nt_index\n \n>\n \n0\n \n:\n\n        \ngood_input\n \n=\n \nTrue\n\n\n\nprint\n(\n\"Here is your order: base product: \"\n,\n \nproducts\n[\np_index\n-\n1\n],\n \n  \n\", flavor: \"\n,\n \nflavors\n[\nf_index\n-\n1\n],\n \n\", topping: \"\n,\n \ntoppings\n[\nt_index\n-\n1\n])\n\n\n\n\n\n\u201cWell, it works now. Time to talk about Exceptions. Try to run your program again and type some gibberish instead of numbers. Let\u2019s see what Python tells us about our input.\u201d\n\n\nOf course, Erik didn\u2019t want to see those nasty error messages again, but now he understood the importance of input checking. Or least it seemed so. So he ran the program and typed some letters:\n\n\nerik@idea:~$\n ./coffeeshop.py\n\n1 chocolate\n\n\n2 coffee\n\n\nghkflkjhdg\n\n\nTraceback (most recent call last):\n\n\n  File \"./coffeeshop-day3.py\", line 21, in <module>\n\n\n    p_index = int(p)\n\n\nValueError: invalid literal for int() with base 10: 'ghkflkjhdg'\n\n\n\n\n\n\u201cLook at this last message. You see: Python tells us that we have entered an invalid literal for an integer number. Which means: anything besides letters from 0 to 9. Also, it\u2019s interesting that Python tells us that they are invalid for \u2018base 10\u2019. Which means for the decimal system. If we tried to convert it as a hexadecimal number, some letters wouldn\u2019t be complete gibberish. Like for example if you would enter \nffdfdffdfd\n and tried to convert it as a hexadecimal number (i.e. with base=16), it would be absolutely fine. But I digressed.\n\n\n\u201c\nValueError\n is the word which tells us that there is an exception and we should handle it somehow. There are other errors: \nSyntaxError\n, \nZeroDivisionError\n, \nTypeError\n\u2026 You can find some examples in the Python official tutorial here: (\nhttps://docs.python.org/3/tutorial/errors.html\n). Let\u2019s take an example from the tutorial, it does exactly what we want. Look:\u201d\n\n\nwhile\n \nTrue\n:\n\n    \ntry\n:\n\n        \nx\n \n=\n \nint\n(\ninput\n(\n\"Please enter a number: \"\n))\n\n        \nbreak\n\n    \nexcept\n \nValueError\n:\n\n        \nprint\n(\n\"Oops!  That was no valid number.  Try again...\"\n)\n\n\n\n\n\n\u201cLet\u2019s do something very similar in your code. But first let\u2019s think about this: which input check should come first\u2013checking if we can convert it to an integer or checking if it\u2019s in the right range?\u201d\n\n\nErik thought for a second and said: \u201cI think checking for gibberish should come first.\u201d\n\n\n\u201cThat\u2019s right!\u201d I said. \u201cSo we ask for input and continue the loop until we see a valid string which we can convert to an integer. And only then, after we converted it, we check if it\u2019s in the right range. When changing your code, please keep track of the indents and remember about the flow.\u201d\n\n\n\u201cYes, sure,\u201d said Erik and get to the editor.\n\n\nAfter struggling with the code for a minute he asked: \u201cWhat does this \nbreak\n mean?\u201d\n\n\n\u201cIt\u2019s a way to exit the \nwhile\n loop. In this example, they decided not to use a condition in the \nwhile\n statement and they just put \nTrue\n in it. That means the loop will go forever unless we exit from it using this \nbreak\n keyword. And, as you can see, in the example they exit the loop if the input can be converted to a number. If this is not the case (somebody has entered letters), then they raise an exception and continue the loop. In our case even if we see that the input has only numbers, it\u2019s too early to exit the loop. We should go ahead and check if the number is in the range, right?\u201d\n\n\n\u201cSo what should we put instead of \nbreak\n here?\u201d\n\n\n\u201cNothing. We should just continue with the flow. If our \ntry\n was successful, we don\u2019t go into \nexcept\n and continue with the statement which goes after \nexcept\n\u2014but at the same indentation level.\u201d\n\n\n\u201cAnd if our \ntry\n wasn\u2019t successful we tell the user that he should enter a number, not stupid letters, right?\u201d\n\n\n\u201cYes, but not only that. After you told the user about his mistake, you should go back to the beginning of the loop. In Python, we use the word \ncontinue\n for that. And then we start all over again: check the condition and decide if you continue or not. In our case we haven\u2019t change the condition, \ngood_input\n is still \nFalse\n so we\u2019ll continue with the prompt asking to choose the base product.\u201d\n\n\n\u201cShould I put \ncontinue\n after my error message?\u201d\n\n\n\u201cExactly right! Try it on your first dialogue and if it works, copy to the other menus.\u201d\n\n\nHere is what Erik has got in the first dialogue:\n\n\ngood_input\n \n=\n \nFalse\n\n\nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n    \nprint\n(\n\"Choose your base product from the menu (press the number):\"\n)\n\n    \nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n        \nprint\n(\ni\n,\n \nproduct\n)\n\n    \np\n \n=\n \ninput\n()\n\n\n    \ntry\n:\n\n        \np_index\n \n=\n \nint\n(\np\n)\n\n    \nexcept\n  \nValueError\n:\n\n        \nprint\n(\n\"Error: you should enter a NUMBER!\"\n)\n\n        \ncontinue\n\n\n    \nif\n \np_index\n \n<=\n \nlen\n(\nproducts\n)\n \nand\n \np_index\n \n>\n \n0\n \n:\n\n        \ngood_input\n \n=\n \nTrue\n\n    \nelse\n:\n\n        \nprint\n(\n\"You should enter a number between 1 and \"\n,\n \nlen\n(\nproducts\n))\n\n\n\n\n\nHe ran the script and tried to enter all kinds of garbage\u2014the program always responded: \u201cYou should enter a NUMBER!\u201d. Erik was happy\u2014as if he just has defended his application from a violent hacker\u2019s attack!\n\n\n\u201cNow go ahead and copy this code in the other menus,\u201d said I.\n\n\nErik worked for a while, testing the script from time to time, muttering and cursing along the way. As the old saying goes: \u201cWhat is the most popular programming language? Profanity.\u201d As a good parent, I probably should\u2019ve told him not to use some words, but I had a different task right now. \n\n\n\u201cIt works now!\u201d he said finally. \n\n\n\u201cWhat were you cursing about?\u201d I asked.\n\n\n\u201cOh, you know, we have different variables in all three menus so I had to change all of them and keep track of all those \np_index\n, \u2018\nf_index\n, \nt_index\n\u2026 But it works now! Look at my script now,\u201d and he proudly presented the fruit of his labor.\n\n\n#!/usr/bin/python3\n\n\n\nproducts\n \n=\n \n[\n\"chocolate\"\n,\n \n\"coffee\"\n]\n\n\nflavors\n \n=\n \n[\n\"caramel\"\n,\n\n           \n\"butterscotch\"\n,\n\n           \n\"strawberry\"\n,\n\n           \n\"raspberry\"\n,\n\n           \n\"blueberry\"\n,\n\n           \n\"sweetstrawberry\"\n,\n\n           \n\"marshmallow\"\n,\n\n           \n\"plain\"\n]\n\n\ntoppings\n \n=\n \n[\n\"chocolate\"\n,\n \n\"sweetstrawberry\"\n,\n \n\"caramel\"\n]\n\n\n\n\ngood_input\n \n=\n \nFalse\n\n\nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n    \nprint\n(\n\"Choose your base product from the menu (press the number):\"\n)\n\n    \nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n        \nprint\n(\ni\n,\n \nproduct\n)\n\n    \np\n \n=\n \ninput\n()\n\n\n    \ntry\n:\n\n        \np_index\n \n=\n \nint\n(\np\n)\n\n    \nexcept\n  \nValueError\n:\n\n        \nprint\n(\n\"Error: you should enter a NUMBER!\"\n)\n\n        \ncontinue\n\n\n    \nif\n \np_index\n \n<=\n \nlen\n(\nproducts\n)\n \nand\n \np_index\n \n>\n \n0\n \n:\n\n        \ngood_input\n \n=\n \nTrue\n\n    \nelse\n:\n\n        \nprint\n(\n\"You should enter a number between 1 and \"\n,\n \nlen\n(\nproducts\n))\n\n\n\ngood_input\n \n=\n \nFalse\n\n\nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n    \nprint\n(\n\"Choose your flavor from the menu (press the number):\"\n)\n\n    \nfor\n \ni\n,\n \nflavor\n \nin\n \nenumerate\n(\nflavors\n,\n \nstart\n=\n1\n):\n\n        \nprint\n(\ni\n,\n \nflavor\n)\n\n    \nf\n \n=\n \ninput\n()\n\n\n    \ntry\n:\n\n        \nf_index\n \n=\n \nint\n(\nf\n)\n\n    \nexcept\n  \nValueError\n:\n\n        \nprint\n(\n\"Error: you should enter a NUMBER!\"\n)\n\n        \ncontinue\n\n\n    \nif\n \nf_index\n \n<=\n \nlen\n(\nflavors\n)\n \nand\n \nf_index\n \n>\n \n0\n \n:\n\n        \ngood_input\n \n=\n \nTrue\n\n    \nelse\n:\n\n        \nprint\n(\n\"You should enter a number between 1 and \"\n,\n \nlen\n(\nflavors\n))\n\n\n\n\ngood_input\n \n=\n \nFalse\n\n\nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n    \nprint\n(\n\"Choose your topping from the menu (press the number):\"\n)\n\n    \nfor\n \ni\n,\n \ntopping\n \nin\n \nenumerate\n(\ntoppings\n,\n \nstart\n=\n1\n):\n\n        \nprint\n(\ni\n,\n \ntopping\n)\n\n    \nt\n \n=\n \ninput\n()\n\n\n    \ntry\n:\n\n        \nt_index\n \n=\n \nint\n(\nt\n)\n\n    \nexcept\n  \nValueError\n:\n\n        \nprint\n(\n\"Error: you should enter a NUMBER!\"\n)\n\n        \ncontinue\n\n\n    \nif\n \nt_index\n \n<=\n \nlen\n(\ntoppings\n)\n \nand\n \nt_index\n \n>\n \n0\n \n:\n\n        \ngood_input\n \n=\n \nTrue\n\n    \nelse\n:\n\n        \nprint\n(\n\"You should enter a number between 1 and \"\n,\n \nlen\n(\ntoppings\n))\n\n\n\n\nprint\n(\n\"Here is your order: base product: \"\n,\n \nproducts\n[\np_index\n-\n1\n],\n \n  \n\", flavor: \"\n,\n \nflavors\n[\nf_index\n-\n1\n],\n \n\", topping: \"\n,\n \ntoppings\n[\nt_index\n-\n1\n])\n\n\n\n\n\n\u201cYou see\u2014it\u2019s more than 70 lines of code that I wrote!\u201d Erik was very proud indeed.\n\n\n\u201cGreat! Are you tired now?\u201d\n\n\n\u201cYes, I am! And hungry!\u201d\n\n\n\u201cWe can ask Mom to fix some lunch for us. We have definitely earned it. As for your tiredness, I think we can do something about it too. You see, you\u2019ve spent some time copying and pasting pieces of code from one menu to another. You had to change it a bit, but only a bit: one variable here, one variable there, but still it took a lot of time. There is more efficient way to do this. I am talking about functions. Every time you notice you are repeating yourself, think about functions. Think: is it possible to simplify it and avoid repetition? There is even an acronym for that: DRY, Don\u2019t Repeat Yourself.\n\n\n\u201cAnd,\u201d I continued, \u201cthe number of lines of code is not always a sign of good work. Your code should be easy to read, easy to understand. Long programs are not always best programs. By the way, short programs are not always the best either. Think about somebody who should read, understand and maintain your program. Here is a great quote from Wes Dyer, a well known programmer: \u2018Make it correct, make it clear, make it concise, make it fast. In that order.\u2019\n\n\n\u201cTomorrow let\u2019s try to make your code more readable. Let\u2019s use functions for that. Don\u2019t worry\u2014it\u2019s easy.\u201d",
            "title": "Day 3 - Errors"
        },
        {
            "location": "/Python_vacation_day03/index.html#python-vacation-day-3",
            "text": "",
            "title": "Python Vacation -- Day 3"
        },
        {
            "location": "/Python_vacation_day03/index.html#errors-and-what-to-do-about-them",
            "text": "Next day Erik was in a better mood. It seemed he forgot how I tortured his beautiful program. But we were going to talk about errors and exceptions so I had to remind him about yesterday.  \u201cRemember what we did last time?\u201d  \u201cYes, you did some stupid things with my program. I didn\u2019t know that you are so ignorant and have no idea about how to use computers. If the menu says: Choose between 1 and 2, you should press 1 or 2, and not that garbage you typed last time.\u201d  \u201cWell, a lot of developers think this way. But life has more variety than a choice between 1 and 2. I told you already that you should expect a stupid user, who doesn\u2019t read menus, a hacker who wants to break in, a kid who is just playing with the keyboard. It\u2019s all your responsibility to react to bad input and make sure your program doesn\u2019t break.\u201d  \u201cOkay, okay\u2026 You said something about \u2018exceptions\u2019 last time. What is it?\u201d  \u201cThere are a lot of situations when a Python program could break. Wrong input, division by zero, wrong list index\u2013if your list has 5 elements and you are trying to access its 10 th  element. If you don\u2019t do anything about these cases, your Python program just breaks and stops. Sometimes it\u2019s okay\u2014if something really bad is happening. But most of the times you shouldn\u2019t stop your program and just inform the user that an error happened and she should repeat her input. For example, if instead of a number she enters letters, we should tell her that it\u2019s not what we expect and return back to the input prompt. By the way, you haven\u2019t created an input prompt so far. I think you should add something like \u2018Please, choose from this list of base products or flavors\u2019. \u201d   \u201cThat\u2019s easy,\u201d said Erik. \u201cI can do that right now. But I will need your help with those \u2018excephtions\u2019. And also, how do we return back to the input?\u201d  \u201cWhat do we use in Python, when we have to repeat something?\u201d asked I.  \u201cA loop?\u201d guessed Erik.  \u201cThat\u2019s right! But which loop? In this case, we have to repeat our input prompt until the user enters the  right  thing. Or, in other words, while he continues entering the  wrong  thing. You see where I am going?\u201d  \u201cOf course! It should be a  while  loop!\u201d said Erik.  I decided to help him a little bit. \u201cI suggest using a variable like  good_input  and set it to False initially. Then it will be a condition of the loop: if the input is not good yet, continue. If the input is good, i.e. is an integer and in the right range, then exit from the loop. Let\u2019s put aside the exceptions part for now and work on the number ranges. You know what to check, right?\u201d  \u201cYes, let me try it,\u201d said Erik and started coding.  Here is what he\u2019s got:  good_input   =   False  while   good_input   ==   False : \n     print ( \"Choose your base product from the menu (press the number):\" ) \n     for   i ,   product   in   enumerate ( products ,   start = 1 ): \n         print ( i ,   product ) \n     p   =   input () \n     p_index   =   int ( p ) \n     if   p_index   <   len ( products ): \n         good_input   =   True   \u201cNow try it,\u201d said I.  erik@idea:~$  ./coffeeshop.py Choose your base product from the menu (press the number):  1 chocolate  2 coffee  99  Choose your base product from the menu (press the number):  1 chocolate  2 coffee  2  Choose your base product from the menu (press the number):  1 chocolate  2 coffee   \u201cHmmm\u2026 It doesn\u2019t let me enter 2\u2026 A-ha, I see! It should be less or  equal  the length of the array!\u201d   He changed  <  to  <=  and it worked now.   \u201cTry minus 3\u2026\u201d, I whispered, trying to sound like a voice from the left shoulder.  He entered  -3  and the program was okay with that. \u201cI know, I know,\u201d he said and added  and p_index > 0  to that  if  statement. Now it worked fine both for big numbers and negative ones.  I suggested: \u201cIt might be a good idea to let people know what\u2019s wrong with their input. Like \u2018You number should be between this and that\u2019. You can use  else  in your  if  statement.\u201d  \u201cGood idea!\u201d rejoiced Erik and made his  if  statement look like this:       if   p_index   <=   len ( products )   and   p_index   >   0   : \n         good_input   =   True \n     else : \n         print ( \"You should enter a number between 1 and \" ,   len ( products ))   \u201cGreat!\u201d said I. \u201cNow you can copy this code to other menus. If you have several similar pieces of code, it\u2019s a good practice to make one of them work like you want it to work and then copy it to the other pieces. Even better is to use functions for that, but let\u2019s leave it for the other day.\u201d  \u201cCan I use the same  good_input  variable for other loops?\u201d he asked.   \u201cYes, go ahead. It\u2019s a disposable variable, reuse it as you like. No need to create a new one for each loop.\u201d  Erik has copied the loop code to the other two menus. Now his program looked like this:  #!/usr/bin/python3  products   =   [ \"chocolate\" ,   \"coffee\" ]  flavors   =   [ \"caramel\" , \n            \"butterscotch\" , \n            \"strawberry\" , \n            \"raspberry\" , \n            \"blueberry\" , \n            \"sweetstrawberry\" , \n            \"marshmallow\" , \n            \"plain\" ]  toppings   =   [ \"chocolate\" ,   \"sweetstrawberry\" ,   \"caramel\" ]  good_input   =   False  while   good_input   ==   False : \n     print ( \"Choose your base product from the menu (press the number):\" ) \n     for   i ,   product   in   enumerate ( products ,   start = 1 ): \n         print ( i ,   product ) \n     p   =   input () \n     p_index   =   int ( p ) \n     if   p_index   <=   len ( products )   and   p_index   >   0   : \n         good_input   =   True \n     else : \n         print ( \"You should enter a number between 1 and \" ,   len ( products ))  good_input   =   False  while   good_input   ==   False : \n     print ( \"Choose your flavor from the menu (press the number):\" ) \n     for   i ,   flavor   in   enumerate ( flavors ,   start = 1 ): \n         print ( i ,   flavor ) \n     f   =   input () \n     f_index   =   int ( f ) \n     if   f_index   <=   len ( flavors )   and   f_index   >   0   : \n         good_input   =   True  good_input   =   False  while   good_input   ==   False : \n     print ( \"Choose your topping from the menu (press the number):\" ) \n     for   i ,   topping   in   enumerate ( toppings ,   start = 1 ): \n         print ( i ,   topping ) \n     t   =   input () \n     t_index   =   int ( t ) \n     if   t_index   <=   len ( toppings )   and   t_index   >   0   : \n         good_input   =   True  print ( \"Here is your order: base product: \" ,   products [ p_index - 1 ],  \n   \", flavor: \" ,   flavors [ f_index - 1 ],   \", topping: \" ,   toppings [ t_index - 1 ])   \u201cWell, it works now. Time to talk about Exceptions. Try to run your program again and type some gibberish instead of numbers. Let\u2019s see what Python tells us about our input.\u201d  Of course, Erik didn\u2019t want to see those nasty error messages again, but now he understood the importance of input checking. Or least it seemed so. So he ran the program and typed some letters:  erik@idea:~$  ./coffeeshop.py 1 chocolate  2 coffee  ghkflkjhdg  Traceback (most recent call last):    File \"./coffeeshop-day3.py\", line 21, in <module>      p_index = int(p)  ValueError: invalid literal for int() with base 10: 'ghkflkjhdg'   \u201cLook at this last message. You see: Python tells us that we have entered an invalid literal for an integer number. Which means: anything besides letters from 0 to 9. Also, it\u2019s interesting that Python tells us that they are invalid for \u2018base 10\u2019. Which means for the decimal system. If we tried to convert it as a hexadecimal number, some letters wouldn\u2019t be complete gibberish. Like for example if you would enter  ffdfdffdfd  and tried to convert it as a hexadecimal number (i.e. with base=16), it would be absolutely fine. But I digressed.  \u201c ValueError  is the word which tells us that there is an exception and we should handle it somehow. There are other errors:  SyntaxError ,  ZeroDivisionError ,  TypeError \u2026 You can find some examples in the Python official tutorial here: ( https://docs.python.org/3/tutorial/errors.html ). Let\u2019s take an example from the tutorial, it does exactly what we want. Look:\u201d  while   True : \n     try : \n         x   =   int ( input ( \"Please enter a number: \" )) \n         break \n     except   ValueError : \n         print ( \"Oops!  That was no valid number.  Try again...\" )   \u201cLet\u2019s do something very similar in your code. But first let\u2019s think about this: which input check should come first\u2013checking if we can convert it to an integer or checking if it\u2019s in the right range?\u201d  Erik thought for a second and said: \u201cI think checking for gibberish should come first.\u201d  \u201cThat\u2019s right!\u201d I said. \u201cSo we ask for input and continue the loop until we see a valid string which we can convert to an integer. And only then, after we converted it, we check if it\u2019s in the right range. When changing your code, please keep track of the indents and remember about the flow.\u201d  \u201cYes, sure,\u201d said Erik and get to the editor.  After struggling with the code for a minute he asked: \u201cWhat does this  break  mean?\u201d  \u201cIt\u2019s a way to exit the  while  loop. In this example, they decided not to use a condition in the  while  statement and they just put  True  in it. That means the loop will go forever unless we exit from it using this  break  keyword. And, as you can see, in the example they exit the loop if the input can be converted to a number. If this is not the case (somebody has entered letters), then they raise an exception and continue the loop. In our case even if we see that the input has only numbers, it\u2019s too early to exit the loop. We should go ahead and check if the number is in the range, right?\u201d  \u201cSo what should we put instead of  break  here?\u201d  \u201cNothing. We should just continue with the flow. If our  try  was successful, we don\u2019t go into  except  and continue with the statement which goes after  except \u2014but at the same indentation level.\u201d  \u201cAnd if our  try  wasn\u2019t successful we tell the user that he should enter a number, not stupid letters, right?\u201d  \u201cYes, but not only that. After you told the user about his mistake, you should go back to the beginning of the loop. In Python, we use the word  continue  for that. And then we start all over again: check the condition and decide if you continue or not. In our case we haven\u2019t change the condition,  good_input  is still  False  so we\u2019ll continue with the prompt asking to choose the base product.\u201d  \u201cShould I put  continue  after my error message?\u201d  \u201cExactly right! Try it on your first dialogue and if it works, copy to the other menus.\u201d  Here is what Erik has got in the first dialogue:  good_input   =   False  while   good_input   ==   False : \n     print ( \"Choose your base product from the menu (press the number):\" ) \n     for   i ,   product   in   enumerate ( products ,   start = 1 ): \n         print ( i ,   product ) \n     p   =   input () \n\n     try : \n         p_index   =   int ( p ) \n     except    ValueError : \n         print ( \"Error: you should enter a NUMBER!\" ) \n         continue \n\n     if   p_index   <=   len ( products )   and   p_index   >   0   : \n         good_input   =   True \n     else : \n         print ( \"You should enter a number between 1 and \" ,   len ( products ))   He ran the script and tried to enter all kinds of garbage\u2014the program always responded: \u201cYou should enter a NUMBER!\u201d. Erik was happy\u2014as if he just has defended his application from a violent hacker\u2019s attack!  \u201cNow go ahead and copy this code in the other menus,\u201d said I.  Erik worked for a while, testing the script from time to time, muttering and cursing along the way. As the old saying goes: \u201cWhat is the most popular programming language? Profanity.\u201d As a good parent, I probably should\u2019ve told him not to use some words, but I had a different task right now.   \u201cIt works now!\u201d he said finally.   \u201cWhat were you cursing about?\u201d I asked.  \u201cOh, you know, we have different variables in all three menus so I had to change all of them and keep track of all those  p_index , \u2018 f_index ,  t_index \u2026 But it works now! Look at my script now,\u201d and he proudly presented the fruit of his labor.  #!/usr/bin/python3  products   =   [ \"chocolate\" ,   \"coffee\" ]  flavors   =   [ \"caramel\" , \n            \"butterscotch\" , \n            \"strawberry\" , \n            \"raspberry\" , \n            \"blueberry\" , \n            \"sweetstrawberry\" , \n            \"marshmallow\" , \n            \"plain\" ]  toppings   =   [ \"chocolate\" ,   \"sweetstrawberry\" ,   \"caramel\" ]  good_input   =   False  while   good_input   ==   False : \n     print ( \"Choose your base product from the menu (press the number):\" ) \n     for   i ,   product   in   enumerate ( products ,   start = 1 ): \n         print ( i ,   product ) \n     p   =   input () \n\n     try : \n         p_index   =   int ( p ) \n     except    ValueError : \n         print ( \"Error: you should enter a NUMBER!\" ) \n         continue \n\n     if   p_index   <=   len ( products )   and   p_index   >   0   : \n         good_input   =   True \n     else : \n         print ( \"You should enter a number between 1 and \" ,   len ( products ))  good_input   =   False  while   good_input   ==   False : \n     print ( \"Choose your flavor from the menu (press the number):\" ) \n     for   i ,   flavor   in   enumerate ( flavors ,   start = 1 ): \n         print ( i ,   flavor ) \n     f   =   input () \n\n     try : \n         f_index   =   int ( f ) \n     except    ValueError : \n         print ( \"Error: you should enter a NUMBER!\" ) \n         continue \n\n     if   f_index   <=   len ( flavors )   and   f_index   >   0   : \n         good_input   =   True \n     else : \n         print ( \"You should enter a number between 1 and \" ,   len ( flavors ))  good_input   =   False  while   good_input   ==   False : \n     print ( \"Choose your topping from the menu (press the number):\" ) \n     for   i ,   topping   in   enumerate ( toppings ,   start = 1 ): \n         print ( i ,   topping ) \n     t   =   input () \n\n     try : \n         t_index   =   int ( t ) \n     except    ValueError : \n         print ( \"Error: you should enter a NUMBER!\" ) \n         continue \n\n     if   t_index   <=   len ( toppings )   and   t_index   >   0   : \n         good_input   =   True \n     else : \n         print ( \"You should enter a number between 1 and \" ,   len ( toppings ))  print ( \"Here is your order: base product: \" ,   products [ p_index - 1 ],  \n   \", flavor: \" ,   flavors [ f_index - 1 ],   \", topping: \" ,   toppings [ t_index - 1 ])   \u201cYou see\u2014it\u2019s more than 70 lines of code that I wrote!\u201d Erik was very proud indeed.  \u201cGreat! Are you tired now?\u201d  \u201cYes, I am! And hungry!\u201d  \u201cWe can ask Mom to fix some lunch for us. We have definitely earned it. As for your tiredness, I think we can do something about it too. You see, you\u2019ve spent some time copying and pasting pieces of code from one menu to another. You had to change it a bit, but only a bit: one variable here, one variable there, but still it took a lot of time. There is more efficient way to do this. I am talking about functions. Every time you notice you are repeating yourself, think about functions. Think: is it possible to simplify it and avoid repetition? There is even an acronym for that: DRY, Don\u2019t Repeat Yourself.  \u201cAnd,\u201d I continued, \u201cthe number of lines of code is not always a sign of good work. Your code should be easy to read, easy to understand. Long programs are not always best programs. By the way, short programs are not always the best either. Think about somebody who should read, understand and maintain your program. Here is a great quote from Wes Dyer, a well known programmer: \u2018Make it correct, make it clear, make it concise, make it fast. In that order.\u2019  \u201cTomorrow let\u2019s try to make your code more readable. Let\u2019s use functions for that. Don\u2019t worry\u2014it\u2019s easy.\u201d",
            "title": "Errors and what to do about them"
        },
        {
            "location": "/Python_vacation_day04/index.html",
            "text": "Python Vacation \u2013 Day 4\n\n\n\u201cRemember where we stopped last time?\u201d I asked Erik.\n\n\n\u201cYes, you said that we are going to work with functions and that will make my program shorter.\u201d\n\n\n\u201d\u2026And easier to read and understand!\u201d added I. \u201cWhat do you remember about Python functions from your online class?\u201d\n\n\n\u201cThey start with \ndef\n. You have to indent lines inside the function. You can call functions from your main program.\u201d\n\n\n\u201cGood! Also very important that you can pass \nparameters\n into functions so you can call them many times and they will do slightly different things depending on the parameters. Like saying \u2018Hello\u2019 and then a person\u2019s name.\u201d\n\n\n\u201cYes, I remember, we did this in our online course!\u201d exclaimed Erik. It was good to see that those couple weeks were not lost completely.\n\n\n\u201cYou said in your program you had to copy and paste some pieces of code several times. What did that code do?\u201d\n\n\n\u201cDon\u2019t you remember?\u201d Erik tried to be patient. \u201cI have three menus in my coffee shop program: one for base product, one for flavor, and one for topping. And in all three menus, I have to do that garbage checking, number checking and all that.\u201d\n\n\n\u201cOkay,\u201d I said. \u201cWhy don\u2019t we create a function that will do all these boring things and call it three times?\u201d\n\n\n\u201cYes, that would be good. And also if I want to change or add something, I\u2019ll do it in one place, instead of copying it three times. But I have different flavors and toppings\u2014how will this function know which menu I want to use?\u201d\n\n\n\u201cYou said you had to change something while copying pieces of code into the menus. What was that?\u201d\n\n\n\u201cOh, all different variables. The variable for the \ninput()\n function, the index variable. And also the list name\u2014to print out the menu and to calculate its length.\u201d\n\n\n\u201cGood. So, as far as I can see, the only thing which needs to change is the list of options. It\u2019s either base product, flavor, or topping. Input variable and list index can be the reused inside the function. We\u2019ll just return the index as a result.\u201d\n\n\n\u201cWhat do you mean\u2014\u2018return\u2019?\u201d asked Erik.\n\n\n\u201cWell, imagine I asked you: \u2018Erik, please go to your room and count how many model planes you have.\u2019 You would go and count them and return to me with a number, right? Functions do the same thing: they perform some action and come back with the result. And usually I don\u2019t care how they do what I asked them to do, I\u2019m interested in the result. Like when I asked you to count your planes, I don\u2019t care if you use your fingers, or a piece of paper, or any more sophisticated method. In our case we have to write a function which will take a list of options, print it out as a menu and let the user chose from the menu. When the user makes their choice\u2014a number from the menu\u2014the function will remember it and bring it to us. There is a special word for that in Python: \nreturn\n. We are not going to return the name of a flavor, we\u2019ll just return its index in the list.\u201d\n\n\n\u201cYes, I remember that \nreturn\n from the class!\u201d said Erik.\n\n\n\u201cGood. Now we have to make a very difficult decision: how to name our function. Don\u2019t laugh, it is really very serious. When you write programs just a little longer than this one, it\u2019s pretty easy to get lost in different variable and function names. So, please, always think about naming. Don\u2019t call your functions \nf()\n or \nd4()\n \u2014 you will never remember what this means. Choose some meaningful names that show what this function does. The same applies to variables. Only if it\u2019s just a simple obscure index in a loop, then it\u2019s okay to call it \ni\n or \nk\n. In other cases, please use something readable. Also, in Python, we use underscore to combine words for variable and function names. Like  \nbase_product\n or \ngood_input\n.\u201d\n\n\n\u201cI saw names without underscores, but with lower and upper case letters,\u201d said Erik.\n\n\n\u201cYes, it\u2019s called CamelCase. You see, it looks like camel humps? In Python, we usually use them to define classes. We\u2019ll talk about classes later.\u201d\n\n\n\u201cOkay, I\u2019m ready. Let\u2019s call our function \nmenu\n. I know that I have to use \ndef\n to start writing it. And also I have to put something inside the parenthesis. Should it be the list of options?\u201d\n\n\n\u201cExactly!\u201d said I. I was proud of my boy. You know, teenagers are always like that: sometimes they surprise you with their brilliant minds, but sometimes they struggle with simple arithmetics. \u201cCall it \noptions\n, for example. You do remember that you should put the colon after parenthesis and indent the function body, don\u2019t you? You can copy most of the function body from what you have written already. Don\u2019t forget to return the index and don\u2019t forget that when we show \n1\n to the user, we have \n0\n in mind. So add some necessary arithmetics to the function. Enough instructions, go ahead and write it!\u201d\n\n\nErik started writing and copying and in a couple minutes his function looked like this:\n\n\ndef\n \nmenu\n(\noptions\n):\n\n    \ngood_input\n \n=\n \nFalse\n\n    \nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n        \nprint\n(\n\"Choose your base product from the menu (press the number):\"\n)\n\n        \nfor\n \ni\n,\n \noption\n \nin\n \nenumerate\n(\noptions\n,\n \nstart\n=\n1\n):\n\n            \nprint\n(\ni\n,\n \noption\n)\n\n        \np\n \n=\n \ninput\n()\n\n\n        \ntry\n:\n\n            \np_index\n \n=\n \nint\n(\np\n)\n\n        \nexcept\n  \nValueError\n:\n\n            \nprint\n(\n\"Error: you should enter a NUMBER!\"\n)\n\n            \ncontinue\n\n\n        \nif\n \np_index\n \n<=\n \nlen\n(\noptions\n)\n \nand\n \np_index\n \n>\n \n0\n \n:\n\n            \ngood_input\n \n=\n \nTrue\n\n        \nelse\n:\n\n            \nprint\n(\n\"You should enter a number between 1 and \"\n,\n \nlen\n(\noptions\n))\n\n\n    \nreturn\n \np_index\n-\n1\n\n\n\n\n\n\u201cWhat should I do with this prompt? It asks about the base product, but I want to use this function for flavors and toppings too,\u201d asked Erik.\n\n\nI said, \u201cGood question. If you want to reuse your function, you should move everything that is specific to some particular case, outside of the function. I suggest we ask this question \nbefore\n calling the function, in the main program. You will ask about the base product and call the function with the list of base products, you ask about flavors and pass the list of flavors as a parameter.\u201d\n\n\n\u201cOkay,\u201d said Erik. \u201cI\u2019ll remove it. Now I have to rewrite the main program and use functions in it, right?\u201d\n\n\n\u201cGo ahead!\u201d\n\n\nHe started working. After a while, he asked, \u201cI use \np_index\n both in the function and in the main program. Should I rename it?\u201d\n\n\n\u201cFrom Python perspective, that\u2019s OK. It sees those variables differently. \np_index\n in the main program and \np_index\n inside a function are different variables. But from a readability perspective, I\u2019d suggest to rename it inside the function. It\u2019s better to avoid using same variable names inside functions and in the main program. Unless, of course, they are as simple as \na\n, \ni\n, \nx\n, which are usually temporary variables. So, rename it inside the function to something short but meaningful.\u201d\n\n\n\u201cIt will be \np_int\n,\u201d said Erik. Then he thought for a while and said, \u201cBut it starts with \np\n because I copied it from the products menu. In the function, it doesn\u2019t make sense anymore. I\u2019ll rename \np\n to \nchoice\n and \np_index\n to \nchoice_int\n because we convert it to an integer.\u201d\n\n\n\u201cGreat idea!\u201d I said.\n\n\nHe worked a bit more and discovered, \u201cNow I don\u2019t have to subtract 1 from the indexes in my final \nprint\n because I have already done it in the function!\u201d\n\n\nHe finally came up with this:\n\n\n#!/usr/bin/python3\n\n\n\nproducts\n \n=\n \n[\n\"chocolate\"\n,\n \n\"coffee\"\n]\n\n\nflavors\n \n=\n \n[\n\"caramel\"\n,\n\n           \n\"butterscotch\"\n,\n\n           \n\"strawberry\"\n,\n\n           \n\"raspberry\"\n,\n\n           \n\"blueberry\"\n,\n\n           \n\"sweetstrawberry\"\n,\n\n           \n\"marshmallow\"\n,\n\n           \n\"plain\"\n]\n\n\ntoppings\n \n=\n \n[\n\"chocolate\"\n,\n \n\"sweetstrawberry\"\n,\n \n\"caramel\"\n]\n\n\n\n\ndef\n \nmenu\n(\noptions\n):\n\n    \ngood_input\n \n=\n \nFalse\n\n    \nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n        \nfor\n \ni\n,\n \noption\n \nin\n \nenumerate\n(\noptions\n,\n \nstart\n=\n1\n):\n\n            \nprint\n(\ni\n,\n \noption\n)\n\n        \nchoice\n \n=\n \ninput\n()\n\n\n        \ntry\n:\n\n            \nchoice_int\n \n=\n \nint\n(\nchoice\n)\n\n        \nexcept\n  \nValueError\n:\n\n            \nprint\n(\n\"Error: you should enter a NUMBER!\"\n)\n\n            \ncontinue\n\n\n        \nif\n \nchoice_int\n \n<=\n \nlen\n(\noptions\n)\n \nand\n \nchoice_int\n \n>\n \n0\n \n:\n\n            \ngood_input\n \n=\n \nTrue\n\n        \nelse\n:\n\n            \nprint\n(\n\"You should enter a number between 1 and \"\n,\n \nlen\n(\noptions\n))\n\n\n    \nreturn\n \nchoice_int\n-\n1\n\n\n\n\nprint\n(\n\"Choose your base product from the menu (press the number):\"\n)\n\n\np_index\n \n=\n \nmenu\n(\nproducts\n)\n\n\n\nprint\n(\n\"Choose your flavor from the menu (press the number):\"\n)\n\n\nf_index\n \n=\n \nmenu\n(\nflavors\n)\n\n\n\nprint\n(\n\"Choose your topping from the menu (press the number):\"\n)\n\n\nt_index\n \n=\n \nmenu\n(\ntoppings\n)\n\n\n\nprint\n(\n\"Here is your order: base product: \"\n,\n \nproducts\n[\np_index\n],\n \n  \n\", flavor: \"\n,\n \nflavors\n[\nf_index\n],\n \n\", topping: \"\n,\n \ntoppings\n[\nt_index\n])\n\n\n\n\n\nHe tested it and it worked perfectly! He even tried to enter \u201cwrong\u201d choices and always received error messages until his choice was \u201cright\u201d.\n\n\n\u201cCongratulations!\u201d I said. \u201cWe\u2019ve covered a lot of stuff during these days and you are moving very quickly. This is great!\u201d\n\n\nErik was happy. He was so happy that he even suggested: \u201cI want to add something to the program. Like we did in that online course, I want to ask the customer for his name and then print it out together with his order!\u201d\n\n\n\u201cGood idea!\u201d I said. After a while, his program printed out: \nHello, Erik! Here is your order ...\n\n\n\u201cMuch better now,\u201d I said. \u201cNow, let\u2019s plan our next steps.\u201d\n\n\n\u201cWhat next steps? I thought we are done with this menu. I like it!\u201d\n\n\n\u201cYes, but as far as I remember, you have prepared 6 cups of beverage for your friends last time. Which means you have to collect and \nsave\n all their orders somehow, instead of just printing them out.\u201d\n\n\n\u201cRight\u2026 Yes, I understand now. I have to collect orders first and then print them out to know what I have to prepare.\u201d\n\n\n\u201cAnd to whom to deliver it,\u201d added I. \u201cTomorrow let\u2019s try to use files: open, write, read. This is for tomorrow. Eventually we\u2019ll do it with a database. And then with web interface online. For now, go play outside with your friends.\u201d",
            "title": "Day 4 - Functions"
        },
        {
            "location": "/Python_vacation_day04/index.html#python-vacation-day-4",
            "text": "\u201cRemember where we stopped last time?\u201d I asked Erik.  \u201cYes, you said that we are going to work with functions and that will make my program shorter.\u201d  \u201d\u2026And easier to read and understand!\u201d added I. \u201cWhat do you remember about Python functions from your online class?\u201d  \u201cThey start with  def . You have to indent lines inside the function. You can call functions from your main program.\u201d  \u201cGood! Also very important that you can pass  parameters  into functions so you can call them many times and they will do slightly different things depending on the parameters. Like saying \u2018Hello\u2019 and then a person\u2019s name.\u201d  \u201cYes, I remember, we did this in our online course!\u201d exclaimed Erik. It was good to see that those couple weeks were not lost completely.  \u201cYou said in your program you had to copy and paste some pieces of code several times. What did that code do?\u201d  \u201cDon\u2019t you remember?\u201d Erik tried to be patient. \u201cI have three menus in my coffee shop program: one for base product, one for flavor, and one for topping. And in all three menus, I have to do that garbage checking, number checking and all that.\u201d  \u201cOkay,\u201d I said. \u201cWhy don\u2019t we create a function that will do all these boring things and call it three times?\u201d  \u201cYes, that would be good. And also if I want to change or add something, I\u2019ll do it in one place, instead of copying it three times. But I have different flavors and toppings\u2014how will this function know which menu I want to use?\u201d  \u201cYou said you had to change something while copying pieces of code into the menus. What was that?\u201d  \u201cOh, all different variables. The variable for the  input()  function, the index variable. And also the list name\u2014to print out the menu and to calculate its length.\u201d  \u201cGood. So, as far as I can see, the only thing which needs to change is the list of options. It\u2019s either base product, flavor, or topping. Input variable and list index can be the reused inside the function. We\u2019ll just return the index as a result.\u201d  \u201cWhat do you mean\u2014\u2018return\u2019?\u201d asked Erik.  \u201cWell, imagine I asked you: \u2018Erik, please go to your room and count how many model planes you have.\u2019 You would go and count them and return to me with a number, right? Functions do the same thing: they perform some action and come back with the result. And usually I don\u2019t care how they do what I asked them to do, I\u2019m interested in the result. Like when I asked you to count your planes, I don\u2019t care if you use your fingers, or a piece of paper, or any more sophisticated method. In our case we have to write a function which will take a list of options, print it out as a menu and let the user chose from the menu. When the user makes their choice\u2014a number from the menu\u2014the function will remember it and bring it to us. There is a special word for that in Python:  return . We are not going to return the name of a flavor, we\u2019ll just return its index in the list.\u201d  \u201cYes, I remember that  return  from the class!\u201d said Erik.  \u201cGood. Now we have to make a very difficult decision: how to name our function. Don\u2019t laugh, it is really very serious. When you write programs just a little longer than this one, it\u2019s pretty easy to get lost in different variable and function names. So, please, always think about naming. Don\u2019t call your functions  f()  or  d4()  \u2014 you will never remember what this means. Choose some meaningful names that show what this function does. The same applies to variables. Only if it\u2019s just a simple obscure index in a loop, then it\u2019s okay to call it  i  or  k . In other cases, please use something readable. Also, in Python, we use underscore to combine words for variable and function names. Like   base_product  or  good_input .\u201d  \u201cI saw names without underscores, but with lower and upper case letters,\u201d said Erik.  \u201cYes, it\u2019s called CamelCase. You see, it looks like camel humps? In Python, we usually use them to define classes. We\u2019ll talk about classes later.\u201d  \u201cOkay, I\u2019m ready. Let\u2019s call our function  menu . I know that I have to use  def  to start writing it. And also I have to put something inside the parenthesis. Should it be the list of options?\u201d  \u201cExactly!\u201d said I. I was proud of my boy. You know, teenagers are always like that: sometimes they surprise you with their brilliant minds, but sometimes they struggle with simple arithmetics. \u201cCall it  options , for example. You do remember that you should put the colon after parenthesis and indent the function body, don\u2019t you? You can copy most of the function body from what you have written already. Don\u2019t forget to return the index and don\u2019t forget that when we show  1  to the user, we have  0  in mind. So add some necessary arithmetics to the function. Enough instructions, go ahead and write it!\u201d  Erik started writing and copying and in a couple minutes his function looked like this:  def   menu ( options ): \n     good_input   =   False \n     while   good_input   ==   False : \n         print ( \"Choose your base product from the menu (press the number):\" ) \n         for   i ,   option   in   enumerate ( options ,   start = 1 ): \n             print ( i ,   option ) \n         p   =   input () \n\n         try : \n             p_index   =   int ( p ) \n         except    ValueError : \n             print ( \"Error: you should enter a NUMBER!\" ) \n             continue \n\n         if   p_index   <=   len ( options )   and   p_index   >   0   : \n             good_input   =   True \n         else : \n             print ( \"You should enter a number between 1 and \" ,   len ( options )) \n\n     return   p_index - 1   \u201cWhat should I do with this prompt? It asks about the base product, but I want to use this function for flavors and toppings too,\u201d asked Erik.  I said, \u201cGood question. If you want to reuse your function, you should move everything that is specific to some particular case, outside of the function. I suggest we ask this question  before  calling the function, in the main program. You will ask about the base product and call the function with the list of base products, you ask about flavors and pass the list of flavors as a parameter.\u201d  \u201cOkay,\u201d said Erik. \u201cI\u2019ll remove it. Now I have to rewrite the main program and use functions in it, right?\u201d  \u201cGo ahead!\u201d  He started working. After a while, he asked, \u201cI use  p_index  both in the function and in the main program. Should I rename it?\u201d  \u201cFrom Python perspective, that\u2019s OK. It sees those variables differently.  p_index  in the main program and  p_index  inside a function are different variables. But from a readability perspective, I\u2019d suggest to rename it inside the function. It\u2019s better to avoid using same variable names inside functions and in the main program. Unless, of course, they are as simple as  a ,  i ,  x , which are usually temporary variables. So, rename it inside the function to something short but meaningful.\u201d  \u201cIt will be  p_int ,\u201d said Erik. Then he thought for a while and said, \u201cBut it starts with  p  because I copied it from the products menu. In the function, it doesn\u2019t make sense anymore. I\u2019ll rename  p  to  choice  and  p_index  to  choice_int  because we convert it to an integer.\u201d  \u201cGreat idea!\u201d I said.  He worked a bit more and discovered, \u201cNow I don\u2019t have to subtract 1 from the indexes in my final  print  because I have already done it in the function!\u201d  He finally came up with this:  #!/usr/bin/python3  products   =   [ \"chocolate\" ,   \"coffee\" ]  flavors   =   [ \"caramel\" , \n            \"butterscotch\" , \n            \"strawberry\" , \n            \"raspberry\" , \n            \"blueberry\" , \n            \"sweetstrawberry\" , \n            \"marshmallow\" , \n            \"plain\" ]  toppings   =   [ \"chocolate\" ,   \"sweetstrawberry\" ,   \"caramel\" ]  def   menu ( options ): \n     good_input   =   False \n     while   good_input   ==   False : \n         for   i ,   option   in   enumerate ( options ,   start = 1 ): \n             print ( i ,   option ) \n         choice   =   input () \n\n         try : \n             choice_int   =   int ( choice ) \n         except    ValueError : \n             print ( \"Error: you should enter a NUMBER!\" ) \n             continue \n\n         if   choice_int   <=   len ( options )   and   choice_int   >   0   : \n             good_input   =   True \n         else : \n             print ( \"You should enter a number between 1 and \" ,   len ( options )) \n\n     return   choice_int - 1  print ( \"Choose your base product from the menu (press the number):\" )  p_index   =   menu ( products )  print ( \"Choose your flavor from the menu (press the number):\" )  f_index   =   menu ( flavors )  print ( \"Choose your topping from the menu (press the number):\" )  t_index   =   menu ( toppings )  print ( \"Here is your order: base product: \" ,   products [ p_index ],  \n   \", flavor: \" ,   flavors [ f_index ],   \", topping: \" ,   toppings [ t_index ])   He tested it and it worked perfectly! He even tried to enter \u201cwrong\u201d choices and always received error messages until his choice was \u201cright\u201d.  \u201cCongratulations!\u201d I said. \u201cWe\u2019ve covered a lot of stuff during these days and you are moving very quickly. This is great!\u201d  Erik was happy. He was so happy that he even suggested: \u201cI want to add something to the program. Like we did in that online course, I want to ask the customer for his name and then print it out together with his order!\u201d  \u201cGood idea!\u201d I said. After a while, his program printed out:  Hello, Erik! Here is your order ...  \u201cMuch better now,\u201d I said. \u201cNow, let\u2019s plan our next steps.\u201d  \u201cWhat next steps? I thought we are done with this menu. I like it!\u201d  \u201cYes, but as far as I remember, you have prepared 6 cups of beverage for your friends last time. Which means you have to collect and  save  all their orders somehow, instead of just printing them out.\u201d  \u201cRight\u2026 Yes, I understand now. I have to collect orders first and then print them out to know what I have to prepare.\u201d  \u201cAnd to whom to deliver it,\u201d added I. \u201cTomorrow let\u2019s try to use files: open, write, read. This is for tomorrow. Eventually we\u2019ll do it with a database. And then with web interface online. For now, go play outside with your friends.\u201d",
            "title": "Python Vacation -- Day 4"
        },
        {
            "location": "/Python_vacation_day05/index.html",
            "text": "Python Vacation \u2013 Day 5\n\n\nWorking with files\n\n\nNext day Erik was ready for new Python adventures. He looked more serious\u2014his application was going to become really business critical for him. Customers, orders, delivery, database, online shop\u2014all that sounded very serious now. \n\n\n\u201cSo, you said we are going to work with files today?\u201d. He was eager to start.\n\n\n\u201cYes, we have to store your orders somewhere, right? What do we do with files in Python? Do you remember from your course?\u201d\n\n\n\u201cWe can open them, we can read and write. We have to close them when we don\u2019t need them anymore.\u201d\n\n\n\u201cThat\u2019s right. And also we can open files in different \nmodes\n. We can tell Python and the operating system that we want only read from the file and it will guarantee that we don\u2019t write to it accidentaly. Might be very helpful. Well, we start working with files. Let\u2019s make a plan. What do we need this file for?\u201d\n\n\n\u201cWe want to save our orders and then list them.\u201d\n\n\n\u201cOkay, in Python words it means we want to write and read to and from the file. When do we want to write and when do we want to read?\u201d\n\n\n\u201cWe will write to the file right after taking the order. And we read\u2026 wait, we don\u2019t have it here yet. We need another function to list the orders!\u201d\n\n\n\u201cThat\u2019s right!\u201d I liked the way Erik started to think: in functions. We are on the right track! \u201cYes, we\u2019ll need that function. And also, I think, we\u2019ll need a menu in the beginning of the script. Something like: if you want to enter a new order, press \u2018N\u2019, if you want to list orders, press \u2018L\u2019. But first let\u2019s write something to a file.\u201d\n\n\nErik looked at his script and said, \u201cI think it should be here. Here, after we print \u2018Here is your order\u2019, we have to write it to the file, right?\u201d\n\n\n\u201cYes,\u201d I said, \u201cgood idea. But first we have to open the file. In our case we open it for writing. Or, rather, appending.\u201d\n\n\n\u201cWhat\u2019s the difference?\u201d\n\n\n\u201cLet me explain. When we work with files we read and write them byte by byte. We read one byte and move to the next one. So we always are located in some \nposition\n in the file. Like 8\nth\n byte, or 247\nth\n byte, or 0\nth\n byte.\u201d\n\n\n\u201cIt\u2019s at the beginning of the file, right?\u201d\n\n\n\u201cYes, exactly. And when we are at the beginning of the file and we start writing, we replace everything that is already there. Sometimes it\u2019s what we want, but sometimes it\u2019s not. In our case we\u2019d like to add our orders to those that are already recorded, not erase and replace them. When we open a file for \nwriting\n, we are in the 0\nth\n position, but when we open it for \nappending\n, we are at the position right after the last byte of the file. And everything we write will be added to the end of the file.\u201d\n\n\nI decided that it\u2019s time to use a new tool to illustrate this point.\n\n\n\u201cLet me show another way to work with Python, it\u2019s called IPython. It\u2019s similar to the standard Python console, but more convenient. Open a terminal window and type \nipython\n.\u201d\n\n\nHe did it.\n\n\nerik@idea:~$\n ipython\n\nPython 3.6.1 |Anaconda custom (64-bit)| (default, May 11 2017, 13:09:58) \n\n\nType \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nIPython 5.3.0 -- An enhanced Interactive Python.\n\n\n?         -> Introduction and overview of IPython's features.\n\n\n%\nquickref -> Quick reference.\n\nhelp      -> Python's own help system.\n\n\nobject?   -> Details about 'object', use 'object??' for extra details.\n\n\n\nIn [1]:\n\n\n\n\n\n\u201cLooks good with colors, I like it!\u201d\n\n\n\u201cWe will play with files in this IPython environment. Instead of writing scripts, saving and running them, this tool is so much easier for simple tasks. Another good thing is that it has a lot of small helpful things, like command completion and others. We can even run Linux commands without leaving the session\u2014and we will need it.\u201d\n\n\nI continued, \u201cWe start with opening a file. Write \nf = open(\"a.txt\", \"w+\")\n. As you can easily guess, \u201c\na.txt\n\u201d is a file name, \u201c\nw\n\u201d means we open it for writing, and that \u201cplus\u201d sign means: if the file doesn\u2019t exist, create it. Exactly what we need.\u201d\n\n\n\u201cWhat is \u201c\nf\n?\u201d asked Erik after he typed the string in the IPython session.\n\n\n\u201cIt\u2019s a file \nobject\n. You did have something about objects and classes in your course, didn\u2019t you?\u201d\n\n\n\u201cYes, objects can have \nmethods\n and they are like functions. We call them by adding a dot and a function name to the object.\u201d\n\n\n\u201cGreat!\u201d I was glad Erik was getting up to speed and recalled more and more from his previous course. \u201cSo, \u201c\nf\n\u201d is a file object and we will use its methods, like \nread()\n and \nwrite()\n. Let\u2019s write something to the file. Type \nf.write('1,2,3')\n.\u201d\n\n\nHe typed:\n\n\nIn [2]: f.write(\"1,2,3\")\nOut[2]: 5\n\n\n\n\n\u201cWhat do you think is \n5\n here?\u201d asked I.\n\n\n\u201cI have no idea\u2026\u201d\n\n\n\u201cRemember, most functions return something. In this case this \nwrite()\n function returns the number of bytes written in the file. Three digits and two commas. Now let\u2019s check the file, if the function worked correctly. We\u2019ll use a simple Linux command \ncat\n, but inside IPython it should start with a percent sign. Type \n%cat a.txt\n.\u201d\n\n\nIn [3]: %cat a.txt\n\n\n\n\n\u201cNothing,\u201d said Erik.\n\n\n\u201cBecause we haven\u2019t closed the file. Usually operating system keeps data in a buffer in main memory before writing it to the file. It physically writes the data to the file when we close it (well, there are other situations and methods, but we\u2019ll talk about them later). Now close the file and print it out again with \ncat\n.\u201d\n\n\nIn [4]: f.close()\n\nIn [5]: %cat a.txt\n1,2,3\n\n\n\n\n\u201cYou see, now it\u2019s there,\u201d said I. \u201cLet\u2019s open it and write something else. You can use \u2018Up\u2019 and \u2018Down\u2019 arrows to access history, like in Linux shell.\u201d\n\n\nErik repeated several previous commands:\n\n\nIn [6]: f = open(\"a.txt\", \"w+\")\n\nIn [7]: f.write(\"5,6,7\")\nOut[7]: 5\n\nIn [8]: f.close()\n\nIn [9]: %cat a.txt\n5,6,7\n\n\n\n\n\u201cYou see now\u2014this is what I meant. When you open a file for writing, you start from the beginning and replace everything that was there before. Now open it again, but with the \u201c\na\n\u201d mode and try to write something again. Then close and look at the result.\u201d\n\n\nNow Erik didn\u2019t need any specific instructions. He went back in history, changed the file\u2019s mode and wrote a bunch of numbers to the file again.\n\n\nIn [10]: f = open(\"a.txt\", \"a+\")\n\nIn [11]: f.write(\"7,8,9\")\nOut[11]: 5\n\nIn [12]: f.close()\n\nIn [13]: %cat a.txt\n5,6,77,8,9\nIn [14]: \n\n\n\n\n\u201cWhy didn\u2019t it write it from a new line?\u201d he asked.\n\n\n\u201cBecause you didn\u2019t tell it to. You didn\u2019t tell Python to write a new line character for you, so it just pasted the numbers next to the existing ones.\u201d\n\n\n\u201cHow would I put a new line in the file?\u201d\n\n\n\u201cPlace this in the beginning of your string: \u201c\n\\n\n\u201d and it will do the trick. It looks like two characters, but in reality it\u2019s one and it\u2019s a new line character. Go ahead.\u201d\n\n\nIn [14]: f = open(\"a.txt\", \"a+\")\n\nIn [15]: f.write(\"\\n9,10,11\")\nOut[15]: 8\n\nIn [16]: f.close()\n\nIn [17]: %cat a.txt\n5,6,77,8,9\n9,10,11\nIn [18]: \n\n\n\n\n\u201cYes, now I see a new line,\u201d said Erik.\n\n\n\u201cWe will need it to work with your orders. Traditionally we place each record\u2014in your case each order\u2014in a separate line. Then we\u2019ll read that file line by line and print out your orders one by one.\u201d\n\n\n\u201cOkay, this is good. But what should I put into the orders? Name, then base product, then flavor and topping?\u201d\n\n\n\u201cThat\u2019s right! This is exactly what you need to prepare the beverage. Just make sure you separate them with commas, like you just did in the IPython session. There is a well-known format called \u2018Comma Separated Values\u2019, or \u2018CSV\u2019 and we will follow its rules. You can use one of the string methods called \njoin()\n. Let me show you. Imagine you have several strings and you want to make a single string where they were separated by comma.\u201d I took his keyboard and wrote in the IPython session:\n\n\nIn [19]: a = \"first\"\n\nIn [20]: b = \"second\"\n\nIn [21]: c = \"third\"\n\nIn [22]: \",\".join((a,b,c))\nOut[22]: 'first,second,third'\n\n\n\n\n\u201cYou see,\u201d I said, \u201cthe object here is the symbol which goes between the elements, and the argument of the method is the collection of the strings we want to join together.\u201d\n\n\n\u201cWhy did you put two sets of parenthesis?\u201d\n\n\n\u201cBecause we have to pass a \nsingle\n argument to the \njoin()\n method. So we have to combine the strings together into a single object. In this case I created a \ntuple\n (I\u2019m sure they mentioned it in your course) and one set of parenthesis for that. You can create a list and result will be the same. Try to replace the internal set of parenthesis with square brackets.\u201d \n\n\nErik typed:\n\n\nIn [23]: \",\".join([a,b,c])\nOut[23]: 'first,second,third'\n\n\n\n\nAnd get the expected result. I continued, \u201cYou see, the result of this function is a string which we can use in the \nwrite()\n function. Now you have everything you need to write your orders to the file. Oh, don\u2019t forget to add \u201c\n\\n\n\u201d to the end of the string. Just use the plus sign in the \nwrite()\n argument.\u201d\n\n\nErik opened his editor and started writing the code. I noticed that he opened the file with \u201c\na+\n\u201d mode and named the file \u201c\norders.txt\n\u201d. He passed the joined string to \nwrite()\n and he didn\u2019t forget to close the file. It took him a couple of attempts to find the right place for that \u201c\n\\n\n\u201d inside the parenthesis, but he did it right. Here is his code:\n\n\n.\n \n.\n \n.\n \n(\nskipped\n)\n \n.\n \n.\n \n.\n\n\n\nprint\n(\n\"Hello \"\n,\n \nname\n,\n \n\"! Here is your order: base product: \"\n,\n \nproducts\n[\np_index\n],\n \n  \n\", flavor: \"\n,\n \nflavors\n[\nf_index\n],\n \n\", topping: \"\n,\n \ntoppings\n[\nt_index\n])\n\n\n\nf\n \n=\n \nopen\n(\n\"orders.txt\"\n,\n \n\"a+\"\n)\n\n\nf\n.\nwrite\n(\n\",\"\n.\njoin\n((\nname\n,\n \nproducts\n[\np_index\n],\n \nflavors\n[\nf_index\n],\n \ntoppings\n[\nt_index\n]))\n+\n\"\n\\n\n\"\n)\n\n\nf\n.\nclose\n()\n\n\n\n\n\nIn the console he ran the script, entered his choices and then typed:\n\n\nerik@idea:~$ cat orders.txt \nErik,chocolate,butterscotch,caramel\n\n\n\n\nIt worked prefectly. I asked if I can try it too. Erik said, \u201cYes\u2026 But, PLEASE!\u2026\u201d meaning, of course, \u201cDon\u2019t ruin my program again!\u201d\n\n\nI entered my choices and output the file again.\n\n\nerik@idea:~$ cat orders.txt \nErik,chocolate,butterscotch,caramel\nPavel,coffee,plain,chocolate\n\n\n\n\nIt worked indeed! It added orders to the file\u2014great! But that was only a half of our task for today. \n\n\n\u201cYou did a great job,\u201d I said. \u201cNow we have to learn how to read from that file. How should we start?\u201d\n\n\n\u201cWith opening the file?\u201d Erik suggested.\n\n\n\u201cOf course. Remember, we talked about different \nmodes\n when opening a file? This time we should open it for reading. Let\u2019s start with IPython again and try a couple things before writing the script. I think now you can easily guess how to open the file for reading.\u201d\n\n\nErik looked over his history and typed:\n\n\nIn [24]: f = open(\"orders.txt\", \"r\")\n\n\n\n\n\u201cGood,\u201d I said. \u201cNow we have this \nobject\n \nf\n again. And this object has some methods. We just used its \nwrite()\n method to write our data to the file. Which method should we use to read the data?\u201d\n\n\n\u201cThe \nread()\n method?\u201d Erik guessed. The answer was too obvoius and Erik expected there was a catch.\n\n\n\u201cOf course! It\u2019s obvious! Try it.\u201d\n\n\nErik typed:\n\n\nIn [25]: f.read()\nOut[25]: 'Erik,chocolate,butterscotch,caramel\\nPavel,coffee,plain,chocolate\\n'\n\n\n\n\nI said: \u201cYou see, it was easy. Python read the whole file and printed it out as a string. Now we have to decide what to do with this data.\u201d\n\n\n\u201cWhat do you mean? I thought we were going to print out all orders and here they are.\u201d\n\n\n\u201cYes, but they don\u2019t look pretty. I suggest we split them into separate orders first and then figure out what is the base product, what is the flavor, etc. This way we will be able to print it in a nice way. Like: \u2018Dear Erik! Here is your order\u2026\u2019 and then all components line by line.\u201d\n\n\n\u201cLike in a receipt!\u201d Erik was glad it\u2019s going to look like \u2018real life\u2019 thing. \u201cI like it, let\u2019s make a receipt!\u201d\n\n\n\u201cLet\u2019s make it!\u201d I agreed. \u201cBut first we have to rewind the file.\u201d\n\n\n\u201cWhat do you mean\u2013\nrewind\n?\u201d asked Erik. \n\n\n\u201cWell, many years ago files were stored on magnetic tapes. Like in a cassette player,\u201d I said and suddenly realized that Erik doesn\u2019t know what a cassette player is.... \u201cOkay, forget about \u2018rewind\u2019. Let me show you. Type the same command again.\u201d\n\n\nErik did. \u201cNothing,\u201d he said. \u201cIt showed nothing this time. Where is my file?\u201d\n\n\n\u201cDon\u2019t worry, your file is safe. Remember I told you about the position where we read or write something in the file? In this case we have read the whole file byte by byte and reached its end. And there is nothing left to read, that\u2019s why you see nothing. We have to get back to the beginning. There is a file method called \nseek()\n which moves our position in the file to any place we want. If we want to go to the beginning, what position would it be?\u201d\n\n\n\u201cZero!\u201d said Erik. \n\n\n\u201cOf course! Now use this method to move to the beginning of the file and try to read it again.\u201d\n\n\nErik typed:\n\n\nIn [26]: f.seek(0)\nOut[26]: 0\n\nIn [27]: f.read()\nOut[27]: 'Erik,chocolate,butterscotch,caramel\\nPavel,coffee,plain,chocolate\\n'\n\n\n\n\n\u201cVery good. Now let\u2019s read it order by order, meaning line by line. Luckily, Python has a simple method for this. As soon as we are going to repeat some action a number of times, we are going to use\u2014you guessed it right\u2014a \nfor\n loop! Let me show you.\u201d \n\n\nIn [28]: f.seek(0)\nOut[28]: 0\n\nIn [29]: for line in f:\n    ...:     print(line)\n    ...:     \nErik,chocolate,butterscotch,caramel\n\nPavel,coffee,plain,chocolate\n\n\n\n\n\u201cYou see, here we\u2019re looping through the file and doing something with each line of the file. We don\u2019t want just to print them, we want to split them into products, flavors, toppings. So, naturally, we\u2019ll use the method \nsplit()\n for that. Look how it works:\u201d\n\n\nIn [30]: for line in f:\n    ...:     name,product,flavor,topping = line.split(',')\n    ...:     print(name)\n    ...:     print(product)\n    ...:     print(flavor)\n    ...:     print(topping)\n    ...:     \n    ...:     \nErik\nchocolate\nbutterscotch\ncaramel\n\nPavel\ncoffee\nplain\nchocolate\n\n\n\n\nI explained, \u201cWe use the method \nsplit()\n for each line here. And we tell it that we want to split the lines into pieces that are separated by comma. When we split it, we assign all pieces to respective variables on the left side of this statement. In Python it\u2019s pretty common when there are several variables  at the left side of the assignment statement. \u201c\n\n\n\u201cI like it!\u201d said Erik. \u201cWith this I know now how to print it like a receipt. I\u2019ll just add word like \u2018Dear\u2019 and \u2018your product is\u2019 and print the variables.\u201d\n\n\n\u201cSounds like a plan to me,\u201d I said. \u201cI just want to clean up it a little bit. Type \ntopping\n.\u201d\n\n\nErik did it:\n\n\nIn [31]: topping\nOut[31]: 'chocolate\\n'\n\n\n\n\nI pointed to the output and said, \u201cYou see this \u2018\n\\n\n\u2018 character at the end? It\u2019s a newline symbol and we don\u2019t need it. We should strip it from the line after we took it from the file. And, believe it or not, there is a special method to strip characters from strings. And it\u2019s called\u2026\u201d\n\n\n\u201d\u2026Strip?\u201d guessed Erik. \n\n\n\u201cYes, \u2018\nstrip()\n. We can put it right before \nsplit()\n, like this: \nline.strip('\\n').split(',')\n. Isn\u2019t it cool that you can \u2018chain\u2019 methods together in one line? Try it yourself.\u201d\n\n\nNow Erik was ready to reuse the code written my me. He didn\u2019t forget to move the position to the beginning and he also added something from himself.\n\n\nIn [32]: f.seek(0)\nOut[32]: 0\n\nIn [33]: for line in f:\n    ...:     name,product,flavor,topping = line.strip('\\n').split(',')\n    ...:     print(\"Dear \", name, \"here is your order:\")\n    ...:     print(\"Base product: \", product)\n    ...:     print(\"Flavor: \", flavor)\n    ...:     print(\"Topping: \", topping)\n    ...:     print(\"Guten Appetit!\")\n    ...:     \nDear  Erik here is your order:\nBase product:  chocolate\nFlavor:  butterscotch\nTopping:  caramel\nGuten Appetit!\nDear  Pavel here is your order:\nBase product:  coffee\nFlavor:  plain\nTopping:  chocolate\nGuten Appetit!\n\n\n\n\n\u201cI see that your German lessons with Grandma are not a waste of time,\u201d I said. \u201cGreat job, Erik. Let\u2019s take a break for now\u2014we have done a lot today. Tomorrow we\u2019ll make another function to list orders and also a main menu.\u201d",
            "title": "Day 5 - Files"
        },
        {
            "location": "/Python_vacation_day05/index.html#python-vacation-day-5",
            "text": "",
            "title": "Python Vacation -- Day 5"
        },
        {
            "location": "/Python_vacation_day05/index.html#working-with-files",
            "text": "Next day Erik was ready for new Python adventures. He looked more serious\u2014his application was going to become really business critical for him. Customers, orders, delivery, database, online shop\u2014all that sounded very serious now.   \u201cSo, you said we are going to work with files today?\u201d. He was eager to start.  \u201cYes, we have to store your orders somewhere, right? What do we do with files in Python? Do you remember from your course?\u201d  \u201cWe can open them, we can read and write. We have to close them when we don\u2019t need them anymore.\u201d  \u201cThat\u2019s right. And also we can open files in different  modes . We can tell Python and the operating system that we want only read from the file and it will guarantee that we don\u2019t write to it accidentaly. Might be very helpful. Well, we start working with files. Let\u2019s make a plan. What do we need this file for?\u201d  \u201cWe want to save our orders and then list them.\u201d  \u201cOkay, in Python words it means we want to write and read to and from the file. When do we want to write and when do we want to read?\u201d  \u201cWe will write to the file right after taking the order. And we read\u2026 wait, we don\u2019t have it here yet. We need another function to list the orders!\u201d  \u201cThat\u2019s right!\u201d I liked the way Erik started to think: in functions. We are on the right track! \u201cYes, we\u2019ll need that function. And also, I think, we\u2019ll need a menu in the beginning of the script. Something like: if you want to enter a new order, press \u2018N\u2019, if you want to list orders, press \u2018L\u2019. But first let\u2019s write something to a file.\u201d  Erik looked at his script and said, \u201cI think it should be here. Here, after we print \u2018Here is your order\u2019, we have to write it to the file, right?\u201d  \u201cYes,\u201d I said, \u201cgood idea. But first we have to open the file. In our case we open it for writing. Or, rather, appending.\u201d  \u201cWhat\u2019s the difference?\u201d  \u201cLet me explain. When we work with files we read and write them byte by byte. We read one byte and move to the next one. So we always are located in some  position  in the file. Like 8 th  byte, or 247 th  byte, or 0 th  byte.\u201d  \u201cIt\u2019s at the beginning of the file, right?\u201d  \u201cYes, exactly. And when we are at the beginning of the file and we start writing, we replace everything that is already there. Sometimes it\u2019s what we want, but sometimes it\u2019s not. In our case we\u2019d like to add our orders to those that are already recorded, not erase and replace them. When we open a file for  writing , we are in the 0 th  position, but when we open it for  appending , we are at the position right after the last byte of the file. And everything we write will be added to the end of the file.\u201d  I decided that it\u2019s time to use a new tool to illustrate this point.  \u201cLet me show another way to work with Python, it\u2019s called IPython. It\u2019s similar to the standard Python console, but more convenient. Open a terminal window and type  ipython .\u201d  He did it.  erik@idea:~$  ipython Python 3.6.1 |Anaconda custom (64-bit)| (default, May 11 2017, 13:09:58)   Type \"copyright\", \"credits\" or \"license\" for more information.  IPython 5.3.0 -- An enhanced Interactive Python.  ?         -> Introduction and overview of IPython's features.  % quickref -> Quick reference. help      -> Python's own help system.  object?   -> Details about 'object', use 'object??' for extra details.  In [1]:   \u201cLooks good with colors, I like it!\u201d  \u201cWe will play with files in this IPython environment. Instead of writing scripts, saving and running them, this tool is so much easier for simple tasks. Another good thing is that it has a lot of small helpful things, like command completion and others. We can even run Linux commands without leaving the session\u2014and we will need it.\u201d  I continued, \u201cWe start with opening a file. Write  f = open(\"a.txt\", \"w+\") . As you can easily guess, \u201c a.txt \u201d is a file name, \u201c w \u201d means we open it for writing, and that \u201cplus\u201d sign means: if the file doesn\u2019t exist, create it. Exactly what we need.\u201d  \u201cWhat is \u201c f ?\u201d asked Erik after he typed the string in the IPython session.  \u201cIt\u2019s a file  object . You did have something about objects and classes in your course, didn\u2019t you?\u201d  \u201cYes, objects can have  methods  and they are like functions. We call them by adding a dot and a function name to the object.\u201d  \u201cGreat!\u201d I was glad Erik was getting up to speed and recalled more and more from his previous course. \u201cSo, \u201c f \u201d is a file object and we will use its methods, like  read()  and  write() . Let\u2019s write something to the file. Type  f.write('1,2,3') .\u201d  He typed:  In [2]: f.write(\"1,2,3\")\nOut[2]: 5  \u201cWhat do you think is  5  here?\u201d asked I.  \u201cI have no idea\u2026\u201d  \u201cRemember, most functions return something. In this case this  write()  function returns the number of bytes written in the file. Three digits and two commas. Now let\u2019s check the file, if the function worked correctly. We\u2019ll use a simple Linux command  cat , but inside IPython it should start with a percent sign. Type  %cat a.txt .\u201d  In [3]: %cat a.txt  \u201cNothing,\u201d said Erik.  \u201cBecause we haven\u2019t closed the file. Usually operating system keeps data in a buffer in main memory before writing it to the file. It physically writes the data to the file when we close it (well, there are other situations and methods, but we\u2019ll talk about them later). Now close the file and print it out again with  cat .\u201d  In [4]: f.close()\n\nIn [5]: %cat a.txt\n1,2,3  \u201cYou see, now it\u2019s there,\u201d said I. \u201cLet\u2019s open it and write something else. You can use \u2018Up\u2019 and \u2018Down\u2019 arrows to access history, like in Linux shell.\u201d  Erik repeated several previous commands:  In [6]: f = open(\"a.txt\", \"w+\")\n\nIn [7]: f.write(\"5,6,7\")\nOut[7]: 5\n\nIn [8]: f.close()\n\nIn [9]: %cat a.txt\n5,6,7  \u201cYou see now\u2014this is what I meant. When you open a file for writing, you start from the beginning and replace everything that was there before. Now open it again, but with the \u201c a \u201d mode and try to write something again. Then close and look at the result.\u201d  Now Erik didn\u2019t need any specific instructions. He went back in history, changed the file\u2019s mode and wrote a bunch of numbers to the file again.  In [10]: f = open(\"a.txt\", \"a+\")\n\nIn [11]: f.write(\"7,8,9\")\nOut[11]: 5\n\nIn [12]: f.close()\n\nIn [13]: %cat a.txt\n5,6,77,8,9\nIn [14]:   \u201cWhy didn\u2019t it write it from a new line?\u201d he asked.  \u201cBecause you didn\u2019t tell it to. You didn\u2019t tell Python to write a new line character for you, so it just pasted the numbers next to the existing ones.\u201d  \u201cHow would I put a new line in the file?\u201d  \u201cPlace this in the beginning of your string: \u201c \\n \u201d and it will do the trick. It looks like two characters, but in reality it\u2019s one and it\u2019s a new line character. Go ahead.\u201d  In [14]: f = open(\"a.txt\", \"a+\")\n\nIn [15]: f.write(\"\\n9,10,11\")\nOut[15]: 8\n\nIn [16]: f.close()\n\nIn [17]: %cat a.txt\n5,6,77,8,9\n9,10,11\nIn [18]:   \u201cYes, now I see a new line,\u201d said Erik.  \u201cWe will need it to work with your orders. Traditionally we place each record\u2014in your case each order\u2014in a separate line. Then we\u2019ll read that file line by line and print out your orders one by one.\u201d  \u201cOkay, this is good. But what should I put into the orders? Name, then base product, then flavor and topping?\u201d  \u201cThat\u2019s right! This is exactly what you need to prepare the beverage. Just make sure you separate them with commas, like you just did in the IPython session. There is a well-known format called \u2018Comma Separated Values\u2019, or \u2018CSV\u2019 and we will follow its rules. You can use one of the string methods called  join() . Let me show you. Imagine you have several strings and you want to make a single string where they were separated by comma.\u201d I took his keyboard and wrote in the IPython session:  In [19]: a = \"first\"\n\nIn [20]: b = \"second\"\n\nIn [21]: c = \"third\"\n\nIn [22]: \",\".join((a,b,c))\nOut[22]: 'first,second,third'  \u201cYou see,\u201d I said, \u201cthe object here is the symbol which goes between the elements, and the argument of the method is the collection of the strings we want to join together.\u201d  \u201cWhy did you put two sets of parenthesis?\u201d  \u201cBecause we have to pass a  single  argument to the  join()  method. So we have to combine the strings together into a single object. In this case I created a  tuple  (I\u2019m sure they mentioned it in your course) and one set of parenthesis for that. You can create a list and result will be the same. Try to replace the internal set of parenthesis with square brackets.\u201d   Erik typed:  In [23]: \",\".join([a,b,c])\nOut[23]: 'first,second,third'  And get the expected result. I continued, \u201cYou see, the result of this function is a string which we can use in the  write()  function. Now you have everything you need to write your orders to the file. Oh, don\u2019t forget to add \u201c \\n \u201d to the end of the string. Just use the plus sign in the  write()  argument.\u201d  Erik opened his editor and started writing the code. I noticed that he opened the file with \u201c a+ \u201d mode and named the file \u201c orders.txt \u201d. He passed the joined string to  write()  and he didn\u2019t forget to close the file. It took him a couple of attempts to find the right place for that \u201c \\n \u201d inside the parenthesis, but he did it right. Here is his code:  .   .   .   ( skipped )   .   .   .  print ( \"Hello \" ,   name ,   \"! Here is your order: base product: \" ,   products [ p_index ],  \n   \", flavor: \" ,   flavors [ f_index ],   \", topping: \" ,   toppings [ t_index ])  f   =   open ( \"orders.txt\" ,   \"a+\" )  f . write ( \",\" . join (( name ,   products [ p_index ],   flavors [ f_index ],   toppings [ t_index ])) + \" \\n \" )  f . close ()   In the console he ran the script, entered his choices and then typed:  erik@idea:~$ cat orders.txt \nErik,chocolate,butterscotch,caramel  It worked prefectly. I asked if I can try it too. Erik said, \u201cYes\u2026 But, PLEASE!\u2026\u201d meaning, of course, \u201cDon\u2019t ruin my program again!\u201d  I entered my choices and output the file again.  erik@idea:~$ cat orders.txt \nErik,chocolate,butterscotch,caramel\nPavel,coffee,plain,chocolate  It worked indeed! It added orders to the file\u2014great! But that was only a half of our task for today.   \u201cYou did a great job,\u201d I said. \u201cNow we have to learn how to read from that file. How should we start?\u201d  \u201cWith opening the file?\u201d Erik suggested.  \u201cOf course. Remember, we talked about different  modes  when opening a file? This time we should open it for reading. Let\u2019s start with IPython again and try a couple things before writing the script. I think now you can easily guess how to open the file for reading.\u201d  Erik looked over his history and typed:  In [24]: f = open(\"orders.txt\", \"r\")  \u201cGood,\u201d I said. \u201cNow we have this  object   f  again. And this object has some methods. We just used its  write()  method to write our data to the file. Which method should we use to read the data?\u201d  \u201cThe  read()  method?\u201d Erik guessed. The answer was too obvoius and Erik expected there was a catch.  \u201cOf course! It\u2019s obvious! Try it.\u201d  Erik typed:  In [25]: f.read()\nOut[25]: 'Erik,chocolate,butterscotch,caramel\\nPavel,coffee,plain,chocolate\\n'  I said: \u201cYou see, it was easy. Python read the whole file and printed it out as a string. Now we have to decide what to do with this data.\u201d  \u201cWhat do you mean? I thought we were going to print out all orders and here they are.\u201d  \u201cYes, but they don\u2019t look pretty. I suggest we split them into separate orders first and then figure out what is the base product, what is the flavor, etc. This way we will be able to print it in a nice way. Like: \u2018Dear Erik! Here is your order\u2026\u2019 and then all components line by line.\u201d  \u201cLike in a receipt!\u201d Erik was glad it\u2019s going to look like \u2018real life\u2019 thing. \u201cI like it, let\u2019s make a receipt!\u201d  \u201cLet\u2019s make it!\u201d I agreed. \u201cBut first we have to rewind the file.\u201d  \u201cWhat do you mean\u2013 rewind ?\u201d asked Erik.   \u201cWell, many years ago files were stored on magnetic tapes. Like in a cassette player,\u201d I said and suddenly realized that Erik doesn\u2019t know what a cassette player is.... \u201cOkay, forget about \u2018rewind\u2019. Let me show you. Type the same command again.\u201d  Erik did. \u201cNothing,\u201d he said. \u201cIt showed nothing this time. Where is my file?\u201d  \u201cDon\u2019t worry, your file is safe. Remember I told you about the position where we read or write something in the file? In this case we have read the whole file byte by byte and reached its end. And there is nothing left to read, that\u2019s why you see nothing. We have to get back to the beginning. There is a file method called  seek()  which moves our position in the file to any place we want. If we want to go to the beginning, what position would it be?\u201d  \u201cZero!\u201d said Erik.   \u201cOf course! Now use this method to move to the beginning of the file and try to read it again.\u201d  Erik typed:  In [26]: f.seek(0)\nOut[26]: 0\n\nIn [27]: f.read()\nOut[27]: 'Erik,chocolate,butterscotch,caramel\\nPavel,coffee,plain,chocolate\\n'  \u201cVery good. Now let\u2019s read it order by order, meaning line by line. Luckily, Python has a simple method for this. As soon as we are going to repeat some action a number of times, we are going to use\u2014you guessed it right\u2014a  for  loop! Let me show you.\u201d   In [28]: f.seek(0)\nOut[28]: 0\n\nIn [29]: for line in f:\n    ...:     print(line)\n    ...:     \nErik,chocolate,butterscotch,caramel\n\nPavel,coffee,plain,chocolate  \u201cYou see, here we\u2019re looping through the file and doing something with each line of the file. We don\u2019t want just to print them, we want to split them into products, flavors, toppings. So, naturally, we\u2019ll use the method  split()  for that. Look how it works:\u201d  In [30]: for line in f:\n    ...:     name,product,flavor,topping = line.split(',')\n    ...:     print(name)\n    ...:     print(product)\n    ...:     print(flavor)\n    ...:     print(topping)\n    ...:     \n    ...:     \nErik\nchocolate\nbutterscotch\ncaramel\n\nPavel\ncoffee\nplain\nchocolate  I explained, \u201cWe use the method  split()  for each line here. And we tell it that we want to split the lines into pieces that are separated by comma. When we split it, we assign all pieces to respective variables on the left side of this statement. In Python it\u2019s pretty common when there are several variables  at the left side of the assignment statement. \u201c  \u201cI like it!\u201d said Erik. \u201cWith this I know now how to print it like a receipt. I\u2019ll just add word like \u2018Dear\u2019 and \u2018your product is\u2019 and print the variables.\u201d  \u201cSounds like a plan to me,\u201d I said. \u201cI just want to clean up it a little bit. Type  topping .\u201d  Erik did it:  In [31]: topping\nOut[31]: 'chocolate\\n'  I pointed to the output and said, \u201cYou see this \u2018 \\n \u2018 character at the end? It\u2019s a newline symbol and we don\u2019t need it. We should strip it from the line after we took it from the file. And, believe it or not, there is a special method to strip characters from strings. And it\u2019s called\u2026\u201d  \u201d\u2026Strip?\u201d guessed Erik.   \u201cYes, \u2018 strip() . We can put it right before  split() , like this:  line.strip('\\n').split(',') . Isn\u2019t it cool that you can \u2018chain\u2019 methods together in one line? Try it yourself.\u201d  Now Erik was ready to reuse the code written my me. He didn\u2019t forget to move the position to the beginning and he also added something from himself.  In [32]: f.seek(0)\nOut[32]: 0\n\nIn [33]: for line in f:\n    ...:     name,product,flavor,topping = line.strip('\\n').split(',')\n    ...:     print(\"Dear \", name, \"here is your order:\")\n    ...:     print(\"Base product: \", product)\n    ...:     print(\"Flavor: \", flavor)\n    ...:     print(\"Topping: \", topping)\n    ...:     print(\"Guten Appetit!\")\n    ...:     \nDear  Erik here is your order:\nBase product:  chocolate\nFlavor:  butterscotch\nTopping:  caramel\nGuten Appetit!\nDear  Pavel here is your order:\nBase product:  coffee\nFlavor:  plain\nTopping:  chocolate\nGuten Appetit!  \u201cI see that your German lessons with Grandma are not a waste of time,\u201d I said. \u201cGreat job, Erik. Let\u2019s take a break for now\u2014we have done a lot today. Tomorrow we\u2019ll make another function to list orders and also a main menu.\u201d",
            "title": "Working with files"
        },
        {
            "location": "/Python_vacation_day06/index.html",
            "text": "Python Vacation \u2014 Day 6\n\n\nMore Functions and Main Menu",
            "title": "Day 6 - Main Menu"
        },
        {
            "location": "/Python_vacation_day06/index.html#python-vacation-day-6",
            "text": "",
            "title": "Python Vacation --- Day 6"
        },
        {
            "location": "/Python_vacation_day06/index.html#more-functions-and-main-menu",
            "text": "",
            "title": "More Functions and Main Menu"
        },
        {
            "location": "/Python_vacation_day07/index.html",
            "text": "Python Vacation \u2014 Day 7\n\n\nWeb Interface",
            "title": "Day 7 - Web Interface"
        },
        {
            "location": "/Python_vacation_day07/index.html#python-vacation-day-7",
            "text": "",
            "title": "Python Vacation --- Day 7"
        },
        {
            "location": "/Python_vacation_day07/index.html#web-interface",
            "text": "",
            "title": "Web Interface"
        },
        {
            "location": "/Python_vacation_day08/index.html",
            "text": "Python Vacation \u2014 Day 8\n\n\nMaking It Pretty",
            "title": "Day 8 - Making It Pretty"
        },
        {
            "location": "/Python_vacation_day08/index.html#python-vacation-day-8",
            "text": "",
            "title": "Python Vacation --- Day 8"
        },
        {
            "location": "/Python_vacation_day08/index.html#making-it-pretty",
            "text": "",
            "title": "Making It Pretty"
        },
        {
            "location": "/Python_vacation_day09/index.html",
            "text": "Python Vacation \u2014 Day 9\n\n\nGetting Online",
            "title": "Day 9 - Getting Online"
        },
        {
            "location": "/Python_vacation_day09/index.html#python-vacation-day-9",
            "text": "",
            "title": "Python Vacation --- Day 9"
        },
        {
            "location": "/Python_vacation_day09/index.html#getting-online",
            "text": "",
            "title": "Getting Online"
        },
        {
            "location": "/Python_vacation_day10/index.html",
            "text": "Python Vacation \u2014 Day 10\n\n\nDatabases",
            "title": "Day 10 - Databases"
        },
        {
            "location": "/Python_vacation_day10/index.html#python-vacation-day-10",
            "text": "",
            "title": "Python Vacation --- Day 10"
        },
        {
            "location": "/Python_vacation_day10/index.html#databases",
            "text": "",
            "title": "Databases"
        },
        {
            "location": "/Python_vacation_day11/index.html",
            "text": "Python Vacation \u2014 Day 11\n\n\nAutomate It\n\n\n\u201cIt was quite a challenge last time when we had to connect a database to our web application, wasn\u2019t it?\u201d I asked Erik. \n\n\n\u201cYeah\u2026 My head is still spinning,\u201d said Erik and I knew he was not exaggerating.\n\n\n\u201cCan you recall what we had to do yesterday? There was a number of steps.\u201d\n\n\n\u201cWell\u2026 You gave me access to the virtual machine in our \u2018home cloud\u2019. Then I installed the PostgreSQL package. Then I connected to Postgres and created a new database called \u2018coffeeshop\u2019. Also you told me to create a separate database user for my application, so I did that. Then I logged in as that \u2018coffeeshop\u2019 user and created a new table for my orders. Then we made changes in the \nget_order.py\n and \nlist_orders.py\n scripts to use SQL instead of just files. And then we copied the scripts to the \ncgi-bin\n directory. Oh, and also you had to change something in the database configuration, but I don\u2019t remember what it was.\u201d\n\n\n\u201cThis is great, Erik! Honestly, I didn\u2019t expect that you remember all the steps in such details. Now let me ask you: could you repeat all the steps youself?\u201d\n\n\n\u201cOh, no!\u201d said Erik. It was quite obvious that he enjoyed working with Python code more than doing sysadmin stuff. \u201cIt\u2019s so boring and I\u2019m afraid I make a mistake somewhere.\u201d\n\n\n\u201cBut we\u2019ll have to do it again if we want to publish your application on the cloud,\u201d I said.\n\n\n\u201cCould you do that for me?\u201d asked Erik. \u201cLet\u2019s separate our duties: I will work with the code and you will do that systems stuff.\u201d\n\n\nI said, \u201cI understand you. Of course, I could help you, but what if I\u2019m not around? And you just have updated your application\u2014like added new flavors and toppings to your menu\u2014and you want to publish it right away? Or you just want to test a new color scheme? I think you should be able to publish your applications yourself. But I have a good news for you.\u201d\n\n\n\u201cWhat is your good news?\u201d Erik was suspicious. He knew from experience that good news are usually accompanied by bad news, and he expected that he had to learn something new again. But he was curious anyway and he still wanted to get his application published online. \n\n\n\u201cGood news is that you can automate this process and next time you\u2019ll just run one or two scripts and they will do everything for you.\u201d\n\n\n\u201cBut who will write those two scripts?\u201d Erik suspictions seemed to be confirmed.\n\n\n\u201cYou, of course!\u201d I said with a big smile on my face. \u201cDon\u2019t worry, I\u2019ll help you.\u201d\n\n\nErik didn\u2019t look very happy, but the perspective to type all those commands again was not much better. He said, \u201cSo, will we use Python for those automation scripts?\u201d\n\n\n\u201cNo,\u201d I said. \u201cThere is a tool called \u2018Ansible\u2019 and its language is much simpler than Python, it\u2019s called YAML. Yet Another Markup Language. Seriously, I\u2019m not making this up. You will see, it\u2019s very easy to read and understand.\u201d\n\n\n\u201cAnd what do those scripts do, exactly?\u201d asked Erik. \u201cShould I copy all the commands from my history to those scripts?\u201d\n\n\n\u201cNo,\u201d I said. \u201cThat would be true if you were going to create shell scripts. But Ansible is smarter than shell. With Ansible you don\u2019t type Linux commands, you just describe what you want to achieve and it does that for you. More than that, you don\u2019t even have to login to the virtual machine where you want to publish your application, Ansible does that for you. Even more, if your application becomes popular and you want more servers on the cloud, Ansible can easily publish your application on as many machines as you need.\u201d\n\n\n\u201cWill it configure a database for me as well?\u201d\n\n\n\u201cSure! Not only that\u2014it will install all necessary packages, it will copy your files to the web server, it will copy your scripts to \ncgi-bin\n and make sure the database and webserver are up and running. You just have to tell it to do that, but believe me, it\u2019s much easier than those shell commands you had to type the other day.\u201d\n\n\n\u201cWhy didn\u2019t you tell me about Ansible earlier? Okay, okay, I know your answer: you wanted me to suffer first. Well, shall we start?\u201d\n\n\n\u201cSure. I have already prepared another virtual machine for you to practice. It has just a bare minimum Linux installation and you can connect to it via SSH. Yes, right from your account here. I have installed your SSH key onto it and added you to the group of \nsudo\n users. That means you can run superuser commands on that machine. I even configured it so you don\u2019t have to enter password. Of course, you shouldn\u2019t configure your servers in real life this way, but just for educational purposes I made it simple\u2026 You can try it right now. \nssh\n into that machine: it\u2019s IP address is 192.168.1.125. Use the key called \u2018\nvbox-erik\n\u2018 in your current directory. When you\u2019re logged in, try to run some command where you need \u2018\nsudo\n\u2019. Like \u2018\nsudo ls -a /root\n\u2019. \u201c\n\n\nErik typed:\n\n\n$\n ssh -i vbox-erik erik@192.168.1.125\n\n. . .\n\n\nerik@vacation:~$\n sudo ls -a /root\n\n.  ..  .bashrc  .nano  .profile\n\n\nerik@vacation:~$\n \n\n\n\n\n\u201cGood,\u201d I said, \u201cit works. Now exit that machine and try if Ansible works. I have configured you as Ansible user in this directory and also I\u2019ve included this VirtualBox machine\u2019s IP in the list of hosts. In other words, it should work now.\u201d\n\n\nErik exited the virtual machine and looked inquiringly at me.\n\n\nI said: \u201cNow type \u2018\nansible all -m ping\n\u2019. \u201c\n\n\nErik typed and got this:\n\n\n$\n ansible all -m ping\n\n192.168.1.125 | SUCCESS => {\n\n\n    \"changed\": false, \n\n\n    \"ping\": \"pong\"\n\n\n}\n\n\n\n\n\n\u201cCool, Ansible works too!\u201d I said. \u201cNow let me show you a couple of playbooks I have prepared for you. Just to save time I am not going to force you to write a lot of them.\u201d Erik smiled. \n\n\nI opened several files in the editor and showed the first one. \u201cLook,\u201d I said, \u201cfirst we have to install the web server, right? And here is our first Ansible script. Look if you can read and understand it.\u201d \n\n\n# This installs and starts Apache\n\n\n-\n \nhosts\n:\n \nall\n\n  \ngather_facts\n:\n \nFalse\n\n  \nbecome\n:\n \nTrue\n\n\n  \ntasks\n:\n\n\n    \n-\n \nname\n:\n \nInstall Apache\n\n      \napt\n:\n \nname=apache2 update_cache=yes\n\n\n    \n-\n \nname\n:\n \nEnable CGI\n\n      \ncommand\n:\n \na2enmod cgi\n\n\n    \n-\n \nname\n:\n \nStart Apache\n\n      \nservice\n:\n \nname=apache2 state=restarted\n\n\n\n\n\nErik looked at the script. \u201cWell, it\u2019s even simpler than Python,\u201d he said. \u201cI can see the list of tasks: there are three of them. I see that you want to install Apache, enable CGI (yes, I remember we ran this command when we started working with CGI scripts) and start Apache. Pretty simple, I like it! I see that you want to do it on all hosts\u2014but we only have one. I just don\u2019t understand \u2018\ngather_facts\n\u2018 and \u2018\nbecome\n\u2019. What do they do?\u201d\n\n\nI was glad he grasped things so quickly. \u201cAs you can easliy guess, \u2018\ngather_facts\n\u2018 is about gathering facts. Ansible wants to know as much as possible about the systems it\u2019s going to manage. So first it gathers facts about the systems. Like operating system version, IP address and hostname, and so on and so forth. The good thing it that you can use those facts later in your scripts. For example, if the system is Ubuntu Linux, you use the \u2018\napt\n\u2018 command to install packages and if it\u2019s Red Hat, you use \u2018\nyum\n\u2018 for that. In our case we don\u2019t need that and I decided to save time and skip this. \u2018\nbecome\n\u2018 is a little trickier. Remember, I told you that I have created a user account for you at the target machine? Some commands you can\u2019t run as a normal user. You have to \nbecome\n a superuser, or \nroot\n.\u201d\n\n\n\u201cLike I did with \u2018\nsudo\n\u2019?\u201d asked Erik.\n\n\n\u201cExactly! You are telling Ansible that you are going to become \u2018\nroot\n\u2018 to run certain commands. Sometimes you want to become a different user, and then you explicitly tell that. We\u2019ll see it in one of the next scripts.\u201d\n\n\n\u201cAnd also,\u201d I added, \u201cit not me, who wants to install Apache, it\u2019s you,\u201d I smiled and Erik understood me. \u201cWhat is the command to run Ansible scripts?\u201d he asked. \n\n\n\u201cPlaybooks. We call them playbooks. Just type \u2018\nansible-playbook apache-install.yml\n\u2019.\u201d\n\n\nErik typed and watched the output:\n\n\n$ ansible-playbook apache-install.yml\n\n\n\n\n\u201cNow try to access the web server at \nhttp://192.168.1.125\n,\u201d I suggested. Erik opened this URL in his browser and found the default Apache page. \n\n\n\u201cYou see, instead of typing three commands you typed just one and got Apache installed. What is also good about Ansible that if you needed to install 3, 5, 100 web servers, you\u2019d have to type the same single command and Ansible would install Apache in parallel on all those servers.\u201d\n\n\n\u201cWhy would anybody need one hundred web servers?\u201d asked Erik. He looked surpised by the scale of real life applications. I said, \u201cImaging you are working not on a coffeeshop for your neighborhood friends, but on a big online shop or other web application. And suddenly it becomes very popular. You don\u2019t want to lose your customers just because your web server can\u2019t handle the load, right? So you start many web servers and put a thing called \nload balancer\n in front of them. That\u2019s when you need to start many similar servers.\u201d\n\n\n\u201cOkay,\u201d said Erik, \u201cwhat\u2019s now?\u201d\n\n\n\u201cWhat else do we need? Install the database, of course! Look at this playbook called \u2018\npostgres-install.yml\n\u2019.\u201d\n\n\n# This installs postgres and psycopg2\n\n\n-\n \nhosts\n:\n \nall\n\n  \ngather_facts\n:\n \nFalse\n\n  \nbecome\n:\n \nTrue\n\n\n  \ntasks\n:\n\n\n    \n-\n \nname\n:\n \nInstall PostgreSQL\n\n      \napt\n:\n \nname=\"{{ item }}\" state=installed\n\n      \nwith_items\n:\n\n        \n-\n \npostgresql\n\n        \n-\n \npostgresql-contrib\n\n\n    \n-\n \nname\n:\n \nReplace peer auth with md5 in PostgreSQL\n\n      \nlineinfile\n:\n\n        \nbackup\n:\n \nyes\n\n        \npath\n:\n \n'/etc/postgresql/9.5/main/pg_hba.conf'\n\n        \nregexp\n:\n \n'local\n   \nall\n      \nall\n                              \npeer'\n\n        \nline\n:\n \n'local\n   \nall\n          \nall\n                              \nmd5'\n\n\n    \n-\n \nname\n:\n \nInstall pip3\n\n      \napt\n:\n\n        \nname=python3-pip update_cache=yes\n\n\n    \n-\n \nname\n:\n \nInstall psycopg2\n\n      \npip\n:\n\n        \nexecutable\n:\n \n/usr/bin/pip3\n\n        \nname\n:\n \npsycopg2\n\n\n    \n-\n \nname\n:\n \nStart PostgreSQL\n\n      \nservice\n:\n \nname=postgresql state=started\n\n\n\n\n\nErik looked puzzled. I decided to help him. \u201cI know, you want to ask what are these \u2018\npip3\n\u2018 and \u2018\npsycopg2\n\u2019. The latter is a Python module which we need to talk to PostgreSQL database. We used it already in your application, but I had installed it already. And \u2018\npip3\n\u2018 is a tool to install Python modules. You haven\u2019t seen it before because I have installed all the modules beforehand.\u201d\n\n\n\u201cAlso look at the first task,\u201d I continued. \u201cYou see this \u2018\n{{ item }}\n\u2018 and \u2018\nwith_items\n\u2018 things? We can use them in Ansible similar to loops in Python. Like here, we want to install several packages from the list. Second task is needed because we are going to create a user in PostgreSQL, but not in Linux, so we can\u2019t use peer authentication. Don\u2019t worry about that right now, we\u2019ll discuss it later. Everything else should look familiar to you already. Go ahead and run this playbook too.\u201d\n\n\nErik typed:\n\n\n$ ansible-playbook postgres-install.yml\nPLAY [all] *******************************************************************************************************\n\nTASK [Install PostgreSQL] ****************************************************************************************\nchanged: [192.168.1.125] => (item=[u'postgresql', u'postgresql-contrib'])\n\nTASK [Replace peer auth with md5 in PostgreSQL] ******************************************************************\nchanged: [192.168.1.125]\n\nTASK [Install pip3] **********************************************************************************************\nchanged: [192.168.1.125]\n\nTASK [Install psycopg2] ******************************************************************************************\nchanged: [192.168.1.125]\n\nTASK [Start PostgreSQL] ******************************************************************************************\nok: [192.168.1.125]\n\nPLAY RECAP *******************************************************************************************************\n192.168.1.125              : ok=5    changed=4    unreachable=0    failed=0   \n\n\n\n\n\u201cGood,\u201d I said. \u201cThe database server is up and running. Now we have to create a database and a user to work with it. And again, we are going to use Ansible modules for that.\u201d\n\n\n\u201cIt seems there is an Ansible module for everything!\u201d exclaimed Erik.\n\n\n\u201cWell, almost. There are over 1300 modules currently. And if you can\u2019t find a module you need, you can write it yourself\u2014in Python\u2014and it will become part of Ansible\u2014of course, if you wrote it well. Look at this playbook which creates a database and a user. I\u2019m sure now you\u2019ll understand everything.\u201d\n\n\n# This creates a CoffeeShop database and a user\n\n\n-\n \nhosts\n:\n \nall\n\n  \ngather_facts\n:\n \nFalse\n\n  \nbecome\n:\n \nTrue\n\n  \nbecome_user\n:\n \npostgres\n\n\n  \ntasks\n:\n\n    \n-\n \nname\n:\n \nCreate a database for the CoffeeShop application\n\n      \npostgresql_db\n:\n\n        \nname\n:\n \ncoffeeshop\n\n        \nstate\n:\n \npresent\n\n        \nlogin_user\n:\n \npostgres\n\n\n    \n-\n \nname\n:\n \nCreate a user coffeeshop\n\n      \npostgresql_user\n:\n\n        \nname\n:\n \ncoffeeshop\n\n        \npassword\n:\n \ncoffeeshop\n\n        \nrole_attr_flags\n:\n \nNOSUPERUSER,CREATEDB,LOGIN\n\n        \nstate\n:\n \npresent\n\n        \ndb\n:\n \ncoffeeshop\n\n\n\n\n\n\u201cA-ha, now I see that you want it to become a different user, not \u2018\nroot\n\u2019. I remember, you told me it\u2019s a user who manages the whole database. Like \u2018\nroot\n\u2018 for PostgreSQL.\u201d Erik ran the playbook and watched its output. Everything was in place for his application. Well, almost.\n\n\n\u201cBut I also need a table for orders. Can I do it with Ansible?\u201d \n\n\nI liked that he started thinking the \u201cAnsible way\u201d and tried to solve his problems with this new tool. I said, \u201cYes, but now you have to use SQL for that. There is no Ansible module specifically to create a table. After all, what would it do? It would call a SQL statement anyway. So in our case we\u2019ll create a simple SQL script and execute it on the target machine. That will be our next playbook. Now go ahead and run this one.\u201d\n\n\n$ ansible-playbook postgres-createdb.yml\n\nPLAY [all] *******************************************************************************************************\n\nTASK [Create a database for CoffeeShop application] **************************************************************\nchanged: [192.168.1.125]\n\nTASK [Create a user coffeeshop] **********************************************************************************\nchanged: [192.168.1.125]\n\nPLAY RECAP *******************************************************************************************************\n192.168.1.125              : ok=2    changed=2    unreachable=0    failed=0   \n\n\n\n\n\u201cWell,\u201d I said, \u201cnow we have a database and a user. We can ask this user to run a SQL script for us. And it will be a simple script to create a table for your orders. Remember, when we just started working with databases we just ran a simple \u2018\nCREATE TABLE\n\u2018 command and told PostgreSQL about the columns and types we wanted to have in the table. Now we\u2019ll create a script with this command, send it to the target machine and run it as a user \u2018\ncoffeeshop\n\u2019. Look here, this is the script:\u201d\n\n\n---\n- hosts: database\n  gather_facts: False\n  become: True\n  become_user: postgres\n\n  tasks:\n    - name: Copy the table creation script\n      copy: >\n        src=\"files/create-table-orders.sql\" \n        dest=\"/tmp/create-table-orders.sql\"\n\n    - name: Execute sql script to create the table\n      command: >\n        psql -h localhost \n        \"user={{ postgres_user }} password={{ postgres_password }}\" \n        -f /tmp/create-table-orders.sql\n\n    - name: Delete sql script\n      file: path=\"/tmp/create-table-orders.sql\" state=absent\n\n\n\n\n$ ansible-playbook --ask-vault-pass create-table-orders.yml\nVault password: \n\nPLAY [database] **************************************************************************************************\n\nTASK [Copy the table creation script] ****************************************************************************\nchanged: [192.168.1.166]\n\nTASK [Execute sql script to create the table] ********************************************************************\nchanged: [192.168.1.166]\n\nTASK [Delete sql script] *****************************************************************************************\nchanged: [192.168.1.166]\n\nPLAY RECAP *******************************************************************************************************\n192.168.1.166              : ok=3    changed=3    unreachable=0    failed=0",
            "title": "Day 11 - Automate It"
        },
        {
            "location": "/Python_vacation_day11/index.html#python-vacation-day-11",
            "text": "",
            "title": "Python Vacation --- Day 11"
        },
        {
            "location": "/Python_vacation_day11/index.html#automate-it",
            "text": "\u201cIt was quite a challenge last time when we had to connect a database to our web application, wasn\u2019t it?\u201d I asked Erik.   \u201cYeah\u2026 My head is still spinning,\u201d said Erik and I knew he was not exaggerating.  \u201cCan you recall what we had to do yesterday? There was a number of steps.\u201d  \u201cWell\u2026 You gave me access to the virtual machine in our \u2018home cloud\u2019. Then I installed the PostgreSQL package. Then I connected to Postgres and created a new database called \u2018coffeeshop\u2019. Also you told me to create a separate database user for my application, so I did that. Then I logged in as that \u2018coffeeshop\u2019 user and created a new table for my orders. Then we made changes in the  get_order.py  and  list_orders.py  scripts to use SQL instead of just files. And then we copied the scripts to the  cgi-bin  directory. Oh, and also you had to change something in the database configuration, but I don\u2019t remember what it was.\u201d  \u201cThis is great, Erik! Honestly, I didn\u2019t expect that you remember all the steps in such details. Now let me ask you: could you repeat all the steps youself?\u201d  \u201cOh, no!\u201d said Erik. It was quite obvious that he enjoyed working with Python code more than doing sysadmin stuff. \u201cIt\u2019s so boring and I\u2019m afraid I make a mistake somewhere.\u201d  \u201cBut we\u2019ll have to do it again if we want to publish your application on the cloud,\u201d I said.  \u201cCould you do that for me?\u201d asked Erik. \u201cLet\u2019s separate our duties: I will work with the code and you will do that systems stuff.\u201d  I said, \u201cI understand you. Of course, I could help you, but what if I\u2019m not around? And you just have updated your application\u2014like added new flavors and toppings to your menu\u2014and you want to publish it right away? Or you just want to test a new color scheme? I think you should be able to publish your applications yourself. But I have a good news for you.\u201d  \u201cWhat is your good news?\u201d Erik was suspicious. He knew from experience that good news are usually accompanied by bad news, and he expected that he had to learn something new again. But he was curious anyway and he still wanted to get his application published online.   \u201cGood news is that you can automate this process and next time you\u2019ll just run one or two scripts and they will do everything for you.\u201d  \u201cBut who will write those two scripts?\u201d Erik suspictions seemed to be confirmed.  \u201cYou, of course!\u201d I said with a big smile on my face. \u201cDon\u2019t worry, I\u2019ll help you.\u201d  Erik didn\u2019t look very happy, but the perspective to type all those commands again was not much better. He said, \u201cSo, will we use Python for those automation scripts?\u201d  \u201cNo,\u201d I said. \u201cThere is a tool called \u2018Ansible\u2019 and its language is much simpler than Python, it\u2019s called YAML. Yet Another Markup Language. Seriously, I\u2019m not making this up. You will see, it\u2019s very easy to read and understand.\u201d  \u201cAnd what do those scripts do, exactly?\u201d asked Erik. \u201cShould I copy all the commands from my history to those scripts?\u201d  \u201cNo,\u201d I said. \u201cThat would be true if you were going to create shell scripts. But Ansible is smarter than shell. With Ansible you don\u2019t type Linux commands, you just describe what you want to achieve and it does that for you. More than that, you don\u2019t even have to login to the virtual machine where you want to publish your application, Ansible does that for you. Even more, if your application becomes popular and you want more servers on the cloud, Ansible can easily publish your application on as many machines as you need.\u201d  \u201cWill it configure a database for me as well?\u201d  \u201cSure! Not only that\u2014it will install all necessary packages, it will copy your files to the web server, it will copy your scripts to  cgi-bin  and make sure the database and webserver are up and running. You just have to tell it to do that, but believe me, it\u2019s much easier than those shell commands you had to type the other day.\u201d  \u201cWhy didn\u2019t you tell me about Ansible earlier? Okay, okay, I know your answer: you wanted me to suffer first. Well, shall we start?\u201d  \u201cSure. I have already prepared another virtual machine for you to practice. It has just a bare minimum Linux installation and you can connect to it via SSH. Yes, right from your account here. I have installed your SSH key onto it and added you to the group of  sudo  users. That means you can run superuser commands on that machine. I even configured it so you don\u2019t have to enter password. Of course, you shouldn\u2019t configure your servers in real life this way, but just for educational purposes I made it simple\u2026 You can try it right now.  ssh  into that machine: it\u2019s IP address is 192.168.1.125. Use the key called \u2018 vbox-erik \u2018 in your current directory. When you\u2019re logged in, try to run some command where you need \u2018 sudo \u2019. Like \u2018 sudo ls -a /root \u2019. \u201c  Erik typed:  $  ssh -i vbox-erik erik@192.168.1.125 . . .  erik@vacation:~$  sudo ls -a /root .  ..  .bashrc  .nano  .profile  erik@vacation:~$    \u201cGood,\u201d I said, \u201cit works. Now exit that machine and try if Ansible works. I have configured you as Ansible user in this directory and also I\u2019ve included this VirtualBox machine\u2019s IP in the list of hosts. In other words, it should work now.\u201d  Erik exited the virtual machine and looked inquiringly at me.  I said: \u201cNow type \u2018 ansible all -m ping \u2019. \u201c  Erik typed and got this:  $  ansible all -m ping 192.168.1.125 | SUCCESS => {      \"changed\": false,       \"ping\": \"pong\"  }   \u201cCool, Ansible works too!\u201d I said. \u201cNow let me show you a couple of playbooks I have prepared for you. Just to save time I am not going to force you to write a lot of them.\u201d Erik smiled.   I opened several files in the editor and showed the first one. \u201cLook,\u201d I said, \u201cfirst we have to install the web server, right? And here is our first Ansible script. Look if you can read and understand it.\u201d   # This installs and starts Apache  -   hosts :   all \n   gather_facts :   False \n   become :   True \n\n   tasks : \n\n     -   name :   Install Apache \n       apt :   name=apache2 update_cache=yes \n\n     -   name :   Enable CGI \n       command :   a2enmod cgi \n\n     -   name :   Start Apache \n       service :   name=apache2 state=restarted   Erik looked at the script. \u201cWell, it\u2019s even simpler than Python,\u201d he said. \u201cI can see the list of tasks: there are three of them. I see that you want to install Apache, enable CGI (yes, I remember we ran this command when we started working with CGI scripts) and start Apache. Pretty simple, I like it! I see that you want to do it on all hosts\u2014but we only have one. I just don\u2019t understand \u2018 gather_facts \u2018 and \u2018 become \u2019. What do they do?\u201d  I was glad he grasped things so quickly. \u201cAs you can easliy guess, \u2018 gather_facts \u2018 is about gathering facts. Ansible wants to know as much as possible about the systems it\u2019s going to manage. So first it gathers facts about the systems. Like operating system version, IP address and hostname, and so on and so forth. The good thing it that you can use those facts later in your scripts. For example, if the system is Ubuntu Linux, you use the \u2018 apt \u2018 command to install packages and if it\u2019s Red Hat, you use \u2018 yum \u2018 for that. In our case we don\u2019t need that and I decided to save time and skip this. \u2018 become \u2018 is a little trickier. Remember, I told you that I have created a user account for you at the target machine? Some commands you can\u2019t run as a normal user. You have to  become  a superuser, or  root .\u201d  \u201cLike I did with \u2018 sudo \u2019?\u201d asked Erik.  \u201cExactly! You are telling Ansible that you are going to become \u2018 root \u2018 to run certain commands. Sometimes you want to become a different user, and then you explicitly tell that. We\u2019ll see it in one of the next scripts.\u201d  \u201cAnd also,\u201d I added, \u201cit not me, who wants to install Apache, it\u2019s you,\u201d I smiled and Erik understood me. \u201cWhat is the command to run Ansible scripts?\u201d he asked.   \u201cPlaybooks. We call them playbooks. Just type \u2018 ansible-playbook apache-install.yml \u2019.\u201d  Erik typed and watched the output:  $ ansible-playbook apache-install.yml  \u201cNow try to access the web server at  http://192.168.1.125 ,\u201d I suggested. Erik opened this URL in his browser and found the default Apache page.   \u201cYou see, instead of typing three commands you typed just one and got Apache installed. What is also good about Ansible that if you needed to install 3, 5, 100 web servers, you\u2019d have to type the same single command and Ansible would install Apache in parallel on all those servers.\u201d  \u201cWhy would anybody need one hundred web servers?\u201d asked Erik. He looked surpised by the scale of real life applications. I said, \u201cImaging you are working not on a coffeeshop for your neighborhood friends, but on a big online shop or other web application. And suddenly it becomes very popular. You don\u2019t want to lose your customers just because your web server can\u2019t handle the load, right? So you start many web servers and put a thing called  load balancer  in front of them. That\u2019s when you need to start many similar servers.\u201d  \u201cOkay,\u201d said Erik, \u201cwhat\u2019s now?\u201d  \u201cWhat else do we need? Install the database, of course! Look at this playbook called \u2018 postgres-install.yml \u2019.\u201d  # This installs postgres and psycopg2  -   hosts :   all \n   gather_facts :   False \n   become :   True \n\n   tasks : \n\n     -   name :   Install PostgreSQL \n       apt :   name=\"{{ item }}\" state=installed \n       with_items : \n         -   postgresql \n         -   postgresql-contrib \n\n     -   name :   Replace peer auth with md5 in PostgreSQL \n       lineinfile : \n         backup :   yes \n         path :   '/etc/postgresql/9.5/main/pg_hba.conf' \n         regexp :   'local     all        all                                peer' \n         line :   'local     all            all                                md5' \n\n     -   name :   Install pip3 \n       apt : \n         name=python3-pip update_cache=yes \n\n     -   name :   Install psycopg2 \n       pip : \n         executable :   /usr/bin/pip3 \n         name :   psycopg2 \n\n     -   name :   Start PostgreSQL \n       service :   name=postgresql state=started   Erik looked puzzled. I decided to help him. \u201cI know, you want to ask what are these \u2018 pip3 \u2018 and \u2018 psycopg2 \u2019. The latter is a Python module which we need to talk to PostgreSQL database. We used it already in your application, but I had installed it already. And \u2018 pip3 \u2018 is a tool to install Python modules. You haven\u2019t seen it before because I have installed all the modules beforehand.\u201d  \u201cAlso look at the first task,\u201d I continued. \u201cYou see this \u2018 {{ item }} \u2018 and \u2018 with_items \u2018 things? We can use them in Ansible similar to loops in Python. Like here, we want to install several packages from the list. Second task is needed because we are going to create a user in PostgreSQL, but not in Linux, so we can\u2019t use peer authentication. Don\u2019t worry about that right now, we\u2019ll discuss it later. Everything else should look familiar to you already. Go ahead and run this playbook too.\u201d  Erik typed:  $ ansible-playbook postgres-install.yml\nPLAY [all] *******************************************************************************************************\n\nTASK [Install PostgreSQL] ****************************************************************************************\nchanged: [192.168.1.125] => (item=[u'postgresql', u'postgresql-contrib'])\n\nTASK [Replace peer auth with md5 in PostgreSQL] ******************************************************************\nchanged: [192.168.1.125]\n\nTASK [Install pip3] **********************************************************************************************\nchanged: [192.168.1.125]\n\nTASK [Install psycopg2] ******************************************************************************************\nchanged: [192.168.1.125]\n\nTASK [Start PostgreSQL] ******************************************************************************************\nok: [192.168.1.125]\n\nPLAY RECAP *******************************************************************************************************\n192.168.1.125              : ok=5    changed=4    unreachable=0    failed=0     \u201cGood,\u201d I said. \u201cThe database server is up and running. Now we have to create a database and a user to work with it. And again, we are going to use Ansible modules for that.\u201d  \u201cIt seems there is an Ansible module for everything!\u201d exclaimed Erik.  \u201cWell, almost. There are over 1300 modules currently. And if you can\u2019t find a module you need, you can write it yourself\u2014in Python\u2014and it will become part of Ansible\u2014of course, if you wrote it well. Look at this playbook which creates a database and a user. I\u2019m sure now you\u2019ll understand everything.\u201d  # This creates a CoffeeShop database and a user  -   hosts :   all \n   gather_facts :   False \n   become :   True \n   become_user :   postgres \n\n   tasks : \n     -   name :   Create a database for the CoffeeShop application \n       postgresql_db : \n         name :   coffeeshop \n         state :   present \n         login_user :   postgres \n\n     -   name :   Create a user coffeeshop \n       postgresql_user : \n         name :   coffeeshop \n         password :   coffeeshop \n         role_attr_flags :   NOSUPERUSER,CREATEDB,LOGIN \n         state :   present \n         db :   coffeeshop   \u201cA-ha, now I see that you want it to become a different user, not \u2018 root \u2019. I remember, you told me it\u2019s a user who manages the whole database. Like \u2018 root \u2018 for PostgreSQL.\u201d Erik ran the playbook and watched its output. Everything was in place for his application. Well, almost.  \u201cBut I also need a table for orders. Can I do it with Ansible?\u201d   I liked that he started thinking the \u201cAnsible way\u201d and tried to solve his problems with this new tool. I said, \u201cYes, but now you have to use SQL for that. There is no Ansible module specifically to create a table. After all, what would it do? It would call a SQL statement anyway. So in our case we\u2019ll create a simple SQL script and execute it on the target machine. That will be our next playbook. Now go ahead and run this one.\u201d  $ ansible-playbook postgres-createdb.yml\n\nPLAY [all] *******************************************************************************************************\n\nTASK [Create a database for CoffeeShop application] **************************************************************\nchanged: [192.168.1.125]\n\nTASK [Create a user coffeeshop] **********************************************************************************\nchanged: [192.168.1.125]\n\nPLAY RECAP *******************************************************************************************************\n192.168.1.125              : ok=2    changed=2    unreachable=0    failed=0     \u201cWell,\u201d I said, \u201cnow we have a database and a user. We can ask this user to run a SQL script for us. And it will be a simple script to create a table for your orders. Remember, when we just started working with databases we just ran a simple \u2018 CREATE TABLE \u2018 command and told PostgreSQL about the columns and types we wanted to have in the table. Now we\u2019ll create a script with this command, send it to the target machine and run it as a user \u2018 coffeeshop \u2019. Look here, this is the script:\u201d  ---\n- hosts: database\n  gather_facts: False\n  become: True\n  become_user: postgres\n\n  tasks:\n    - name: Copy the table creation script\n      copy: >\n        src=\"files/create-table-orders.sql\" \n        dest=\"/tmp/create-table-orders.sql\"\n\n    - name: Execute sql script to create the table\n      command: >\n        psql -h localhost \n        \"user={{ postgres_user }} password={{ postgres_password }}\" \n        -f /tmp/create-table-orders.sql\n\n    - name: Delete sql script\n      file: path=\"/tmp/create-table-orders.sql\" state=absent  $ ansible-playbook --ask-vault-pass create-table-orders.yml\nVault password: \n\nPLAY [database] **************************************************************************************************\n\nTASK [Copy the table creation script] ****************************************************************************\nchanged: [192.168.1.166]\n\nTASK [Execute sql script to create the table] ********************************************************************\nchanged: [192.168.1.166]\n\nTASK [Delete sql script] *****************************************************************************************\nchanged: [192.168.1.166]\n\nPLAY RECAP *******************************************************************************************************\n192.168.1.166              : ok=3    changed=3    unreachable=0    failed=0",
            "title": "Automate It"
        }
    ]
}