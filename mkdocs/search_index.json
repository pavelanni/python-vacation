{
    "docs": [
        {
            "location": "/index.html",
            "text": "Python Vacation\n\n\nThis book is written as a series of simple programming exercises which we did with my son during summer vacation. I found out that despite the fact that he has completed one of the online Python courses, he still needed some simple practical projects to use his skills. So we started with simple ordering application with text-based menus, moved to its web-based version, added some styling, then connected it to a database\u2026 In other words, a lot of programming adventures during summer vacation.",
            "title": "Home"
        },
        {
            "location": "/index.html#python-vacation",
            "text": "This book is written as a series of simple programming exercises which we did with my son during summer vacation. I found out that despite the fact that he has completed one of the online Python courses, he still needed some simple practical projects to use his skills. So we started with simple ordering application with text-based menus, moved to its web-based version, added some styling, then connected it to a database\u2026 In other words, a lot of programming adventures during summer vacation.",
            "title": "Python Vacation"
        },
        {
            "location": "/Python_vacation_outline/index.html",
            "text": "Quick and dirty draft:\n\n\n\n\nBeginning of the story: Frappuccino for friends\n\n\nPure Python: text menu, functions\n\n\nHow to save the orders. Text file, CSV file\n\n\nList the orders\n\n\nWill it work on my iPad?\n\n\nLet\u2019s move on the Web! Simple HTML Forms and CGI basics. Apache directories\n\n\nCreate the form\n\n\nCreate the script to take orders\n\n\nScript to list orders\n\n\nHome page, workflow\n\n\nLet\u2019s make it beautiful: Bootstrap\n\n\nLike grownups: databases\n\n\nContainers\n\n\n\n\nIdea: Make the book personal: I use my son\u2019s name in the book, but you can customize it and replace it with your child\u2019s name. \u201cLook, it\u2019s a book about you!\u201d. I think this will make her or him more willing to take this adventure.",
            "title": "Intro"
        },
        {
            "location": "/Python_vacation_day0/index.html",
            "text": "Python Vacation \u2013 Day 0\n\n\nIt all started on 4\nth\n of July. My 13-year old son came home with an idea. \n\n\n\u201cI want to treat my neighborhood friends with Frappuccino to celebrate Independence Day!\u201d said Erik.\n\n\n\u201cGood idea! Do you have everything you need?\u201d\n\n\n\u201cYes, I have coffee, I have chocolate, I have several flavors to add and I have chocolate cream for toppings! I will take orders on my iPad and prepare them here. Just a moment!\u201d and off he went.\n\n\nHe came back with notes on his iPad, prepared six drinks for his friends and left again.\n\n\n\u201cWasn\u2019t it a good idea?\u201d he asked me when he came home with six empty plastic cups. \u201cYes, great idea,\u201d said I. \u201cBut\u2026\u201d\n\n\n\u201cWhat \u2018BUT\u2019??\u201d said Erik.\n\n\n\u201cYou see, you used your iPad to take orders, but you used it just as a notepad. It would be much easier to take just a notepad and a pencil with you for that. With iPad you can do it in much better way\u2026\u201d\n\n\n\u201cHow?\u201d\n\n\n\u201cYou could create a small application to take orders where you or your friends would just click on the available choices for flavors and toppings.\u201d\n\n\n\u201cLike radio buttons, right?\u201d\n\n\n\u201cYes, something like that. You\u2019ve taken that Python course at Codeacademy haven\u2019t you? Don\u2019t you want to create something real with Python, rather than doing exercises in their sandbox?\u201d\n\n\n\u201cYes, that would be cool!\u201d said Erik. \u201cBut it must be difficult\u2014to make it look like a real online coffee shop\u2026\u201d\n\n\n\u201cDon\u2019t worry, we\u2019ll do it step by step. Open your laptop and start a terminal.\u201d\n\n\nI have to admit, my son uses Linux on his laptop. I know, it\u2019s torture for a 13-year old, but my way of thinking was: \u201cHe will learn Windows or Mac OS later anyway\u2014at school or with friends. I\u2019ll give him a chance to work with Linux at home. It won\u2019t hurt to know a bit of Linux.\u201d\n\n\nFirst lines of code\n\n\n\u201cIn the terminal type \u2018python3\u2019,\u201d I said to Erik. Yes, I know there is a never-ending discussion \u201cPython 2 vs. Python 3\u201d, but at least it seems there is a consensus that if you are just starting learning Python, it\u2019s better to start with Python 3. You mileage may vary, of course. \n\n\nerik@idea:~$\n python3\n\nPython 3.5.2 (default, Nov 17 2016, 17:05:23) \n\n\n[GCC 5.4.0 20160609] on linux\n\n\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\n\n>>> \n\n\n\n\n\u201cDone. What\u2019s next?\u201d asked my son.\n\n\n\u201cWell, we want to take orders, right? So we have to ask our customers what they want. And get some \ninput\n from them, right? What did you start with when taking orders from your friends?\u201d\n\n\n\u201cI asked them if they want coffee or chocolate. Some of them are young and they don\u2019t drink coffee.\u201d\n\n\n\u201cOkay, let\u2019s do that. Do you remember how to ask for input in Python?\u201d\n\n\n\u201cBarely\u2026\u201d\n\n\n\u201cWell, I\u2019ll help you. There is a function called \ninput()\n. It can ask a question and you put this question in quotes into parenthesis. And then the function waits for the user to type something and press \nEnter\n. After that the function \nreturns\n a value. You can take that value and assign it to a variable. \u201c\n\n\nErik\u2019s face showed that he is beginning to recall something from that Python course. Suddenly there was a connection between abstract things like \nfunctions\n and his friends and cups of Frappuccino. \u201cAnd to assign something to a variable I type its name and then \u2018equal\u2019 sign and then the value, right?\u201d\n\n\n\u201cExactly! Go ahead. Let\u2019s name that variable \nanswer\n and assign to it what we get from the \ninput()\n function. How would you write it?\u201d\n\n\n>>> \nanswer\n \n=\n \ninput\n()\n\n\n\n\n\n\u201cNothing happened,\u201d said Erik.\n\n\n\u201cWhat did you expect?\u201d\n\n\n\u201cI thought it will ask me what I want\u2026\u201d\n\n\n\u201cRemember: computer only does what you tell it to do. Did you tell it to ask you a question?\u201d\n\n\n\u201cNo\u2026 A-ha, I know! You said that I have to put the question between the parethesis. But what should I do now. It doesn\u2019t show the prompt.\u201d\n\n\n\u201cIt\u2019s because it is waiting for your input. Say something and press \nEnter\n\u201c\n\n\ncoffee\n\n\n>>> \n\n\n\n\n\n\u201cNow type this \ninput()\n function again, but with a question.\u201d\n\n\n>>> \nanswer\n \n=\n \ninput\n(\n\"Do you want coffee or chocolate?\"\n)\n\n\nDo you want coffee or chocolate?coffee\n\n\n>>> \n\n\n\n\n\n\u201cNow let\u2019s test if it gets the answer. Type \nprint(answer)\n\u201c\n\n\n>>> \nprint\n(\nanswer\n)\n\n\ncoffee\n\n\n>>> \n\n\n\n\n\n\u201cIt works!\u201d, Erik was happy. One thing is to do course exercises in their sandbox environment and another thing is to get something working on your own computer. More than that\u2014it\u2019s not just an \nexercise\n, you are working on your own project!\n\n\nMore options\n\n\n\u201cWell, it works,\u201d I said. \u201cWhat were your other components?\u201d\n\n\n\u201cI asked them which flavor they want and also which topping.\u201d\n\n\n\u201cGo ahead and ask those questions with Python. But you will need more variables, right? This time let\u2019s use \nflavor\n and \ntopping\n, okay?\u201d\n\n\n\u201cOkay,\u201d said Erik and typed:\n\n\n>>> \nflavor\n \n=\n \ninput\n(\n\"What flavor do you want?\"\n)\n\n\nWhat flavor do you want?strawberry\n\n\n>>> \ntopping\n \n=\n \ninput\n(\n\"What topping do you want?\"\n)\n\n\nWhat topping do you want?chocolate\n\n\n>>> \n\n\n\n\n\n\u201cGood. Now test the variables if you get the order right.\u201d\n\n\n>>> \nprint\n(\nflavor\n)\n\n\nstrawberry\n\n\n>>> \nprint\n(\ntopping\n)\n\n\nchocolate\n\n\n>>> \n\n\n\n\n\n\u201cNow you can type something like: \u2018You have ordered coffee with strawberry flavor and chocolate topping,\u201d said I and thought to myself: \u201cHow could they even drink this??? Coffee with strawberry?? I don\u2019t understand\u2026\u201d\n\n\n\u201cI don\u2019t remember how to do it with \nprint\n. Can I google it?\u201d\n\n\n\u201cOf course! It\u2019s not a test, it\u2019s your own project. Go ahead!\u201d\n\n\nIn a couple of minutes Erik found the right example and typed:\n\n\n>>> \nprint\n(\n\"You have ordered \"\n,\n \nanswer\n,\n \n\" with \"\n,\n \nflavor\n,\n \n\" flavor and \"\n,\n \ntopping\n,\n \n\" topping. Thanks!\"\n)\n\n\nYou have ordered  coffee  with  strawberry  flavor and  chocolate  topping. Thanks!\n\n\n>>> \n\n\n\n\n\n\u201cCool! It works like a real thing! But how can I save it as a program to run it again?\u201d\n\n\n\u201cGood question. And just in time. I was just going to switch to the editor. Open some text editor.\u201d\n\n\n\u201cLike LibreOffice?\u201d\n\n\n\u201cNo, LibreOffice is not good for that. You need a \ntext\n editor, not a word processor. Something like \ngedit\n will work perfectly. Later you will discover Atom, Sublime Text and, maybe, even Vim.\u201d\n\n\nFirst script\n\n\n\u201cLet\u2019s start with something simple, just to try it. You know it\u2019s a long tradition that the first program people write in any language is \u2018Hello, World!\u2019. Let\u2019s follow the tradition.\u201d\n\n\n\u201cBut I wrote \u2018Hello, World\u2019 already in my online Python class!\u201d\n\n\n\u201cWell, but you haven\u2019t tried it yet on your own computer, have you? If you have already done it in that class, it must be easy for you now.\u201d\n\n\nErik opened a new file in \ngedit\n and wrote:\n\n\nprint\n(\n'Hello, World'\n)\n\n\n\n\n\n\u201cGood,\u201d said I. \u201cNow let\u2019s run it. Save the file with any name, just make sure it ends with \n.py\n. Then go to the terminal and type \npython3\n and the name of your file.\u201d\n\n\nHe typed:\n\n\nerik@idea:~$\n python3 hello.py\n\nHello, World\n\n\n\n\n\n\u201cIt works!\u201d said Erik. \n\n\n\u201cOf course, it works, why shouldn\u2019t it? That was easy. Now let\u2019s make two things which will convert our script into an application. First, place the following string in the very beginning of your script: \n#!/usr/bin/python3\n. This will tell Linux that it\u2019s a Python script and that we want to use Python 3 for it. Second, go to the terminal and make this script executable.\u201d\n\n\n\u201cHow do I do that?\u201d\n\n\n\u201cYeah, it seems you need another course, on Linux basic commands\u2026 Okay, this time I will help you. Type \nchmod a+x hello.py\n. After that you will be able to run your script without \npython3\n in front of it, just like this \n./hello.py\n. \u201c\n\n\n\u201cAnd what does this \u2018dot-slash\u2019 mean?\u201d\n\n\n\u201cIt means that you want to run \nthis particular\n application in your current directory, and not something else. But this is part of \u2018Linux basics\u2019, we will discuss it later.\u201d\n\n\nAfter Erik has done these two steps, he tried to run the application:\n\n\nerik@idea:~$\n ./hello.py\n\nHello, World\n\n\n\n\n\n\u201cGreat, now you can run it as any other application. Congratulations, you\u2019ve created your first application!\u201d\n\n\n\u201cBut that was very simple. I want to work on my Coffee Shop application!\u201d\n\n\n\u201cLet\u2019s take a break and continue tomorrow, okay?\u201d",
            "title": "Day 0 - Hello, World"
        },
        {
            "location": "/Python_vacation_day0/index.html#python-vacation-day-0",
            "text": "It all started on 4 th  of July. My 13-year old son came home with an idea.   \u201cI want to treat my neighborhood friends with Frappuccino to celebrate Independence Day!\u201d said Erik.  \u201cGood idea! Do you have everything you need?\u201d  \u201cYes, I have coffee, I have chocolate, I have several flavors to add and I have chocolate cream for toppings! I will take orders on my iPad and prepare them here. Just a moment!\u201d and off he went.  He came back with notes on his iPad, prepared six drinks for his friends and left again.  \u201cWasn\u2019t it a good idea?\u201d he asked me when he came home with six empty plastic cups. \u201cYes, great idea,\u201d said I. \u201cBut\u2026\u201d  \u201cWhat \u2018BUT\u2019??\u201d said Erik.  \u201cYou see, you used your iPad to take orders, but you used it just as a notepad. It would be much easier to take just a notepad and a pencil with you for that. With iPad you can do it in much better way\u2026\u201d  \u201cHow?\u201d  \u201cYou could create a small application to take orders where you or your friends would just click on the available choices for flavors and toppings.\u201d  \u201cLike radio buttons, right?\u201d  \u201cYes, something like that. You\u2019ve taken that Python course at Codeacademy haven\u2019t you? Don\u2019t you want to create something real with Python, rather than doing exercises in their sandbox?\u201d  \u201cYes, that would be cool!\u201d said Erik. \u201cBut it must be difficult\u2014to make it look like a real online coffee shop\u2026\u201d  \u201cDon\u2019t worry, we\u2019ll do it step by step. Open your laptop and start a terminal.\u201d  I have to admit, my son uses Linux on his laptop. I know, it\u2019s torture for a 13-year old, but my way of thinking was: \u201cHe will learn Windows or Mac OS later anyway\u2014at school or with friends. I\u2019ll give him a chance to work with Linux at home. It won\u2019t hurt to know a bit of Linux.\u201d",
            "title": "Python Vacation -- Day 0"
        },
        {
            "location": "/Python_vacation_day0/index.html#first-lines-of-code",
            "text": "\u201cIn the terminal type \u2018python3\u2019,\u201d I said to Erik. Yes, I know there is a never-ending discussion \u201cPython 2 vs. Python 3\u201d, but at least it seems there is a consensus that if you are just starting learning Python, it\u2019s better to start with Python 3. You mileage may vary, of course.   erik@idea:~$  python3 Python 3.5.2 (default, Nov 17 2016, 17:05:23)   [GCC 5.4.0 20160609] on linux  Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.   >>>    \u201cDone. What\u2019s next?\u201d asked my son.  \u201cWell, we want to take orders, right? So we have to ask our customers what they want. And get some  input  from them, right? What did you start with when taking orders from your friends?\u201d  \u201cI asked them if they want coffee or chocolate. Some of them are young and they don\u2019t drink coffee.\u201d  \u201cOkay, let\u2019s do that. Do you remember how to ask for input in Python?\u201d  \u201cBarely\u2026\u201d  \u201cWell, I\u2019ll help you. There is a function called  input() . It can ask a question and you put this question in quotes into parenthesis. And then the function waits for the user to type something and press  Enter . After that the function  returns  a value. You can take that value and assign it to a variable. \u201c  Erik\u2019s face showed that he is beginning to recall something from that Python course. Suddenly there was a connection between abstract things like  functions  and his friends and cups of Frappuccino. \u201cAnd to assign something to a variable I type its name and then \u2018equal\u2019 sign and then the value, right?\u201d  \u201cExactly! Go ahead. Let\u2019s name that variable  answer  and assign to it what we get from the  input()  function. How would you write it?\u201d  >>>  answer   =   input ()   \u201cNothing happened,\u201d said Erik.  \u201cWhat did you expect?\u201d  \u201cI thought it will ask me what I want\u2026\u201d  \u201cRemember: computer only does what you tell it to do. Did you tell it to ask you a question?\u201d  \u201cNo\u2026 A-ha, I know! You said that I have to put the question between the parethesis. But what should I do now. It doesn\u2019t show the prompt.\u201d  \u201cIt\u2019s because it is waiting for your input. Say something and press  Enter \u201c  coffee  >>>    \u201cNow type this  input()  function again, but with a question.\u201d  >>>  answer   =   input ( \"Do you want coffee or chocolate?\" )  Do you want coffee or chocolate?coffee  >>>    \u201cNow let\u2019s test if it gets the answer. Type  print(answer) \u201c  >>>  print ( answer )  coffee  >>>    \u201cIt works!\u201d, Erik was happy. One thing is to do course exercises in their sandbox environment and another thing is to get something working on your own computer. More than that\u2014it\u2019s not just an  exercise , you are working on your own project!",
            "title": "First lines of code"
        },
        {
            "location": "/Python_vacation_day0/index.html#more-options",
            "text": "\u201cWell, it works,\u201d I said. \u201cWhat were your other components?\u201d  \u201cI asked them which flavor they want and also which topping.\u201d  \u201cGo ahead and ask those questions with Python. But you will need more variables, right? This time let\u2019s use  flavor  and  topping , okay?\u201d  \u201cOkay,\u201d said Erik and typed:  >>>  flavor   =   input ( \"What flavor do you want?\" )  What flavor do you want?strawberry  >>>  topping   =   input ( \"What topping do you want?\" )  What topping do you want?chocolate  >>>    \u201cGood. Now test the variables if you get the order right.\u201d  >>>  print ( flavor )  strawberry  >>>  print ( topping )  chocolate  >>>    \u201cNow you can type something like: \u2018You have ordered coffee with strawberry flavor and chocolate topping,\u201d said I and thought to myself: \u201cHow could they even drink this??? Coffee with strawberry?? I don\u2019t understand\u2026\u201d  \u201cI don\u2019t remember how to do it with  print . Can I google it?\u201d  \u201cOf course! It\u2019s not a test, it\u2019s your own project. Go ahead!\u201d  In a couple of minutes Erik found the right example and typed:  >>>  print ( \"You have ordered \" ,   answer ,   \" with \" ,   flavor ,   \" flavor and \" ,   topping ,   \" topping. Thanks!\" )  You have ordered  coffee  with  strawberry  flavor and  chocolate  topping. Thanks!  >>>    \u201cCool! It works like a real thing! But how can I save it as a program to run it again?\u201d  \u201cGood question. And just in time. I was just going to switch to the editor. Open some text editor.\u201d  \u201cLike LibreOffice?\u201d  \u201cNo, LibreOffice is not good for that. You need a  text  editor, not a word processor. Something like  gedit  will work perfectly. Later you will discover Atom, Sublime Text and, maybe, even Vim.\u201d",
            "title": "More options"
        },
        {
            "location": "/Python_vacation_day0/index.html#first-script",
            "text": "\u201cLet\u2019s start with something simple, just to try it. You know it\u2019s a long tradition that the first program people write in any language is \u2018Hello, World!\u2019. Let\u2019s follow the tradition.\u201d  \u201cBut I wrote \u2018Hello, World\u2019 already in my online Python class!\u201d  \u201cWell, but you haven\u2019t tried it yet on your own computer, have you? If you have already done it in that class, it must be easy for you now.\u201d  Erik opened a new file in  gedit  and wrote:  print ( 'Hello, World' )   \u201cGood,\u201d said I. \u201cNow let\u2019s run it. Save the file with any name, just make sure it ends with  .py . Then go to the terminal and type  python3  and the name of your file.\u201d  He typed:  erik@idea:~$  python3 hello.py Hello, World   \u201cIt works!\u201d said Erik.   \u201cOf course, it works, why shouldn\u2019t it? That was easy. Now let\u2019s make two things which will convert our script into an application. First, place the following string in the very beginning of your script:  #!/usr/bin/python3 . This will tell Linux that it\u2019s a Python script and that we want to use Python 3 for it. Second, go to the terminal and make this script executable.\u201d  \u201cHow do I do that?\u201d  \u201cYeah, it seems you need another course, on Linux basic commands\u2026 Okay, this time I will help you. Type  chmod a+x hello.py . After that you will be able to run your script without  python3  in front of it, just like this  ./hello.py . \u201c  \u201cAnd what does this \u2018dot-slash\u2019 mean?\u201d  \u201cIt means that you want to run  this particular  application in your current directory, and not something else. But this is part of \u2018Linux basics\u2019, we will discuss it later.\u201d  After Erik has done these two steps, he tried to run the application:  erik@idea:~$  ./hello.py Hello, World   \u201cGreat, now you can run it as any other application. Congratulations, you\u2019ve created your first application!\u201d  \u201cBut that was very simple. I want to work on my Coffee Shop application!\u201d  \u201cLet\u2019s take a break and continue tomorrow, okay?\u201d",
            "title": "First script"
        },
        {
            "location": "/Python_vacation_day1/index.html",
            "text": "Python Vacation \u2013 Day 1\n\n\nText dialogs\n\n\nNext day we decided to get right to the Coffee Shop application. Erik has done enough simple exercises already and was eager to write something really useful.\n\n\n\u201cRemember what we did yesterday to take orders from the customers?\u201d\n\n\n\u201cYes, we used the \ninput()\n function.\u201d\n\n\n\u201cAnd then?\u201d\n\n\n\u201cAnd then we saved the input to a variable and then printed it like \u2018You\u2019ve ordered this and that\u2019. \u201c\n\n\n\u201cOkay, good. Now let\u2019s do the same thing in the script. Open a new file and save it right away\u2013you know, I don\u2019t like when you have a bunch of files called \nUntitled\n in your home directory.\u201d\n\n\nErik created a file and saved it as \ncoffeeshop.py\n.\n\n\n\u201cWhat should be in the beginning of each Python script?\u201d asked I.\n\n\n\u201cSomething about python3 with some cryptic letters in the beginning. Let me check in my \nhello.py\n file. Oh, right, it should be \n#!/usr/bin/python3\n. \u201c\n\n\n\u201cYou\u2019re right! I\u2019m sure pretty soon you will write it automatically, without a cheat sheet! Now write the \ninput()\n dialog, like you did yesterday in the console session. Remember?\u201d\n\n\n\u201cYes!\u201d said he and started typing. A couple minutes later he showed me the script.\n\n\n#!/usr/bin/python3\n\n\nanswer\n \n=\n \ninput\n(\n\"Do you want coffee or chocolate?\"\n)\n\n\nflavor\n \n=\n \ninput\n(\n\"What flavor do you want?\"\n)\n\n\ntopping\n \n=\n \ninput\n(\n\"What topping do you want?\"\n)\n\n\nprint\n(\n\"You have ordered \"\n,\n \nanswer\n,\n \n\" with \"\n,\n \nflavor\n,\n \n\" flavor and \"\n,\n \ntopping\n,\n \n\" topping. Thanks!\"\n)\n\n\n\n\n\n\u201cGood. Let\u2019s run it! Remember what to do? You have already placed the python3 string in the beginning, now you just have to do \nchmod a+x coffeeshop.py\n. Go ahead and then run the script.\u201d\n\n\nerik@idea:~$\n chmod a+x coffeeshop.py\n\nerik@idea:~$\n ./coffeeshop.py\n\nDo you want coffee or chocolate?coffee\n\n\nWhat flavor do you want?strawberry\n\n\nWhat topping do you want?chocolate\n\n\nYou have ordered coffee with strawberry flavor and chocolate topping. Thanks!\n\n\nerik@idea:~$\n \n\n\n\n\n\u201cWow, it really works! Great job, Erik!\u201d\n\n\n\u201cYeah, I copy-pasted the commands from our yesterday session. I didn\u2019t close that window,\u201d and he smiled as if he has cheated a little.\n\n\n\u201cThat\u2019s okay,\u201d said I. \u201cThere is a saying among programmers: \u201cDRY - Don\u2019t Repeat Yourself.\u201d So there is nothing wrong with reusing your own work. Now let\u2019s see how we can improve it. What do you think?\u201d\n\n\n\u201cI see that they can order a flavor or topping which I don\u2019t have. And also I think it takes too long to type \nstrawberry\n.\u201d\n\n\n\u201cSo, what would be your solution?\u201d I asked.\n\n\n\u201cI would give them a list of flavors and toppings to choose from and ask to type a letter.\u201d\n\n\n\u201cGood solution. But there could be different flavors with the same first letter\u2026 For simplicity let\u2019s use numbers. Like if you want strawberry flavor, press \u20182\u2019 or something like that. Will this work for you?\u201d\n\n\n\u201cYes, that\u2019s okay,\u201d said Erik. \u201cWhat should I do now?\u201d\n\n\n\u201cFirst, I think we have to create lists of your flavors and toppings. And I think your base product\u2013coffee or chocolate\u2013should also be a list. Do you remember how to create lists in Python?\u201d\n\n\n\u201cWith square brackets?\u201d\n\n\n\u201cYes! And don\u2019t forget that each element inside the brackets should be in quotes. Single quotes or double quotes\u2013whatever you prefer. Let\u2019s put the lists in the beginning of the script. Right after the first line make an empty line and put your lists after it.\u201d\n\n\n\u201cOkay,\u201d he said and typed:\n\n\n#!/usr/bin/python3\n\n\n\nproducts\n \n=\n \n[\n\"chocolate\"\n,\n \n\"coffee\"\n]\n\n\nflavors\n \n=\n \n[\n\"caramel\"\n,\n\"butterscotch\"\n,\n\"strawberry\"\n,\n\"raspberry\"\n,\n\"blueberry\"\n,\n\"marshmallow\"\n,\n\"plain\"\n]\n\n\ntoppings\n \n=\n \n[\n\"chocolate\"\n,\n \n\"sweetstrawberry\"\n,\n \n\"caramel\"\n]\n\n\n\n\n\n\u201cGood, but let\u2019s make a little bit better. Remember, in Python we want to make programs readable. We are very specific when it comes to spaces, tabs, indents. There is even a document which tells people how to make code more readable. It\u2019s highly recommended to follow some simple rules. For example, one of the rules is not to make lines longer than 80 characters. You see, in your code the \nflavors\n list is too long. Why don\u2019t we place every flavor on a separate line? Just make sure they are placed one under another. With \ngedit\n you will use spaces, but other editors usually do it for you.\u201d\n\n\nAfter tapping [Space] and [Enter] several tiems Erik came up with this:\n\n\nproducts\n \n=\n \n[\n\"chocolate\"\n,\n \n\"coffee\"\n]\n\n\nflavors\n \n=\n \n[\n\"caramel\"\n,\n\n           \n\"butterscotch\"\n,\n\n           \n\"strawberry\"\n,\n\n           \n\"raspberry\"\n,\n\n           \n\"blueberry\"\n,\n\n           \n\"sweetstrawberry\"\n,\n\n           \n\"marshmallow\"\n,\n\n           \n\"plain\"\n]\n\n\ntoppings\n \n=\n \n[\n\"chocolate\"\n,\n \n\"sweetstrawberry\"\n,\n \n\"caramel\"\n]\n\n\n\n\n\n\u201cMuch, much better,\u201d said I. \u201cAlso, as we are talking about readability, let\u2019s rename the variable \nanswer\n to \nproduct\n. It will make more sense, do you agree?\u201d\n\n\n\u201cOkay, done. What\u2019s next? Somehow I should print products, flavors and toppings and then ask for input, right?\u201d\n\n\n\u201cAbsolutely right! How do you print a list line by line? What in Python can do things several times in a row?\u201d\n\n\n\u201cA loop?\u201d\n\n\n\u201cRight, a loop. But which loop? What kinds of loops do you know in Python?\u201d\n\n\n\u201cI remember there is a \nwhile\n loop and a \nfor\n loop.\u201d\n\n\n\u201cRight. And what is the difference between them? Which one can help us here with lists?\u201d\n\n\n\u201cI remember that \nwhile\n loop you can run forever. And \nfor\n loop you repeat step by step several times, \u201d said Erik.\n\n\n\u201cSo, how do you do something with every element in a list in Python? Like print it, for example. You can Google it, not a problem.\u201d\n\n\nHe opened a new tab and asked Google: \npython loop list\n. After going through several sites he finally found this page: (\nhttp://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python/\n) and typed right after the list definitions in his script:\n\n\nfor\n \np\n \nin\n \nproducts\n:\n\n    \nprint\n(\np\n)\n\n\n\n\n\n\u201cLooks good to me. Now try to run it and if it works, do the same for other lists.\u201d\n\n\nerik@idea:~$\n ./coffeeshop.py\n\nchocolate\n\n\ncoffee\n\n\nDo you want coffee or chocolate?\n\n\n\n\n\n\u201cYou can stop it with [Ctrl]-[C] now. We are not going to go through all the dialogs again. We are going to re-write it now,\u201d said I. \u201cRemember, you were going to make it like a menu with letters or numbers?\u201d\n\n\n\u201cYes, and you said that numbers would be a better choice. But I didn\u2019t understand why.\u201d\n\n\n\u201cWell, first, I said that it\u2019s quite possible that you have two flavors with names beginning with the same letter. Second, with letters we would have to write many \nif\ns, like \u201cif the user presses \u2018S\u2019 that means \u2018strawberry\u2019 and others. Third, adding a new flavor would mean that we have to write a new \nif\n. Let\u2019s start simple, with numbers. You would say \u2018for strawberry press 2\u2019 and then strawberry would be the \nsecond\n element in your list. Much easier, right?\u201d\n\n\n\u201cSo, I should print numbers and their list entries, right? I remember I can use the \nrange()\n function to print a list of numbers.\u201d\n\n\n\u201cRight. But there is a better, more \nPythonic\n way of doing this. Take a look at the page you\u2019ve just found. They mention the construct called \nenumerate\n. I think this is what we can use here.\u201d\n\n\nErik scanned the page (\nhttp://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python/\n) and found the \nenumerate\n example. In our case the task was even simpler than in the example so he quickly wrote this:\n\n\nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n):\n\n    \nprint\n(\ni\n,\n \nproduct\n)\n\n\n\n\n\nHe tried to run it and got this:\n\n\n0 chocolate\n1 coffee\n\n\n\n\n\u201cBut it starts with zero!\u201d said Erik. \u201cA-ha, I understand, it\u2019s because indexes in Python start with zero.\u201d\n\n\n\u201cGreat that you remember that! It\u2019s one of the most fundamental concepts in programming! Of course, I\u2019m joking, but only partly joking,\u201d said I. \u201cYou can chage that. Smart people, who wrote the \nenumerate()\n function, predicted that somebody will need to show such a list to non-programmers and start it with \u20181\u2019. So you can add this parameter right after \nflavors\n: add a comma and type \nstart=1\n.\u201d\n\n\nErik changed his code to this:\n\n\nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nproduct\n)\n\n\n\n\n\nand got the expected result:\n\n\n1 chocolate\n2 coffee\n\n\n\u201cWell done!\u201d said I. \u201cNow add the same thing to other lists: flavors and toppings. After that let\u2019s take a break. Tomorrow we\u2019ll work with menus.\u201d\n\n\nHe worked for a while and here is what he\u2019s got:\n\n\n#!/usr/bin/python3\n\n\n\nproducts\n \n=\n \n[\n\"chocolate\"\n,\n \n\"coffee\"\n]\n\n\nflavors\n \n=\n \n[\n\"caramel\"\n,\n\n           \n\"butterscotch\"\n,\n\n           \n\"strawberry\"\n,\n\n           \n\"raspberry\"\n,\n\n           \n\"blueberry\"\n,\n\n           \n\"sweetstrawberry\"\n,\n\n           \n\"marshmallow\"\n,\n\n           \n\"plain\"\n]\n\n\ntoppings\n \n=\n \n[\n\"chocolate\"\n,\n \n\"sweetstrawberry\"\n,\n \n\"caramel\"\n]\n\n\n\nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nproduct\n)\n\n\n\nfor\n \ni\n,\n \nflavor\n \nin\n \nenumerate\n(\nflavors\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nflavor\n)\n\n\n\nfor\n \ni\n,\n \ntopping\n \nin\n \nenumerate\n(\ntoppings\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \ntopping\n)\n\n\n\n\n\nHe ran the script and got the expected result:\n\n\nerik@idea:~$\n ./coffeeshop.py\n\n1 chocolate\n\n\n2 coffee\n\n\n1 caramel\n\n\n2 butterscotch\n\n\n3 strawberry\n\n\n4 raspberry\n\n\n5 blueberry\n\n\n6 sweetstrawberry\n\n\n7 marshmallow\n\n\n8 plain\n\n\n1 chocolate\n\n\n2 sweetstrawberry\n\n\n3 caramel",
            "title": "Day 1 - Text Dialogues"
        },
        {
            "location": "/Python_vacation_day1/index.html#python-vacation-day-1",
            "text": "",
            "title": "Python Vacation -- Day 1"
        },
        {
            "location": "/Python_vacation_day1/index.html#text-dialogs",
            "text": "Next day we decided to get right to the Coffee Shop application. Erik has done enough simple exercises already and was eager to write something really useful.  \u201cRemember what we did yesterday to take orders from the customers?\u201d  \u201cYes, we used the  input()  function.\u201d  \u201cAnd then?\u201d  \u201cAnd then we saved the input to a variable and then printed it like \u2018You\u2019ve ordered this and that\u2019. \u201c  \u201cOkay, good. Now let\u2019s do the same thing in the script. Open a new file and save it right away\u2013you know, I don\u2019t like when you have a bunch of files called  Untitled  in your home directory.\u201d  Erik created a file and saved it as  coffeeshop.py .  \u201cWhat should be in the beginning of each Python script?\u201d asked I.  \u201cSomething about python3 with some cryptic letters in the beginning. Let me check in my  hello.py  file. Oh, right, it should be  #!/usr/bin/python3 . \u201c  \u201cYou\u2019re right! I\u2019m sure pretty soon you will write it automatically, without a cheat sheet! Now write the  input()  dialog, like you did yesterday in the console session. Remember?\u201d  \u201cYes!\u201d said he and started typing. A couple minutes later he showed me the script.  #!/usr/bin/python3  answer   =   input ( \"Do you want coffee or chocolate?\" )  flavor   =   input ( \"What flavor do you want?\" )  topping   =   input ( \"What topping do you want?\" )  print ( \"You have ordered \" ,   answer ,   \" with \" ,   flavor ,   \" flavor and \" ,   topping ,   \" topping. Thanks!\" )   \u201cGood. Let\u2019s run it! Remember what to do? You have already placed the python3 string in the beginning, now you just have to do  chmod a+x coffeeshop.py . Go ahead and then run the script.\u201d  erik@idea:~$  chmod a+x coffeeshop.py erik@idea:~$  ./coffeeshop.py Do you want coffee or chocolate?coffee  What flavor do you want?strawberry  What topping do you want?chocolate  You have ordered coffee with strawberry flavor and chocolate topping. Thanks!  erik@idea:~$    \u201cWow, it really works! Great job, Erik!\u201d  \u201cYeah, I copy-pasted the commands from our yesterday session. I didn\u2019t close that window,\u201d and he smiled as if he has cheated a little.  \u201cThat\u2019s okay,\u201d said I. \u201cThere is a saying among programmers: \u201cDRY - Don\u2019t Repeat Yourself.\u201d So there is nothing wrong with reusing your own work. Now let\u2019s see how we can improve it. What do you think?\u201d  \u201cI see that they can order a flavor or topping which I don\u2019t have. And also I think it takes too long to type  strawberry .\u201d  \u201cSo, what would be your solution?\u201d I asked.  \u201cI would give them a list of flavors and toppings to choose from and ask to type a letter.\u201d  \u201cGood solution. But there could be different flavors with the same first letter\u2026 For simplicity let\u2019s use numbers. Like if you want strawberry flavor, press \u20182\u2019 or something like that. Will this work for you?\u201d  \u201cYes, that\u2019s okay,\u201d said Erik. \u201cWhat should I do now?\u201d  \u201cFirst, I think we have to create lists of your flavors and toppings. And I think your base product\u2013coffee or chocolate\u2013should also be a list. Do you remember how to create lists in Python?\u201d  \u201cWith square brackets?\u201d  \u201cYes! And don\u2019t forget that each element inside the brackets should be in quotes. Single quotes or double quotes\u2013whatever you prefer. Let\u2019s put the lists in the beginning of the script. Right after the first line make an empty line and put your lists after it.\u201d  \u201cOkay,\u201d he said and typed:  #!/usr/bin/python3  products   =   [ \"chocolate\" ,   \"coffee\" ]  flavors   =   [ \"caramel\" , \"butterscotch\" , \"strawberry\" , \"raspberry\" , \"blueberry\" , \"marshmallow\" , \"plain\" ]  toppings   =   [ \"chocolate\" ,   \"sweetstrawberry\" ,   \"caramel\" ]   \u201cGood, but let\u2019s make a little bit better. Remember, in Python we want to make programs readable. We are very specific when it comes to spaces, tabs, indents. There is even a document which tells people how to make code more readable. It\u2019s highly recommended to follow some simple rules. For example, one of the rules is not to make lines longer than 80 characters. You see, in your code the  flavors  list is too long. Why don\u2019t we place every flavor on a separate line? Just make sure they are placed one under another. With  gedit  you will use spaces, but other editors usually do it for you.\u201d  After tapping [Space] and [Enter] several tiems Erik came up with this:  products   =   [ \"chocolate\" ,   \"coffee\" ]  flavors   =   [ \"caramel\" , \n            \"butterscotch\" , \n            \"strawberry\" , \n            \"raspberry\" , \n            \"blueberry\" , \n            \"sweetstrawberry\" , \n            \"marshmallow\" , \n            \"plain\" ]  toppings   =   [ \"chocolate\" ,   \"sweetstrawberry\" ,   \"caramel\" ]   \u201cMuch, much better,\u201d said I. \u201cAlso, as we are talking about readability, let\u2019s rename the variable  answer  to  product . It will make more sense, do you agree?\u201d  \u201cOkay, done. What\u2019s next? Somehow I should print products, flavors and toppings and then ask for input, right?\u201d  \u201cAbsolutely right! How do you print a list line by line? What in Python can do things several times in a row?\u201d  \u201cA loop?\u201d  \u201cRight, a loop. But which loop? What kinds of loops do you know in Python?\u201d  \u201cI remember there is a  while  loop and a  for  loop.\u201d  \u201cRight. And what is the difference between them? Which one can help us here with lists?\u201d  \u201cI remember that  while  loop you can run forever. And  for  loop you repeat step by step several times, \u201d said Erik.  \u201cSo, how do you do something with every element in a list in Python? Like print it, for example. You can Google it, not a problem.\u201d  He opened a new tab and asked Google:  python loop list . After going through several sites he finally found this page: ( http://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python/ ) and typed right after the list definitions in his script:  for   p   in   products : \n     print ( p )   \u201cLooks good to me. Now try to run it and if it works, do the same for other lists.\u201d  erik@idea:~$  ./coffeeshop.py chocolate  coffee  Do you want coffee or chocolate?   \u201cYou can stop it with [Ctrl]-[C] now. We are not going to go through all the dialogs again. We are going to re-write it now,\u201d said I. \u201cRemember, you were going to make it like a menu with letters or numbers?\u201d  \u201cYes, and you said that numbers would be a better choice. But I didn\u2019t understand why.\u201d  \u201cWell, first, I said that it\u2019s quite possible that you have two flavors with names beginning with the same letter. Second, with letters we would have to write many  if s, like \u201cif the user presses \u2018S\u2019 that means \u2018strawberry\u2019 and others. Third, adding a new flavor would mean that we have to write a new  if . Let\u2019s start simple, with numbers. You would say \u2018for strawberry press 2\u2019 and then strawberry would be the  second  element in your list. Much easier, right?\u201d  \u201cSo, I should print numbers and their list entries, right? I remember I can use the  range()  function to print a list of numbers.\u201d  \u201cRight. But there is a better, more  Pythonic  way of doing this. Take a look at the page you\u2019ve just found. They mention the construct called  enumerate . I think this is what we can use here.\u201d  Erik scanned the page ( http://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python/ ) and found the  enumerate  example. In our case the task was even simpler than in the example so he quickly wrote this:  for   i ,   product   in   enumerate ( products ): \n     print ( i ,   product )   He tried to run it and got this:  0 chocolate\n1 coffee  \u201cBut it starts with zero!\u201d said Erik. \u201cA-ha, I understand, it\u2019s because indexes in Python start with zero.\u201d  \u201cGreat that you remember that! It\u2019s one of the most fundamental concepts in programming! Of course, I\u2019m joking, but only partly joking,\u201d said I. \u201cYou can chage that. Smart people, who wrote the  enumerate()  function, predicted that somebody will need to show such a list to non-programmers and start it with \u20181\u2019. So you can add this parameter right after  flavors : add a comma and type  start=1 .\u201d  Erik changed his code to this:  for   i ,   product   in   enumerate ( products ,   start = 1 ): \n     print ( i ,   product )   and got the expected result:  1 chocolate\n2 coffee \n\u201cWell done!\u201d said I. \u201cNow add the same thing to other lists: flavors and toppings. After that let\u2019s take a break. Tomorrow we\u2019ll work with menus.\u201d  He worked for a while and here is what he\u2019s got:  #!/usr/bin/python3  products   =   [ \"chocolate\" ,   \"coffee\" ]  flavors   =   [ \"caramel\" , \n            \"butterscotch\" , \n            \"strawberry\" , \n            \"raspberry\" , \n            \"blueberry\" , \n            \"sweetstrawberry\" , \n            \"marshmallow\" , \n            \"plain\" ]  toppings   =   [ \"chocolate\" ,   \"sweetstrawberry\" ,   \"caramel\" ]  for   i ,   product   in   enumerate ( products ,   start = 1 ): \n     print ( i ,   product )  for   i ,   flavor   in   enumerate ( flavors ,   start = 1 ): \n     print ( i ,   flavor )  for   i ,   topping   in   enumerate ( toppings ,   start = 1 ): \n     print ( i ,   topping )   He ran the script and got the expected result:  erik@idea:~$  ./coffeeshop.py 1 chocolate  2 coffee  1 caramel  2 butterscotch  3 strawberry  4 raspberry  5 blueberry  6 sweetstrawberry  7 marshmallow  8 plain  1 chocolate  2 sweetstrawberry  3 caramel",
            "title": "Text dialogs"
        },
        {
            "location": "/Python_vacation_day2/index.html",
            "text": "Python Vacation \u2013 Day 2\n\n\nMenus\n\n\nNext day we started with refreshing our recently acquired Python skills. \n\n\n\u201cSo, what have we learned yesterday?\u201d I asked Erik.\n\n\n\u201cLists! And \nenumerate()\n!\u201d he answered quickly. \n\n\n\u201cRight, that was your last script that used \nenumerate()\n. What else? Do you remember what we started with?\u201d\n\n\n\u201cYes, I remember: we worked with \ninput()\n. We tried to ask questions like \u2018What flavor do you want?\u2019. But then we decided that menus will work better because people won\u2019t order something we don\u2019t have.\u201d\n\n\n\u201cYes, that\u2019s right. Now after we have learned how to print out lists and also lists with numbers, we can just add what we learned about \ninput()\n and create our first menu. Why don\u2019t you add \ninput()\n after you have listed the choices and get the number your customer pressed? Remember, you have to assign the user\u2019s input to a variable? When you got the input, you can print it out.\u201d\n\n\n\u201cOkay,\u201d said Erik and started typing. Here is what he\u2019s got:\n\n\n#!/usr/bin/python3\n\n\n\nproducts\n \n=\n \n[\n\"chocolate\"\n,\n \n\"coffee\"\n]\n\n\nflavors\n \n=\n \n[\n\"caramel\"\n,\n\n           \n\"butterscotch\"\n,\n\n           \n\"strawberry\"\n,\n\n           \n\"raspberry\"\n,\n\n           \n\"blueberry\"\n,\n\n           \n\"sweetstrawberry\"\n,\n\n           \n\"marshmallow\"\n,\n\n           \n\"plain\"\n]\n\n\ntoppings\n \n=\n \n[\n\"chocolate\"\n,\n \n\"sweetstrawberry\"\n,\n \n\"caramel\"\n]\n\n\n\nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nproduct\n)\n\n\np\n \n=\n \ninput\n()\n\n\nprint\n(\np\n)\n\n\n\nfor\n \ni\n,\n \nflavor\n \nin\n \nenumerate\n(\nflavors\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nflavor\n)\n\n\nf\n \n=\n \ninput\n()\n\n\nprint\n(\nf\n)\n\n\n\nfor\n \ni\n,\n \ntopping\n \nin\n \nenumerate\n(\ntoppings\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \ntopping\n)\n\n\nt\n \n=\n \ninput\n()\n\n\nprint\n(\nt\n)\n\n\n\n\n\nHe saved the file and ran it in the terminal:\n\n\nerik@idea:~$\n ./coffeeshop.py\n\n1 chocolate\n\n\n2 coffee\n\n\n2\n\n\n2\n\n\n1 caramel\n\n\n2 butterscotch\n\n\n3 strawberry\n\n\n4 raspberry\n\n\n5 blueberry\n\n\n6 sweetstrawberry\n\n\n7 marshmallow\n\n\n8 plain\n\n\n7\n\n\n7\n\n\n1 chocolate\n\n\n2 sweetstrawberry\n\n\n3 caramel\n\n\n1\n\n\n1\n\n\n\n\n\n\u201cThis is good, but in reality you wanted to print out something like \u2018Here is your order: base product: coffee, flavor: marshmallow, topping: chocolate\u2019, right? How would you get products and flavors from the numbers?\u201d\n\n\n\u201cYes, you told me yesterday! We\u2019ll use them as list indexes!\u201d\n\n\n\u201cGo ahead!\u201d\n\n\nErik came up with this script:\n\n\n#!/usr/bin/python3\n\n\n\nproducts\n \n=\n \n[\n\"chocolate\"\n,\n \n\"coffee\"\n]\n\n\nflavors\n \n=\n \n[\n\"caramel\"\n,\n\n           \n\"butterscotch\"\n,\n\n           \n\"strawberry\"\n,\n\n           \n\"raspberry\"\n,\n\n           \n\"blueberry\"\n,\n\n           \n\"sweetstrawberry\"\n,\n\n           \n\"marshmallow\"\n,\n\n           \n\"plain\"\n]\n\n\ntoppings\n \n=\n \n[\n\"chocolate\"\n,\n \n\"sweetstrawberry\"\n,\n \n\"caramel\"\n]\n\n\n\nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nproduct\n)\n\n\np\n \n=\n \ninput\n()\n\n\n\nfor\n \ni\n,\n \nflavor\n \nin\n \nenumerate\n(\nflavors\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nflavor\n)\n\n\nf\n \n=\n \ninput\n()\n\n\n\nfor\n \ni\n,\n \ntopping\n \nin\n \nenumerate\n(\ntoppings\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \ntopping\n)\n\n\nt\n \n=\n \ninput\n()\n\n\n\nprint\n(\n\"Here is your order: base product: \"\n,\n \nproducts\n[\np\n],\n \n  \n\", flavor: \"\n,\n \nflavors\n[\nf\n],\n \n\", topping: \"\n,\n \ntoppings\n[\nt\n])\n\n\n\n\n\nHe ran it, answered all the questions and got this:\n\n\nTraceback (most recent call last):\n  File \"./coffeeshop-day2.py\", line 26, in <module>\n    print(\"Here is your order: base product: \", products[p], \nTypeError: list indices must be integers or slices, not str\n\n\n\n\n\u201cWhat\u2019s this?\u201d he looked puzzled.\n\n\n\u201cThis is your first error message! Congatulations!\u201d\n\n\n\u201cWhy are you so glad??? What\u2019s so good about error messages?\u201d Erik was clearly offended. Of course, he was sure that his dad is making fun of him.\n\n\n\u201cErik, don\u2019t get me wrong. Believe me, I want your application to work as much as you do. That\u2019s why I\u2019m glad to see an error message\u2013at least it give us some information. It\u2019s much worse when your program just doesn\u2019t work and says nothing. Also, you have heard this from me many times already: making mistakes is the best way to learn. Don\u2019t worry, we\u2019ll fix it.\u201d\n\n\n\u201cBut what should we do?\u201d\n\n\n\u201cYou see, in this case Python is pretty clear about what\u2019s wrong. It says that list indices must be integers, not strings. Remember, before we started working with menus, when you asked your users about their preferences what did you get?\u201d\n\n\n\u201cThey could answer \u2018coffee\u2019 or \u2018strawberry\u2019.\u201d\n\n\n\u201cAnd what are they in Python?\u201d\n\n\n\u201cStrings?\u201d\n\n\n\u201cRight, they are strings! And now when your users input \u20181\u2019 or \u20183\u2019, or \u20187\u2019 - they also input \nstrings\n which consist of numbers. They are not numbers, they are strings consisting of \nletters\n \u20181\u2019, \u20183\u2019, \u20187\u2019. Luckily, in Python we can easily convert them to numbers with function \nint()\n. You have to do this: take \u2018p\u2019 or \u2018f\u2019 or \u2018t\u2019\u2013the answer you received from the user\u2013and convert it to integer using \nint()\n. You can do it right after the \ninput()\n call and assign it to something like \np_index\n. In Python you can even assign it to the same variable\u2013what used to be a string, becomes integer. But for now let\u2019s have separate variables: our program will be more readable this way.\u201d\n\n\n\u201cLike this?\u201d\n\n\np_index\n \n=\n \nint\n(\np\n)\n\n\n\n\n\n\u201cYes, exactly.\u201d\n\n\nHe made the changes:\n\n\n.\n \n.\n \n.\n\n\n\nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nproduct\n)\n\n\np\n \n=\n \ninput\n()\n\n\np_index\n \n=\n \nint\n(\np\n)\n\n\n\nfor\n \ni\n,\n \nflavor\n \nin\n \nenumerate\n(\nflavors\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \nflavor\n)\n\n\nf\n \n=\n \ninput\n()\n\n\nf_index\n \n=\n \nint\n(\nf\n)\n\n\n\nfor\n \ni\n,\n \ntopping\n \nin\n \nenumerate\n(\ntoppings\n,\n \nstart\n=\n1\n):\n\n    \nprint\n(\ni\n,\n \ntopping\n)\n\n\nt\n \n=\n \ninput\n()\n\n\nt_index\n \n=\n \nint\n(\nt\n)\n\n\n\nprint\n(\n\"Here is your order: base product: \"\n,\n \nproducts\n[\np_index\n],\n \n  \n\", flavor: \"\n,\n \nflavors\n[\nf_index\n],\n \n\", topping: \"\n,\n \ntoppings\n[\nt_index\n])\n\n\n\n\n\n\u2026and ran the script:\n\n\n1 chocolate\n2 coffee\n1\n1 caramel\n2 butterscotch\n3 strawberry\n4 raspberry\n5 blueberry\n6 sweetstrawberry\n7 marshmallow\n8 plain\n5\n1 chocolate\n2 sweetstrawberry\n3 caramel\n1\nHere is your order: base product:  coffee , flavor:  sweetstrawberry , topping:  sweetstrawberry\n\n\n\n\n\u201cWait! It got it all wrong! I asked for chocolate with blueberry and it gave me coffee with sweetstraberry!\u201d\n\n\n\u201cFirst of all, let me ask you: \u2018Who is that \u2018it\u2019 you are talking about?\u2019\u201c\n\n\n\u201cPython, of course, who else??\u201d\n\n\n\u201cErik, dear, please remember: computer and Python do only what \nyou\n told them to do. If \nyour\n program doesn\u2019t work as expected, please don\u2019t blame Python for that. Just try to think: what could be wrong here? You converted the strings to numbers, that\u2019s fine. You used those numbers as indexes for your lists\u2026\u201d\n\n\n\u201cA-ha! I understand now! Yesterday we talked about indexes and that they always start with zero. And we used that \nstart=1\n to make our lists more human-readable. Yes, now I see that it took the \nnext\n element in all three cases! Okay, I will just subtract 1 from the numbers before using them with lists!\u201d\n\n\nI suggested: \u201cYou can do this even inside the square brackets. No need for a separate line of code for that.\u201d\n\n\nHe fixed his code:\n\n\nprint\n(\n\"Here is your order: base product: \"\n,\n \nproducts\n[\np_index\n-\n1\n],\n \n  \n\", flavor: \"\n,\n \nflavors\n[\nf_index\n-\n1\n],\n \n\", topping: \"\n,\n \ntoppings\n[\nt_index\n-\n1\n])\n\n\n\n\n\n\u2026and finally got his order right!\n\n\n\u201cLet me try your program too,\u201d asked I.\n\n\n\u201cGo ahead, order something,\u201d Erik was very proud of his first application.\n\n\nerik@idea:~$\n ./coffeeshop.py\n\n1 chocolate\n\n\n2 coffee\n\n\nfgdhjkfjgd\n\n\nTraceback (most recent call last):\n\n\n  File \"./coffeeshop-day2.py\", line 17, in <module>\n\n\n    p_index = int(p)\n\n\nValueError: invalid literal for int() with base 10: 'fgdhjkfjgd'\n\n\n\n\n\n\u201cWHAT ARE YOU DOING???\u201d Erik was outraged.\n\n\n\u201cI am testing your program,\u201d I answered as calmly as possible.\n\n\n\u201cBut you are not supposed to enter things like that! You see, it clearly indicates that the product number should be either 1 or 2! And not these stupid characters that you entered!\u201d\n\n\n\u201cBut I am just a stupid user, I know nothing about your expectations. And I don\u2019t read your menus carefully. Or I am a hacker who tries to break into your program. Or I\u2019m a kid who just likes to play with the keyboard. You as a programmer are responsible for checking if the input is correct.\u201d\n\n\n\u201cBut how do I do that?\u201d\n\n\n\u201cThere many ways to check your input. One of them is called \u2018Exceptions\u2019 in Python. And we will talk about it tomorrow. Let me try one more time.\u201d\n\n\n\u201cYes, but please, use just numbers!\u201d\n\n\nerik@idea:~$\n ./coffeeshop.py\n\n1 chocolate\n\n\n2 coffee\n\n\n99\n\n\n1 caramel\n\n\n2 butterscotch\n\n\n3 strawberry\n\n\n4 raspberry\n\n\n5 blueberry\n\n\n6 sweetstrawberry\n\n\n7 marshmallow\n\n\n8 plain\n\n\n0\n\n\n1 chocolate\n\n\n2 sweetstrawberry\n\n\n3 caramel\n\n\n356\n\n\nTraceback (most recent call last):\n\n\n  File \"./coffeeshop-day2.py\", line 29, in <module>\n\n\n    print(\"Here is your order: base product: \", products[p_index-1], \n\n\nIndexError: list index out of range\n\n\n\n\n\n\u201cAGAIN??? You broke it again!\u201d\n\n\n\u201cYou see, Python clearly tells you that the index I\u2019ve entered is out of range. Which means we have to check the input not only for being a number, but also for being a \u2018good\u2019 number, i.e. being in the range of our lists\u2019 indexes. And, as far as you can see, for different lists this range is different.\u201d\n\n\n\u201cOkay, okay, I\u2019ll do that. But it\u2019s so-o boring to check everything!..\u201d\n\n\n\u201cI completely agree with you. It\u2019s probably the most boring part of programming. But at the same time it\u2019s one of the most important parts, if we want to write safe programs and be protected from hacker attacks. Believe it or not, a lot of hacker attacks happen just because programmers didn\u2019t check the input.\n\n\n\u201cLet\u2019s leave it for tomorrow. We\u2019ll have to do two things: check if the input is an integer number and check if it\u2019s in the range of list indexes,\u201d with this I felt much better: now we had a plan for tomorrow.\n\n\nTODO: add links to the examples of hacker attacks",
            "title": "Day 2 - Menus"
        },
        {
            "location": "/Python_vacation_day2/index.html#python-vacation-day-2",
            "text": "",
            "title": "Python Vacation -- Day 2"
        },
        {
            "location": "/Python_vacation_day2/index.html#menus",
            "text": "Next day we started with refreshing our recently acquired Python skills.   \u201cSo, what have we learned yesterday?\u201d I asked Erik.  \u201cLists! And  enumerate() !\u201d he answered quickly.   \u201cRight, that was your last script that used  enumerate() . What else? Do you remember what we started with?\u201d  \u201cYes, I remember: we worked with  input() . We tried to ask questions like \u2018What flavor do you want?\u2019. But then we decided that menus will work better because people won\u2019t order something we don\u2019t have.\u201d  \u201cYes, that\u2019s right. Now after we have learned how to print out lists and also lists with numbers, we can just add what we learned about  input()  and create our first menu. Why don\u2019t you add  input()  after you have listed the choices and get the number your customer pressed? Remember, you have to assign the user\u2019s input to a variable? When you got the input, you can print it out.\u201d  \u201cOkay,\u201d said Erik and started typing. Here is what he\u2019s got:  #!/usr/bin/python3  products   =   [ \"chocolate\" ,   \"coffee\" ]  flavors   =   [ \"caramel\" , \n            \"butterscotch\" , \n            \"strawberry\" , \n            \"raspberry\" , \n            \"blueberry\" , \n            \"sweetstrawberry\" , \n            \"marshmallow\" , \n            \"plain\" ]  toppings   =   [ \"chocolate\" ,   \"sweetstrawberry\" ,   \"caramel\" ]  for   i ,   product   in   enumerate ( products ,   start = 1 ): \n     print ( i ,   product )  p   =   input ()  print ( p )  for   i ,   flavor   in   enumerate ( flavors ,   start = 1 ): \n     print ( i ,   flavor )  f   =   input ()  print ( f )  for   i ,   topping   in   enumerate ( toppings ,   start = 1 ): \n     print ( i ,   topping )  t   =   input ()  print ( t )   He saved the file and ran it in the terminal:  erik@idea:~$  ./coffeeshop.py 1 chocolate  2 coffee  2  2  1 caramel  2 butterscotch  3 strawberry  4 raspberry  5 blueberry  6 sweetstrawberry  7 marshmallow  8 plain  7  7  1 chocolate  2 sweetstrawberry  3 caramel  1  1   \u201cThis is good, but in reality you wanted to print out something like \u2018Here is your order: base product: coffee, flavor: marshmallow, topping: chocolate\u2019, right? How would you get products and flavors from the numbers?\u201d  \u201cYes, you told me yesterday! We\u2019ll use them as list indexes!\u201d  \u201cGo ahead!\u201d  Erik came up with this script:  #!/usr/bin/python3  products   =   [ \"chocolate\" ,   \"coffee\" ]  flavors   =   [ \"caramel\" , \n            \"butterscotch\" , \n            \"strawberry\" , \n            \"raspberry\" , \n            \"blueberry\" , \n            \"sweetstrawberry\" , \n            \"marshmallow\" , \n            \"plain\" ]  toppings   =   [ \"chocolate\" ,   \"sweetstrawberry\" ,   \"caramel\" ]  for   i ,   product   in   enumerate ( products ,   start = 1 ): \n     print ( i ,   product )  p   =   input ()  for   i ,   flavor   in   enumerate ( flavors ,   start = 1 ): \n     print ( i ,   flavor )  f   =   input ()  for   i ,   topping   in   enumerate ( toppings ,   start = 1 ): \n     print ( i ,   topping )  t   =   input ()  print ( \"Here is your order: base product: \" ,   products [ p ],  \n   \", flavor: \" ,   flavors [ f ],   \", topping: \" ,   toppings [ t ])   He ran it, answered all the questions and got this:  Traceback (most recent call last):\n  File \"./coffeeshop-day2.py\", line 26, in <module>\n    print(\"Here is your order: base product: \", products[p], \nTypeError: list indices must be integers or slices, not str  \u201cWhat\u2019s this?\u201d he looked puzzled.  \u201cThis is your first error message! Congatulations!\u201d  \u201cWhy are you so glad??? What\u2019s so good about error messages?\u201d Erik was clearly offended. Of course, he was sure that his dad is making fun of him.  \u201cErik, don\u2019t get me wrong. Believe me, I want your application to work as much as you do. That\u2019s why I\u2019m glad to see an error message\u2013at least it give us some information. It\u2019s much worse when your program just doesn\u2019t work and says nothing. Also, you have heard this from me many times already: making mistakes is the best way to learn. Don\u2019t worry, we\u2019ll fix it.\u201d  \u201cBut what should we do?\u201d  \u201cYou see, in this case Python is pretty clear about what\u2019s wrong. It says that list indices must be integers, not strings. Remember, before we started working with menus, when you asked your users about their preferences what did you get?\u201d  \u201cThey could answer \u2018coffee\u2019 or \u2018strawberry\u2019.\u201d  \u201cAnd what are they in Python?\u201d  \u201cStrings?\u201d  \u201cRight, they are strings! And now when your users input \u20181\u2019 or \u20183\u2019, or \u20187\u2019 - they also input  strings  which consist of numbers. They are not numbers, they are strings consisting of  letters  \u20181\u2019, \u20183\u2019, \u20187\u2019. Luckily, in Python we can easily convert them to numbers with function  int() . You have to do this: take \u2018p\u2019 or \u2018f\u2019 or \u2018t\u2019\u2013the answer you received from the user\u2013and convert it to integer using  int() . You can do it right after the  input()  call and assign it to something like  p_index . In Python you can even assign it to the same variable\u2013what used to be a string, becomes integer. But for now let\u2019s have separate variables: our program will be more readable this way.\u201d  \u201cLike this?\u201d  p_index   =   int ( p )   \u201cYes, exactly.\u201d  He made the changes:  .   .   .  for   i ,   product   in   enumerate ( products ,   start = 1 ): \n     print ( i ,   product )  p   =   input ()  p_index   =   int ( p )  for   i ,   flavor   in   enumerate ( flavors ,   start = 1 ): \n     print ( i ,   flavor )  f   =   input ()  f_index   =   int ( f )  for   i ,   topping   in   enumerate ( toppings ,   start = 1 ): \n     print ( i ,   topping )  t   =   input ()  t_index   =   int ( t )  print ( \"Here is your order: base product: \" ,   products [ p_index ],  \n   \", flavor: \" ,   flavors [ f_index ],   \", topping: \" ,   toppings [ t_index ])   \u2026and ran the script:  1 chocolate\n2 coffee\n1\n1 caramel\n2 butterscotch\n3 strawberry\n4 raspberry\n5 blueberry\n6 sweetstrawberry\n7 marshmallow\n8 plain\n5\n1 chocolate\n2 sweetstrawberry\n3 caramel\n1\nHere is your order: base product:  coffee , flavor:  sweetstrawberry , topping:  sweetstrawberry  \u201cWait! It got it all wrong! I asked for chocolate with blueberry and it gave me coffee with sweetstraberry!\u201d  \u201cFirst of all, let me ask you: \u2018Who is that \u2018it\u2019 you are talking about?\u2019\u201c  \u201cPython, of course, who else??\u201d  \u201cErik, dear, please remember: computer and Python do only what  you  told them to do. If  your  program doesn\u2019t work as expected, please don\u2019t blame Python for that. Just try to think: what could be wrong here? You converted the strings to numbers, that\u2019s fine. You used those numbers as indexes for your lists\u2026\u201d  \u201cA-ha! I understand now! Yesterday we talked about indexes and that they always start with zero. And we used that  start=1  to make our lists more human-readable. Yes, now I see that it took the  next  element in all three cases! Okay, I will just subtract 1 from the numbers before using them with lists!\u201d  I suggested: \u201cYou can do this even inside the square brackets. No need for a separate line of code for that.\u201d  He fixed his code:  print ( \"Here is your order: base product: \" ,   products [ p_index - 1 ],  \n   \", flavor: \" ,   flavors [ f_index - 1 ],   \", topping: \" ,   toppings [ t_index - 1 ])   \u2026and finally got his order right!  \u201cLet me try your program too,\u201d asked I.  \u201cGo ahead, order something,\u201d Erik was very proud of his first application.  erik@idea:~$  ./coffeeshop.py 1 chocolate  2 coffee  fgdhjkfjgd  Traceback (most recent call last):    File \"./coffeeshop-day2.py\", line 17, in <module>      p_index = int(p)  ValueError: invalid literal for int() with base 10: 'fgdhjkfjgd'   \u201cWHAT ARE YOU DOING???\u201d Erik was outraged.  \u201cI am testing your program,\u201d I answered as calmly as possible.  \u201cBut you are not supposed to enter things like that! You see, it clearly indicates that the product number should be either 1 or 2! And not these stupid characters that you entered!\u201d  \u201cBut I am just a stupid user, I know nothing about your expectations. And I don\u2019t read your menus carefully. Or I am a hacker who tries to break into your program. Or I\u2019m a kid who just likes to play with the keyboard. You as a programmer are responsible for checking if the input is correct.\u201d  \u201cBut how do I do that?\u201d  \u201cThere many ways to check your input. One of them is called \u2018Exceptions\u2019 in Python. And we will talk about it tomorrow. Let me try one more time.\u201d  \u201cYes, but please, use just numbers!\u201d  erik@idea:~$  ./coffeeshop.py 1 chocolate  2 coffee  99  1 caramel  2 butterscotch  3 strawberry  4 raspberry  5 blueberry  6 sweetstrawberry  7 marshmallow  8 plain  0  1 chocolate  2 sweetstrawberry  3 caramel  356  Traceback (most recent call last):    File \"./coffeeshop-day2.py\", line 29, in <module>      print(\"Here is your order: base product: \", products[p_index-1],   IndexError: list index out of range   \u201cAGAIN??? You broke it again!\u201d  \u201cYou see, Python clearly tells you that the index I\u2019ve entered is out of range. Which means we have to check the input not only for being a number, but also for being a \u2018good\u2019 number, i.e. being in the range of our lists\u2019 indexes. And, as far as you can see, for different lists this range is different.\u201d  \u201cOkay, okay, I\u2019ll do that. But it\u2019s so-o boring to check everything!..\u201d  \u201cI completely agree with you. It\u2019s probably the most boring part of programming. But at the same time it\u2019s one of the most important parts, if we want to write safe programs and be protected from hacker attacks. Believe it or not, a lot of hacker attacks happen just because programmers didn\u2019t check the input.  \u201cLet\u2019s leave it for tomorrow. We\u2019ll have to do two things: check if the input is an integer number and check if it\u2019s in the range of list indexes,\u201d with this I felt much better: now we had a plan for tomorrow.  TODO: add links to the examples of hacker attacks",
            "title": "Menus"
        },
        {
            "location": "/Python_vacation_day3/index.html",
            "text": "Python Vacation \u2013 Day 3\n\n\nErrors and what to do about them\n\n\nNext day Erik was in better mood. It seemed he forgot how I tortured his beautiful program. But we were going to talk about errors and exceptions so I had to remind him about yesterday.\n\n\n\u201cRemember what we did last time?\u201d\n\n\n\u201cYes, you did some stupid things with my program. I didn\u2019t know that you are so ignorant and have no idea about how to use computers. If the menu says: Choose between 1 and 2, you should press 1 or 2, and not that garbage you typed last time.\u201d\n\n\n\u201cWell, a lot of developers think this way. But life has more variety than a choice between 1 and 2. I told you already that you should expect a stupid user, who doesn\u2019t read menus, a hacker who wants to break in, a kid who is just playing with the keyboard. It\u2019s all your responsibility to react to bad input and make sure your program doesn\u2019t break.\u201d\n\n\n\u201cOkay, okay\u2026 You said something about \u2018exceptions\u2019 last time. What is it?\u201d\n\n\n\u201cThere are a lot of situations when a Python program could break. Wrong input, division by zero, wrong list index\u2013if your list has 5 elements and you are trying to access its 10\nth\n element. If you don\u2019t do anything about these cases, your Python program just breaks and stops. Sometimes it\u2019s okay, if something really bad is happening. But most of the times you shouldn\u2019t stop your program and just inform the user that an error happened and she should repeat her input. For example, if instead of a number she enters letters, we should tell her that it\u2019s not what we expect and return back to the input prompt. By the way, you haven\u2019t created an input prompt so far. I think you should add something like \u2018Please, choose from this list of base products or flavors\u2019. \u201d \n\n\n\u201cThat\u2019s easy,\u201d said Erik. \u201cI can do that right now. But I will need your help with those \u2018excephtions\u2019. And also, how do we return back to the input?\u201d\n\n\n\u201cWhat do we use in Python, when we have to repeat something?\u201d asked I.\n\n\n\u201cA loop?\u201d guessed Erik.\n\n\n\u201cThat\u2019s right! But which loop? In this case we have to repeat our input prompt until the user enters the \nright\n thing. Or, in other words, while he continues entering the \nwrong\n thing. You see where I am going?\u201d\n\n\n\u201cOf course! It should be a \nwhile\n loop!\u201d said Erik.\n\n\nI decided to help him a little bit. \u201cI suggest using a variable like \ngood_input\n and set it to False initially. Then it will be a condition of the loop: if the input is not good yet, conitnue. If the input is good, i.e. is integer and in the right range, then exit from the loop. Let\u2019s put aside the exceptions part for now and work on the number ranges. You know what to check, right?\u201d\n\n\n\u201cYes, let me try it,\u201d said Erik and started coding.\n\n\nHere is what he\u2019s got:\n\n\ngood_input\n \n=\n \nFalse\n\n\nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n    \nprint\n(\n\"Choose your base product from the menu (press the number):\"\n)\n\n    \nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n        \nprint\n(\ni\n,\n \nproduct\n)\n\n    \np\n \n=\n \ninput\n()\n\n    \np_index\n \n=\n \nint\n(\np\n)\n\n    \nif\n \np_index\n \n<\n \nlen\n(\nproducts\n):\n\n        \ngood_input\n \n=\n \nTrue\n\n\n\n\n\n\u201cNow try it,\u201d said I.\n\n\nerik@idea:~$\n ./coffeeshop.py\n\nChoose your base product from the menu (press the number):\n\n\n1 chocolate\n\n\n2 coffee\n\n\n99\n\n\nChoose your base product from the menu (press the number):\n\n\n1 chocolate\n\n\n2 coffee\n\n\n2\n\n\nChoose your base product from the menu (press the number):\n\n\n1 chocolate\n\n\n2 coffee\n\n\n\n\n\n\u201cHmmm\u2026 It doesn\u2019t let me enter 2\u2026 A-ha, I see! It should be less or \nequal\n the length of the array!\u201d \n\n\nHe changed \n<\n to \n<=\n and it worked now. \n\n\n\u201cTry minus 3\u2026\u201d, I whispered, trying to sound like a voice from the left shoulder.\n\n\nHe entered \n-3\n and the program was okay with that. \u201cI know, I know,\u201d he said and added \nand p_index > 0\n to that \nif\n statement. Now it worked fine both for big numbers and negative ones.\n\n\nI suggested: \u201cIt might be a good idea to let people know what\u2019s wrong with their input. Like \u2018You number should be between this and that\u2019. You can use \nelse\n in your \nif\n statement.\u201d\n\n\n\u201cGood idea!\u201d rejoiced Erik and made his \nif\n statement look like this:\n\n\n    \nif\n \np_index\n \n<=\n \nlen\n(\nproducts\n)\n \nand\n \np_index\n \n>\n \n0\n \n:\n\n        \ngood_input\n \n=\n \nTrue\n\n    \nelse\n:\n\n        \nprint\n(\n\"You should enter a number between 1 and \"\n,\n \nlen\n(\nproducts\n))\n\n\n\n\n\n\u201cGreat!\u201d said I. \u201cNow you can copy this code to other menus. If you have several similar pieces of code, it\u2019s a good practice to make one of them work like you want it to work and then copy it to the other pieces. Even better is to use functions for that, but let\u2019s leave it for the other day.\u201d\n\n\n\u201cCan I use the same \ngood_input\n variable for other loops?\u201d he asked. \n\n\n\u201cYes, go ahead. It\u2019s a disposable variable, reuse it as you like. No need to create a new one for each loop.\u201d\n\n\nErik has copied the loop code to the other two menus. Now his program looked like this:\n\n\n#!/usr/bin/python3\n\n\n\nproducts\n \n=\n \n[\n\"chocolate\"\n,\n \n\"coffee\"\n]\n\n\nflavors\n \n=\n \n[\n\"caramel\"\n,\n\n           \n\"butterscotch\"\n,\n\n           \n\"strawberry\"\n,\n\n           \n\"raspberry\"\n,\n\n           \n\"blueberry\"\n,\n\n           \n\"sweetstrawberry\"\n,\n\n           \n\"marshmallow\"\n,\n\n           \n\"plain\"\n]\n\n\ntoppings\n \n=\n \n[\n\"chocolate\"\n,\n \n\"sweetstrawberry\"\n,\n \n\"caramel\"\n]\n\n\n\n\ngood_input\n \n=\n \nFalse\n\n\nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n    \nprint\n(\n\"Choose your base product from the menu (press the number):\"\n)\n\n    \nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n        \nprint\n(\ni\n,\n \nproduct\n)\n\n    \np\n \n=\n \ninput\n()\n\n    \np_index\n \n=\n \nint\n(\np\n)\n\n    \nif\n \np_index\n \n<=\n \nlen\n(\nproducts\n)\n \nand\n \np_index\n \n>\n \n0\n \n:\n\n        \ngood_input\n \n=\n \nTrue\n\n    \nelse\n:\n\n        \nprint\n(\n\"You should enter a number between 1 and \"\n,\n \nlen\n(\nproducts\n))\n\n\n\ngood_input\n \n=\n \nFalse\n\n\nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n    \nprint\n(\n\"Choose your flavor from the menu (press the number):\"\n)\n\n    \nfor\n \ni\n,\n \nflavor\n \nin\n \nenumerate\n(\nflavors\n,\n \nstart\n=\n1\n):\n\n        \nprint\n(\ni\n,\n \nflavor\n)\n\n    \nf\n \n=\n \ninput\n()\n\n    \nf_index\n \n=\n \nint\n(\nf\n)\n\n    \nif\n \nf_index\n \n<=\n \nlen\n(\nflavors\n)\n \nand\n \nf_index\n \n>\n \n0\n \n:\n\n        \ngood_input\n \n=\n \nTrue\n\n\n\ngood_input\n \n=\n \nFalse\n\n\nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n    \nprint\n(\n\"Choose your topping from the menu (press the number):\"\n)\n\n    \nfor\n \ni\n,\n \ntopping\n \nin\n \nenumerate\n(\ntoppings\n,\n \nstart\n=\n1\n):\n\n        \nprint\n(\ni\n,\n \ntopping\n)\n\n    \nt\n \n=\n \ninput\n()\n\n    \nt_index\n \n=\n \nint\n(\nt\n)\n\n    \nif\n \nt_index\n \n<=\n \nlen\n(\ntoppings\n)\n \nand\n \nt_index\n \n>\n \n0\n \n:\n\n        \ngood_input\n \n=\n \nTrue\n\n\n\nprint\n(\n\"Here is your order: base product: \"\n,\n \nproducts\n[\np_index\n-\n1\n],\n \n  \n\", flavor: \"\n,\n \nflavors\n[\nf_index\n-\n1\n],\n \n\", topping: \"\n,\n \ntoppings\n[\nt_index\n-\n1\n])\n\n\n\n\n\n\u201cWell, it works now. Time to talk about Exceptions. Try to run your program again and type some gibberish instead of numbers. Let\u2019s see what Python tells us about our input.\u201d\n\n\nOf course, Erik didn\u2019t want to see those nasty error messages again, but now he understood the importance of input checking. Or least it seemed so. So he ran the program and typed some letters:\n\n\nerik@idea:~$\n ./coffeeshop.py\n\n1 chocolate\n\n\n2 coffee\n\n\nghkflkjhdg\n\n\nTraceback (most recent call last):\n\n\n  File \"./coffeeshop-day3.py\", line 21, in <module>\n\n\n    p_index = int(p)\n\n\nValueError: invalid literal for int() with base 10: 'ghkflkjhdg'\n\n\n\n\n\n\u201cLook at this last message. You see: Python tells us that we have entered an invalid literal for integer number. Which means: anything besides letters from 0 to 9. Also it\u2019s interesting that Python tells us that they are invalid for \u2018base 10\u2019. Which means for decimal system. If we tried to convert it as a hexadecimal number, some letters wouldn\u2019t be complete gibberish. Like for example if you would enter \nffdfdffdfd\n and tried to convert it as hexadecimal number (i.e. with base=16), it would be absolutely fine. But I digressed.\n\n\n\u201c\nValueError\n is the word which tells us that there is an exception and we should handle it somehow. There are other errors: \nSyntaxError\n, \nZeroDivisionError\n, \nTypeError\n\u2026 You can find some examples in the Python official tutorial here: (\nhttps://docs.python.org/3/tutorial/errors.html\n). Let\u2019s take an example from the tutorial, it does exactly what we want. Look:\u201d\n\n\nwhile\n \nTrue\n:\n\n    \ntry\n:\n\n        \nx\n \n=\n \nint\n(\ninput\n(\n\"Please enter a number: \"\n))\n\n        \nbreak\n\n    \nexcept\n \nValueError\n:\n\n        \nprint\n(\n\"Oops!  That was no valid number.  Try again...\"\n)\n\n\n\n\n\n\u201cLet\u2019s do something very similar in your code. But first let\u2019s think about this: which input check should come first\u2013checking if we can convert it to an integer or checking if it\u2019s in the right range?\u201d\n\n\nErik thought for a second and said: \u201cI think checking for gibberish should come first.\u201d\n\n\n\u201cThat\u2019s right!\u201d I said. \u201cSo we ask for input and continue the loop until we see a valid string which we can convert to an integer. And only then, after we converted it, we check if it\u2019s in the right range. When changing your code, please keep track of the indents and remember about the flow.\u201d\n\n\n\u201cYes, sure,\u201d said Erik and get to the editor.\n\n\nAfter struggling with the code for a minute he asked: \u201cWhat does this \nbreak\n mean?\u201d\n\n\n\u201cIt\u2019s a way to exit the \nwhile\n loop. In this example they decided not to use a condition in the \nwhile\n statement and they just put \nTrue\n in it. That means the loop will go forever unless we exit from it using this \nbreak\n keyword. And, as you can see, in the example they exit the loop if the input can be converted to a number. If this is not the case (somebody has entered letters), then they raise an exception and continue the loop. In our case even if we see that the input has only numbers, it\u2019s too early to exit the loop. We should go ahead and check if the number is in the range, right?\u201d\n\n\n\u201cSo what should we put instead of \nbreak\n here?\u201d\n\n\n\u201cNothing. We should just continue with the flow. If our \ntry\n was successful, we don\u2019t go into \nexcept\n and continue with the statement which goes after \nexcept\n\u2014but at the same indentation level.\u201d\n\n\n\u201cAnd if our \ntry\n wasn\u2019t successful we tell the user that he should enter a number, not stupid letters, right?\u201d\n\n\n\u201cYes, but not only that. After you told the user about his mistake, you should go back to the beginning of the loop. In Python we use the word \ncontinue\n for that. And then we start all over again: check the condition and decide if you continue or not. In our case we haven\u2019t change the condition, \ngood_input\n is still \nFalse\n so we\u2019ll continue with the prompt asking to choose the base product.\u201d\n\n\n\u201cShould I put \ncontinue\n after my error message?\u201d\n\n\n\u201cExactly right! Try it on your first dialogue and if it works, copy to the other menus.\u201d\n\n\nHere is what Erik has got in the first dialogue:\n\n\ngood_input\n \n=\n \nFalse\n\n\nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n    \nprint\n(\n\"Choose your base product from the menu (press the number):\"\n)\n\n    \nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n        \nprint\n(\ni\n,\n \nproduct\n)\n\n    \np\n \n=\n \ninput\n()\n\n\n    \ntry\n:\n\n        \np_index\n \n=\n \nint\n(\np\n)\n\n    \nexcept\n  \nValueError\n:\n\n        \nprint\n(\n\"Error: you should enter a NUMBER!\"\n)\n\n        \ncontinue\n\n\n    \nif\n \np_index\n \n<=\n \nlen\n(\nproducts\n)\n \nand\n \np_index\n \n>\n \n0\n \n:\n\n        \ngood_input\n \n=\n \nTrue\n\n    \nelse\n:\n\n        \nprint\n(\n\"You should enter a number between 1 and \"\n,\n \nlen\n(\nproducts\n))\n\n\n\n\n\nHe ran the script and tried to enter all kinds of garbage\u2014the program always responded: \u201cYou should enter a NUMBER!\u201d. Erik was happy\u2014as if he just has defended his application from a violent hacker\u2019s attack!\n\n\n\u201cNow go ahead and copy this code in the other menus,\u201d said I.\n\n\nErik worked for a while, testing the script from time to time, muttering and cursing along the way. As the old saying goes: \u201cWhat is the most popular programming language? Profanity.\u201d As a good parent I probably should\u2019ve told him not to use some words, but I had a different task right now. \n\n\n\u201cIt works now!\u201d he said finally. \n\n\n\u201cWhat were you cursing about?\u201d I asked.\n\n\n\u201cOh, you know, we have different variables in all three menus so I had to change all of them and keep track of all those \np_index\n, \u2018\nf_index\n, \nt_index\n\u2026 But it works now! Look at my script now,\u201d and he proudly presented the fruit of his labor.\n\n\n#!/usr/bin/python3\n\n\n\nproducts\n \n=\n \n[\n\"chocolate\"\n,\n \n\"coffee\"\n]\n\n\nflavors\n \n=\n \n[\n\"caramel\"\n,\n\n           \n\"butterscotch\"\n,\n\n           \n\"strawberry\"\n,\n\n           \n\"raspberry\"\n,\n\n           \n\"blueberry\"\n,\n\n           \n\"sweetstrawberry\"\n,\n\n           \n\"marshmallow\"\n,\n\n           \n\"plain\"\n]\n\n\ntoppings\n \n=\n \n[\n\"chocolate\"\n,\n \n\"sweetstrawberry\"\n,\n \n\"caramel\"\n]\n\n\n\n\ngood_input\n \n=\n \nFalse\n\n\nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n    \nprint\n(\n\"Choose your base product from the menu (press the number):\"\n)\n\n    \nfor\n \ni\n,\n \nproduct\n \nin\n \nenumerate\n(\nproducts\n,\n \nstart\n=\n1\n):\n\n        \nprint\n(\ni\n,\n \nproduct\n)\n\n    \np\n \n=\n \ninput\n()\n\n\n    \ntry\n:\n\n        \np_index\n \n=\n \nint\n(\np\n)\n\n    \nexcept\n  \nValueError\n:\n\n        \nprint\n(\n\"Error: you should enter a NUMBER!\"\n)\n\n        \ncontinue\n\n\n    \nif\n \np_index\n \n<=\n \nlen\n(\nproducts\n)\n \nand\n \np_index\n \n>\n \n0\n \n:\n\n        \ngood_input\n \n=\n \nTrue\n\n    \nelse\n:\n\n        \nprint\n(\n\"You should enter a number between 1 and \"\n,\n \nlen\n(\nproducts\n))\n\n\n\ngood_input\n \n=\n \nFalse\n\n\nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n    \nprint\n(\n\"Choose your flavor from the menu (press the number):\"\n)\n\n    \nfor\n \ni\n,\n \nflavor\n \nin\n \nenumerate\n(\nflavors\n,\n \nstart\n=\n1\n):\n\n        \nprint\n(\ni\n,\n \nflavor\n)\n\n    \nf\n \n=\n \ninput\n()\n\n\n    \ntry\n:\n\n        \nf_index\n \n=\n \nint\n(\nf\n)\n\n    \nexcept\n  \nValueError\n:\n\n        \nprint\n(\n\"Error: you should enter a NUMBER!\"\n)\n\n        \ncontinue\n\n\n    \nif\n \nf_index\n \n<=\n \nlen\n(\nflavors\n)\n \nand\n \nf_index\n \n>\n \n0\n \n:\n\n        \ngood_input\n \n=\n \nTrue\n\n    \nelse\n:\n\n        \nprint\n(\n\"You should enter a number between 1 and \"\n,\n \nlen\n(\nflavors\n))\n\n\n\n\ngood_input\n \n=\n \nFalse\n\n\nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n    \nprint\n(\n\"Choose your topping from the menu (press the number):\"\n)\n\n    \nfor\n \ni\n,\n \ntopping\n \nin\n \nenumerate\n(\ntoppings\n,\n \nstart\n=\n1\n):\n\n        \nprint\n(\ni\n,\n \ntopping\n)\n\n    \nt\n \n=\n \ninput\n()\n\n\n    \ntry\n:\n\n        \nt_index\n \n=\n \nint\n(\nt\n)\n\n    \nexcept\n  \nValueError\n:\n\n        \nprint\n(\n\"Error: you should enter a NUMBER!\"\n)\n\n        \ncontinue\n\n\n    \nif\n \nt_index\n \n<=\n \nlen\n(\ntoppings\n)\n \nand\n \nt_index\n \n>\n \n0\n \n:\n\n        \ngood_input\n \n=\n \nTrue\n\n    \nelse\n:\n\n        \nprint\n(\n\"You should enter a number between 1 and \"\n,\n \nlen\n(\ntoppings\n))\n\n\n\n\nprint\n(\n\"Here is your order: base product: \"\n,\n \nproducts\n[\np_index\n-\n1\n],\n \n  \n\", flavor: \"\n,\n \nflavors\n[\nf_index\n-\n1\n],\n \n\", topping: \"\n,\n \ntoppings\n[\nt_index\n-\n1\n])\n\n\n\n\n\n\u201cYou see\u2014it\u2019s more than 70 lines of code that I wrote!\u201d Erik was very proud indeed.\n\n\n\u201cGreat! Are you tired now?\u201d\n\n\n\u201cYes, I am! And hungry!\u201d\n\n\n\u201cWe can ask Mom to fix some lunch for us. We have definitely earned it. As for your tiredness, I think we can do something about it too. You see, you\u2019ve spend some time copying and pasting pieces of code from one menu to another. You have to change it a bit, but only a bit: one variable here, one variable there. There is more efficient way to do this. I am talking about functions. Every time you notice you are repeating yourself, think about functions. Think: is it possible to simplify it and avoid repetition? There is even an acronim for that: DRY, Don\u2019t Repeat Yourself.\n\n\n\u201cAnd,\u201d I continued, \u201cthe number of lines of code is not always a sign of good work. Your code should be easy to read, easy to understand. Long programs are not always best programs. By the way, short programs are not alwyas the best either. Think about somebody who should read, understand and maintain your program. Here is a great quote from Wes Dyer: \u2018Make it correct, make it clear, make it concise, make it fast. In that order.\u2019\n\n\n\u201cTomorrow let\u2019s try to make your code more readable. Let\u2019s use functions for that. Don\u2019t worry\u2014it\u2019s easy.\u201d",
            "title": "Day 3 - Errors"
        },
        {
            "location": "/Python_vacation_day3/index.html#python-vacation-day-3",
            "text": "",
            "title": "Python Vacation -- Day 3"
        },
        {
            "location": "/Python_vacation_day3/index.html#errors-and-what-to-do-about-them",
            "text": "Next day Erik was in better mood. It seemed he forgot how I tortured his beautiful program. But we were going to talk about errors and exceptions so I had to remind him about yesterday.  \u201cRemember what we did last time?\u201d  \u201cYes, you did some stupid things with my program. I didn\u2019t know that you are so ignorant and have no idea about how to use computers. If the menu says: Choose between 1 and 2, you should press 1 or 2, and not that garbage you typed last time.\u201d  \u201cWell, a lot of developers think this way. But life has more variety than a choice between 1 and 2. I told you already that you should expect a stupid user, who doesn\u2019t read menus, a hacker who wants to break in, a kid who is just playing with the keyboard. It\u2019s all your responsibility to react to bad input and make sure your program doesn\u2019t break.\u201d  \u201cOkay, okay\u2026 You said something about \u2018exceptions\u2019 last time. What is it?\u201d  \u201cThere are a lot of situations when a Python program could break. Wrong input, division by zero, wrong list index\u2013if your list has 5 elements and you are trying to access its 10 th  element. If you don\u2019t do anything about these cases, your Python program just breaks and stops. Sometimes it\u2019s okay, if something really bad is happening. But most of the times you shouldn\u2019t stop your program and just inform the user that an error happened and she should repeat her input. For example, if instead of a number she enters letters, we should tell her that it\u2019s not what we expect and return back to the input prompt. By the way, you haven\u2019t created an input prompt so far. I think you should add something like \u2018Please, choose from this list of base products or flavors\u2019. \u201d   \u201cThat\u2019s easy,\u201d said Erik. \u201cI can do that right now. But I will need your help with those \u2018excephtions\u2019. And also, how do we return back to the input?\u201d  \u201cWhat do we use in Python, when we have to repeat something?\u201d asked I.  \u201cA loop?\u201d guessed Erik.  \u201cThat\u2019s right! But which loop? In this case we have to repeat our input prompt until the user enters the  right  thing. Or, in other words, while he continues entering the  wrong  thing. You see where I am going?\u201d  \u201cOf course! It should be a  while  loop!\u201d said Erik.  I decided to help him a little bit. \u201cI suggest using a variable like  good_input  and set it to False initially. Then it will be a condition of the loop: if the input is not good yet, conitnue. If the input is good, i.e. is integer and in the right range, then exit from the loop. Let\u2019s put aside the exceptions part for now and work on the number ranges. You know what to check, right?\u201d  \u201cYes, let me try it,\u201d said Erik and started coding.  Here is what he\u2019s got:  good_input   =   False  while   good_input   ==   False : \n     print ( \"Choose your base product from the menu (press the number):\" ) \n     for   i ,   product   in   enumerate ( products ,   start = 1 ): \n         print ( i ,   product ) \n     p   =   input () \n     p_index   =   int ( p ) \n     if   p_index   <   len ( products ): \n         good_input   =   True   \u201cNow try it,\u201d said I.  erik@idea:~$  ./coffeeshop.py Choose your base product from the menu (press the number):  1 chocolate  2 coffee  99  Choose your base product from the menu (press the number):  1 chocolate  2 coffee  2  Choose your base product from the menu (press the number):  1 chocolate  2 coffee   \u201cHmmm\u2026 It doesn\u2019t let me enter 2\u2026 A-ha, I see! It should be less or  equal  the length of the array!\u201d   He changed  <  to  <=  and it worked now.   \u201cTry minus 3\u2026\u201d, I whispered, trying to sound like a voice from the left shoulder.  He entered  -3  and the program was okay with that. \u201cI know, I know,\u201d he said and added  and p_index > 0  to that  if  statement. Now it worked fine both for big numbers and negative ones.  I suggested: \u201cIt might be a good idea to let people know what\u2019s wrong with their input. Like \u2018You number should be between this and that\u2019. You can use  else  in your  if  statement.\u201d  \u201cGood idea!\u201d rejoiced Erik and made his  if  statement look like this:       if   p_index   <=   len ( products )   and   p_index   >   0   : \n         good_input   =   True \n     else : \n         print ( \"You should enter a number between 1 and \" ,   len ( products ))   \u201cGreat!\u201d said I. \u201cNow you can copy this code to other menus. If you have several similar pieces of code, it\u2019s a good practice to make one of them work like you want it to work and then copy it to the other pieces. Even better is to use functions for that, but let\u2019s leave it for the other day.\u201d  \u201cCan I use the same  good_input  variable for other loops?\u201d he asked.   \u201cYes, go ahead. It\u2019s a disposable variable, reuse it as you like. No need to create a new one for each loop.\u201d  Erik has copied the loop code to the other two menus. Now his program looked like this:  #!/usr/bin/python3  products   =   [ \"chocolate\" ,   \"coffee\" ]  flavors   =   [ \"caramel\" , \n            \"butterscotch\" , \n            \"strawberry\" , \n            \"raspberry\" , \n            \"blueberry\" , \n            \"sweetstrawberry\" , \n            \"marshmallow\" , \n            \"plain\" ]  toppings   =   [ \"chocolate\" ,   \"sweetstrawberry\" ,   \"caramel\" ]  good_input   =   False  while   good_input   ==   False : \n     print ( \"Choose your base product from the menu (press the number):\" ) \n     for   i ,   product   in   enumerate ( products ,   start = 1 ): \n         print ( i ,   product ) \n     p   =   input () \n     p_index   =   int ( p ) \n     if   p_index   <=   len ( products )   and   p_index   >   0   : \n         good_input   =   True \n     else : \n         print ( \"You should enter a number between 1 and \" ,   len ( products ))  good_input   =   False  while   good_input   ==   False : \n     print ( \"Choose your flavor from the menu (press the number):\" ) \n     for   i ,   flavor   in   enumerate ( flavors ,   start = 1 ): \n         print ( i ,   flavor ) \n     f   =   input () \n     f_index   =   int ( f ) \n     if   f_index   <=   len ( flavors )   and   f_index   >   0   : \n         good_input   =   True  good_input   =   False  while   good_input   ==   False : \n     print ( \"Choose your topping from the menu (press the number):\" ) \n     for   i ,   topping   in   enumerate ( toppings ,   start = 1 ): \n         print ( i ,   topping ) \n     t   =   input () \n     t_index   =   int ( t ) \n     if   t_index   <=   len ( toppings )   and   t_index   >   0   : \n         good_input   =   True  print ( \"Here is your order: base product: \" ,   products [ p_index - 1 ],  \n   \", flavor: \" ,   flavors [ f_index - 1 ],   \", topping: \" ,   toppings [ t_index - 1 ])   \u201cWell, it works now. Time to talk about Exceptions. Try to run your program again and type some gibberish instead of numbers. Let\u2019s see what Python tells us about our input.\u201d  Of course, Erik didn\u2019t want to see those nasty error messages again, but now he understood the importance of input checking. Or least it seemed so. So he ran the program and typed some letters:  erik@idea:~$  ./coffeeshop.py 1 chocolate  2 coffee  ghkflkjhdg  Traceback (most recent call last):    File \"./coffeeshop-day3.py\", line 21, in <module>      p_index = int(p)  ValueError: invalid literal for int() with base 10: 'ghkflkjhdg'   \u201cLook at this last message. You see: Python tells us that we have entered an invalid literal for integer number. Which means: anything besides letters from 0 to 9. Also it\u2019s interesting that Python tells us that they are invalid for \u2018base 10\u2019. Which means for decimal system. If we tried to convert it as a hexadecimal number, some letters wouldn\u2019t be complete gibberish. Like for example if you would enter  ffdfdffdfd  and tried to convert it as hexadecimal number (i.e. with base=16), it would be absolutely fine. But I digressed.  \u201c ValueError  is the word which tells us that there is an exception and we should handle it somehow. There are other errors:  SyntaxError ,  ZeroDivisionError ,  TypeError \u2026 You can find some examples in the Python official tutorial here: ( https://docs.python.org/3/tutorial/errors.html ). Let\u2019s take an example from the tutorial, it does exactly what we want. Look:\u201d  while   True : \n     try : \n         x   =   int ( input ( \"Please enter a number: \" )) \n         break \n     except   ValueError : \n         print ( \"Oops!  That was no valid number.  Try again...\" )   \u201cLet\u2019s do something very similar in your code. But first let\u2019s think about this: which input check should come first\u2013checking if we can convert it to an integer or checking if it\u2019s in the right range?\u201d  Erik thought for a second and said: \u201cI think checking for gibberish should come first.\u201d  \u201cThat\u2019s right!\u201d I said. \u201cSo we ask for input and continue the loop until we see a valid string which we can convert to an integer. And only then, after we converted it, we check if it\u2019s in the right range. When changing your code, please keep track of the indents and remember about the flow.\u201d  \u201cYes, sure,\u201d said Erik and get to the editor.  After struggling with the code for a minute he asked: \u201cWhat does this  break  mean?\u201d  \u201cIt\u2019s a way to exit the  while  loop. In this example they decided not to use a condition in the  while  statement and they just put  True  in it. That means the loop will go forever unless we exit from it using this  break  keyword. And, as you can see, in the example they exit the loop if the input can be converted to a number. If this is not the case (somebody has entered letters), then they raise an exception and continue the loop. In our case even if we see that the input has only numbers, it\u2019s too early to exit the loop. We should go ahead and check if the number is in the range, right?\u201d  \u201cSo what should we put instead of  break  here?\u201d  \u201cNothing. We should just continue with the flow. If our  try  was successful, we don\u2019t go into  except  and continue with the statement which goes after  except \u2014but at the same indentation level.\u201d  \u201cAnd if our  try  wasn\u2019t successful we tell the user that he should enter a number, not stupid letters, right?\u201d  \u201cYes, but not only that. After you told the user about his mistake, you should go back to the beginning of the loop. In Python we use the word  continue  for that. And then we start all over again: check the condition and decide if you continue or not. In our case we haven\u2019t change the condition,  good_input  is still  False  so we\u2019ll continue with the prompt asking to choose the base product.\u201d  \u201cShould I put  continue  after my error message?\u201d  \u201cExactly right! Try it on your first dialogue and if it works, copy to the other menus.\u201d  Here is what Erik has got in the first dialogue:  good_input   =   False  while   good_input   ==   False : \n     print ( \"Choose your base product from the menu (press the number):\" ) \n     for   i ,   product   in   enumerate ( products ,   start = 1 ): \n         print ( i ,   product ) \n     p   =   input () \n\n     try : \n         p_index   =   int ( p ) \n     except    ValueError : \n         print ( \"Error: you should enter a NUMBER!\" ) \n         continue \n\n     if   p_index   <=   len ( products )   and   p_index   >   0   : \n         good_input   =   True \n     else : \n         print ( \"You should enter a number between 1 and \" ,   len ( products ))   He ran the script and tried to enter all kinds of garbage\u2014the program always responded: \u201cYou should enter a NUMBER!\u201d. Erik was happy\u2014as if he just has defended his application from a violent hacker\u2019s attack!  \u201cNow go ahead and copy this code in the other menus,\u201d said I.  Erik worked for a while, testing the script from time to time, muttering and cursing along the way. As the old saying goes: \u201cWhat is the most popular programming language? Profanity.\u201d As a good parent I probably should\u2019ve told him not to use some words, but I had a different task right now.   \u201cIt works now!\u201d he said finally.   \u201cWhat were you cursing about?\u201d I asked.  \u201cOh, you know, we have different variables in all three menus so I had to change all of them and keep track of all those  p_index , \u2018 f_index ,  t_index \u2026 But it works now! Look at my script now,\u201d and he proudly presented the fruit of his labor.  #!/usr/bin/python3  products   =   [ \"chocolate\" ,   \"coffee\" ]  flavors   =   [ \"caramel\" , \n            \"butterscotch\" , \n            \"strawberry\" , \n            \"raspberry\" , \n            \"blueberry\" , \n            \"sweetstrawberry\" , \n            \"marshmallow\" , \n            \"plain\" ]  toppings   =   [ \"chocolate\" ,   \"sweetstrawberry\" ,   \"caramel\" ]  good_input   =   False  while   good_input   ==   False : \n     print ( \"Choose your base product from the menu (press the number):\" ) \n     for   i ,   product   in   enumerate ( products ,   start = 1 ): \n         print ( i ,   product ) \n     p   =   input () \n\n     try : \n         p_index   =   int ( p ) \n     except    ValueError : \n         print ( \"Error: you should enter a NUMBER!\" ) \n         continue \n\n     if   p_index   <=   len ( products )   and   p_index   >   0   : \n         good_input   =   True \n     else : \n         print ( \"You should enter a number between 1 and \" ,   len ( products ))  good_input   =   False  while   good_input   ==   False : \n     print ( \"Choose your flavor from the menu (press the number):\" ) \n     for   i ,   flavor   in   enumerate ( flavors ,   start = 1 ): \n         print ( i ,   flavor ) \n     f   =   input () \n\n     try : \n         f_index   =   int ( f ) \n     except    ValueError : \n         print ( \"Error: you should enter a NUMBER!\" ) \n         continue \n\n     if   f_index   <=   len ( flavors )   and   f_index   >   0   : \n         good_input   =   True \n     else : \n         print ( \"You should enter a number between 1 and \" ,   len ( flavors ))  good_input   =   False  while   good_input   ==   False : \n     print ( \"Choose your topping from the menu (press the number):\" ) \n     for   i ,   topping   in   enumerate ( toppings ,   start = 1 ): \n         print ( i ,   topping ) \n     t   =   input () \n\n     try : \n         t_index   =   int ( t ) \n     except    ValueError : \n         print ( \"Error: you should enter a NUMBER!\" ) \n         continue \n\n     if   t_index   <=   len ( toppings )   and   t_index   >   0   : \n         good_input   =   True \n     else : \n         print ( \"You should enter a number between 1 and \" ,   len ( toppings ))  print ( \"Here is your order: base product: \" ,   products [ p_index - 1 ],  \n   \", flavor: \" ,   flavors [ f_index - 1 ],   \", topping: \" ,   toppings [ t_index - 1 ])   \u201cYou see\u2014it\u2019s more than 70 lines of code that I wrote!\u201d Erik was very proud indeed.  \u201cGreat! Are you tired now?\u201d  \u201cYes, I am! And hungry!\u201d  \u201cWe can ask Mom to fix some lunch for us. We have definitely earned it. As for your tiredness, I think we can do something about it too. You see, you\u2019ve spend some time copying and pasting pieces of code from one menu to another. You have to change it a bit, but only a bit: one variable here, one variable there. There is more efficient way to do this. I am talking about functions. Every time you notice you are repeating yourself, think about functions. Think: is it possible to simplify it and avoid repetition? There is even an acronim for that: DRY, Don\u2019t Repeat Yourself.  \u201cAnd,\u201d I continued, \u201cthe number of lines of code is not always a sign of good work. Your code should be easy to read, easy to understand. Long programs are not always best programs. By the way, short programs are not alwyas the best either. Think about somebody who should read, understand and maintain your program. Here is a great quote from Wes Dyer: \u2018Make it correct, make it clear, make it concise, make it fast. In that order.\u2019  \u201cTomorrow let\u2019s try to make your code more readable. Let\u2019s use functions for that. Don\u2019t worry\u2014it\u2019s easy.\u201d",
            "title": "Errors and what to do about them"
        },
        {
            "location": "/Python_vacation_day4/index.html",
            "text": "Python Vacation \u2013 Day 4\n\n\n\u201cRemember where we stopped last time?\u201d I asked Erik.\n\n\n\u201cYes, you said that we are going to work with functions and that will make my program shorter.\u201d\n\n\n\u201d\u2026And easier to read and understand!\u201d added I. \u201cWhat do you remember about Python functions from your online class?\u201d\n\n\n\u201cThey start with \ndef\n. You have to indent lines inside the function. You can call functions from your main program.\u201d\n\n\n\u201cGood! Also very important that you can pass \nparameters\n into functions so you can call them many times and they will do slightly different things depending on the parameters. Like saying \u2018Hello\u2019 and then a person\u2019s name.\u201d\n\n\n\u201cYes, I remember, we did this in our online course!\u201d exclaimed Erik. It was good to see that those couple weeks were not lost completely.\n\n\n\u201cYou said in your program you had to copy and paste some pieces of code several times. What did that code do?\u201d\n\n\n\u201cDon\u2019t you remember?\u201d Erik tried to be patient. \u201cI have three menus in my coffee shop program: one for base product, one for flavor, and one for topping. And in all three menus I have to do that garbage checking, number checking and all that.\u201d\n\n\n\u201cOkay,\u201d I said. \u201cWhy don\u2019t we create a function that will do all these boring things and call it three times?\u201d\n\n\n\u201cYes, that would be good. And also if I want to change or add something, I\u2019ll do it in one place, instead of copying it three times. But I have different flavors and toppings\u2014how will this function know which menu I want to use?\u201d\n\n\n\u201cYou said you had to change something while copying pieces of code into the menus. What was that?\u201d\n\n\n\u201cOh, all different variables. The variable for the \ninput()\n function, the index variable. And also the list name\u2014to print out the menu and to calculate its length.\u201d\n\n\n\u201cGood. So, as far as I can see, the only thing which needs to change is the list of options. It\u2019s either base product, flavor, or topping. Input variable and list index can be the reused inside the function. We\u2019ll just return the index as a result.\u201d\n\n\n\u201cWhat do you mean\u2014\u2018return\u2019?\u201d asked Erik.\n\n\n\u201cWell, imagine I asked you: \u2018Erik, please go to your room and count how many model planes you have.\u2019 You would go and count them and return to me with a number, right? Functions do the same thing: they perform some action and come back with the result. And usually I don\u2019t care how they do what I asked them to do, I\u2019m interested in the result. Like when I asked you to count your planes, I don\u2019t care if you use your fingers, or a piece of paper, or any more sophisticated method. In our case we have to write a function which will take a list of options, print it out as a menu and let the user chose from the menu. When the user makes their choice\u2014a number in the menu\u2014the function will remember it and bring it to us. There is a special word for that in Python: \nreturn\n. We are not going to return the name of a flavor, we\u2019ll just return its index in the list.\u201d\n\n\n\u201cYes, I remember that \nreturn\n from the class!\u201d said Erik.\n\n\n\u201cGood. Now we have to make a very difficult decision: how to name our function. Don\u2019t laugh, it is really very serious. When you write programs just a little longer than this one, it\u2019s pretty easy to get lost in different variable and function names. So, please, always think about naming. Don\u2019t call your functions \nf()\n or \nd4()\n \u2014 you will never remember what this means. Choose some meaningful names that show what this function does. The same applies to variables. Only if it\u2019s just a simple obscure index in a loop, then it\u2019s okay to call it \ni\n or \nk\n. In other cases, please use something readable. Also, in Python we use underscore to combine words for variable and function names. Like  \nbase_product\n or \ngood_input\n.\u201d\n\n\n\u201cI saw names without underscores, but with lower and upper case letters,\u201d said Erik.\n\n\n\u201cYes, it\u2019s called CamelCase. You see, it looks like camel humps? In Python we usually use them to define classes. We\u2019ll talk about classes later.\u201d\n\n\n\u201cOkay, I\u2019m ready. Let\u2019s call our function \nmenu\n. I know that I have to use \ndef\n to start writing it. And also I have to put something inside the parenthesis. Should it be the list of options?\u201d\n\n\n\u201cExactly!\u201d said I. I was proud of my boy. You know, teenagers are always like that: sometimes they surprise you with their brilliant minds, but sometimes they struggle with simple arithmetics. \u201cCall it \noptions\n, for example. You do remember that you should put the colon after parenthesis and indent the function body, don\u2019t you? You can copy most of the function body from what you have written already. Don\u2019t forget to return the index and don\u2019t forget that when we show \n1\n to the user, we have \n0\n in mind. So add some necessary arithmetics to the function. Enough instructions, go ahead and write it!\u201d\n\n\nErik started writing and copying and in a couple minutes his function looked like this:\n\n\ndef\n \nmenu\n(\noptions\n):\n\n    \ngood_input\n \n=\n \nFalse\n\n    \nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n        \nprint\n(\n\"Choose your base product from the menu (press the number):\"\n)\n\n        \nfor\n \ni\n,\n \noption\n \nin\n \nenumerate\n(\noptions\n,\n \nstart\n=\n1\n):\n\n            \nprint\n(\ni\n,\n \noption\n)\n\n        \np\n \n=\n \ninput\n()\n\n\n        \ntry\n:\n\n            \np_index\n \n=\n \nint\n(\np\n)\n\n        \nexcept\n  \nValueError\n:\n\n            \nprint\n(\n\"Error: you should enter a NUMBER!\"\n)\n\n            \ncontinue\n\n\n        \nif\n \np_index\n \n<=\n \nlen\n(\noptions\n)\n \nand\n \np_index\n \n>\n \n0\n \n:\n\n            \ngood_input\n \n=\n \nTrue\n\n        \nelse\n:\n\n            \nprint\n(\n\"You should enter a number between 1 and \"\n,\n \nlen\n(\noptions\n))\n\n\n    \nreturn\n \np_index\n-\n1\n\n\n\n\n\n\u201cWhat should I do with this prompt? It asks about the base product, but I want to use this function for flavors and toppings too,\u201d asked Erik.\n\n\nI said, \u201cGood question. If you want to reuse your function, you should move everything that is specific to some particular case, outside of the function. I suggest we ask this question \nbefore\n calling the function, in the main program. You will ask about base product and call the function with the list of base products, you ask about flavors and pass the list of flavors as a parameter.\u201d\n\n\n\u201cOkay,\u201d said Erik. \u201cI\u2019ll remove it. Now I have to rewrite the main program and use function in it, right?\u201d\n\n\n\u201cGo ahead!\u201d\n\n\nHe started working. After a while he asked, \u201cI use \np_index\n both in the function and in the main program. Should I rename it?\u201d\n\n\n\u201cFrom Python prespective, that\u2019s OK. It sees those variables differently. \np_index\n in the main program and \np_index\n inside a function are different variables. But from a readability perspective, I\u2019d suggest to rename it inside the function. It\u2019s better to avoid using same variable names inside functions and in the main program. Unless, of course, they are as simple as \na\n, \ni\n, \nx\n, which are usually temporary variables. So, rename it inside the function to something short but meaningful.\u201d\n\n\n\u201cIt will be \np_int\n,\u201d said Erik. Then he thought for a while and said, \u201cBut it starts with \np\n because I copied it from the products menu. In the function it doesn\u2019t make sense anymore. I\u2019ll rename \np\n to \nchoice\n and \np_index\n to \nchoice_int\n because we convert it to integer.\u201d\n\n\n\u201cGreat idea!\u201d I said.\n\n\nHe worked a bit more and discovered, \u201cNow I don\u2019t have to subtract 1 from the indexes in my final \nprint\n, because I have already done it in the function!\u201d\n\n\nHe finally came up with this:\n\n\n#!/usr/bin/python3\n\n\n\nproducts\n \n=\n \n[\n\"chocolate\"\n,\n \n\"coffee\"\n]\n\n\nflavors\n \n=\n \n[\n\"caramel\"\n,\n\n           \n\"butterscotch\"\n,\n\n           \n\"strawberry\"\n,\n\n           \n\"raspberry\"\n,\n\n           \n\"blueberry\"\n,\n\n           \n\"sweetstrawberry\"\n,\n\n           \n\"marshmallow\"\n,\n\n           \n\"plain\"\n]\n\n\ntoppings\n \n=\n \n[\n\"chocolate\"\n,\n \n\"sweetstrawberry\"\n,\n \n\"caramel\"\n]\n\n\n\n\ndef\n \nmenu\n(\noptions\n):\n\n    \ngood_input\n \n=\n \nFalse\n\n    \nwhile\n \ngood_input\n \n==\n \nFalse\n:\n\n        \nfor\n \ni\n,\n \noption\n \nin\n \nenumerate\n(\noptions\n,\n \nstart\n=\n1\n):\n\n            \nprint\n(\ni\n,\n \noption\n)\n\n        \nchoice\n \n=\n \ninput\n()\n\n\n        \ntry\n:\n\n            \nchoice_int\n \n=\n \nint\n(\nchoice\n)\n\n        \nexcept\n  \nValueError\n:\n\n            \nprint\n(\n\"Error: you should enter a NUMBER!\"\n)\n\n            \ncontinue\n\n\n        \nif\n \nchoice_int\n \n<=\n \nlen\n(\noptions\n)\n \nand\n \nchoice_int\n \n>\n \n0\n \n:\n\n            \ngood_input\n \n=\n \nTrue\n\n        \nelse\n:\n\n            \nprint\n(\n\"You should enter a number between 1 and \"\n,\n \nlen\n(\noptions\n))\n\n\n    \nreturn\n \nchoice_int\n-\n1\n\n\n\n\nprint\n(\n\"Choose your base product from the menu (press the number):\"\n)\n\n\np_index\n \n=\n \nmenu\n(\nproducts\n)\n\n\n\nprint\n(\n\"Choose your flavor from the menu (press the number):\"\n)\n\n\nf_index\n \n=\n \nmenu\n(\nflavors\n)\n\n\n\nprint\n(\n\"Choose your topping from the menu (press the number):\"\n)\n\n\nt_index\n \n=\n \nmenu\n(\ntoppings\n)\n\n\n\nprint\n(\n\"Here is your order: base product: \"\n,\n \nproducts\n[\np_index\n],\n \n  \n\", flavor: \"\n,\n \nflavors\n[\nf_index\n],\n \n\", topping: \"\n,\n \ntoppings\n[\nt_index\n])\n\n\n\n\n\nHe tested it and it worked perfectly! He even tried to enter \u201cwrong\u201d choices and always received error messages until his choice was \u201cright\u201d.\n\n\n\u201cCongratulations!\u201d I said. \u201cWe\u2019ve covered a lot of stuff during these days and you are moving very quickly. This is great!\u201d\n\n\nErik was happy. He was so happy that he even suggested: \u201cI want to add something to the program. Like we did in that online course, I want to ask the customer for his name and then print it out together with his order!\u201d\n\n\n\u201cGood idea!\u201d I said. After a while his program printed out: \nHello, Erik! Here is your order ...\n\n\n\u201cMuch better now,\u201d I said. \u201cNow, let\u2019s plan our next steps.\u201d\n\n\n\u201cWhat next steps? I thought we are done with this menu. I like it!\u201d\n\n\n\u201cYes, but as far as I remember, you have prepared 6 cups of beverage for your friends last time. Which means you have to collect and \nsave\n all their orders somehow, instead of just printing them out.\u201d\n\n\n\u201cRight\u2026 Yes, I understand now. I have to collect orders first and then print them out to know what I have to prepare.\u201d\n\n\n\u201cAnd to whom to deliver it,\u201d added I. \u201cTomorrow let\u2019s try to use files: open, write, read. But this is for tomorrow. Go play outside now.\u201d",
            "title": "Day 4 - Functions"
        },
        {
            "location": "/Python_vacation_day4/index.html#python-vacation-day-4",
            "text": "\u201cRemember where we stopped last time?\u201d I asked Erik.  \u201cYes, you said that we are going to work with functions and that will make my program shorter.\u201d  \u201d\u2026And easier to read and understand!\u201d added I. \u201cWhat do you remember about Python functions from your online class?\u201d  \u201cThey start with  def . You have to indent lines inside the function. You can call functions from your main program.\u201d  \u201cGood! Also very important that you can pass  parameters  into functions so you can call them many times and they will do slightly different things depending on the parameters. Like saying \u2018Hello\u2019 and then a person\u2019s name.\u201d  \u201cYes, I remember, we did this in our online course!\u201d exclaimed Erik. It was good to see that those couple weeks were not lost completely.  \u201cYou said in your program you had to copy and paste some pieces of code several times. What did that code do?\u201d  \u201cDon\u2019t you remember?\u201d Erik tried to be patient. \u201cI have three menus in my coffee shop program: one for base product, one for flavor, and one for topping. And in all three menus I have to do that garbage checking, number checking and all that.\u201d  \u201cOkay,\u201d I said. \u201cWhy don\u2019t we create a function that will do all these boring things and call it three times?\u201d  \u201cYes, that would be good. And also if I want to change or add something, I\u2019ll do it in one place, instead of copying it three times. But I have different flavors and toppings\u2014how will this function know which menu I want to use?\u201d  \u201cYou said you had to change something while copying pieces of code into the menus. What was that?\u201d  \u201cOh, all different variables. The variable for the  input()  function, the index variable. And also the list name\u2014to print out the menu and to calculate its length.\u201d  \u201cGood. So, as far as I can see, the only thing which needs to change is the list of options. It\u2019s either base product, flavor, or topping. Input variable and list index can be the reused inside the function. We\u2019ll just return the index as a result.\u201d  \u201cWhat do you mean\u2014\u2018return\u2019?\u201d asked Erik.  \u201cWell, imagine I asked you: \u2018Erik, please go to your room and count how many model planes you have.\u2019 You would go and count them and return to me with a number, right? Functions do the same thing: they perform some action and come back with the result. And usually I don\u2019t care how they do what I asked them to do, I\u2019m interested in the result. Like when I asked you to count your planes, I don\u2019t care if you use your fingers, or a piece of paper, or any more sophisticated method. In our case we have to write a function which will take a list of options, print it out as a menu and let the user chose from the menu. When the user makes their choice\u2014a number in the menu\u2014the function will remember it and bring it to us. There is a special word for that in Python:  return . We are not going to return the name of a flavor, we\u2019ll just return its index in the list.\u201d  \u201cYes, I remember that  return  from the class!\u201d said Erik.  \u201cGood. Now we have to make a very difficult decision: how to name our function. Don\u2019t laugh, it is really very serious. When you write programs just a little longer than this one, it\u2019s pretty easy to get lost in different variable and function names. So, please, always think about naming. Don\u2019t call your functions  f()  or  d4()  \u2014 you will never remember what this means. Choose some meaningful names that show what this function does. The same applies to variables. Only if it\u2019s just a simple obscure index in a loop, then it\u2019s okay to call it  i  or  k . In other cases, please use something readable. Also, in Python we use underscore to combine words for variable and function names. Like   base_product  or  good_input .\u201d  \u201cI saw names without underscores, but with lower and upper case letters,\u201d said Erik.  \u201cYes, it\u2019s called CamelCase. You see, it looks like camel humps? In Python we usually use them to define classes. We\u2019ll talk about classes later.\u201d  \u201cOkay, I\u2019m ready. Let\u2019s call our function  menu . I know that I have to use  def  to start writing it. And also I have to put something inside the parenthesis. Should it be the list of options?\u201d  \u201cExactly!\u201d said I. I was proud of my boy. You know, teenagers are always like that: sometimes they surprise you with their brilliant minds, but sometimes they struggle with simple arithmetics. \u201cCall it  options , for example. You do remember that you should put the colon after parenthesis and indent the function body, don\u2019t you? You can copy most of the function body from what you have written already. Don\u2019t forget to return the index and don\u2019t forget that when we show  1  to the user, we have  0  in mind. So add some necessary arithmetics to the function. Enough instructions, go ahead and write it!\u201d  Erik started writing and copying and in a couple minutes his function looked like this:  def   menu ( options ): \n     good_input   =   False \n     while   good_input   ==   False : \n         print ( \"Choose your base product from the menu (press the number):\" ) \n         for   i ,   option   in   enumerate ( options ,   start = 1 ): \n             print ( i ,   option ) \n         p   =   input () \n\n         try : \n             p_index   =   int ( p ) \n         except    ValueError : \n             print ( \"Error: you should enter a NUMBER!\" ) \n             continue \n\n         if   p_index   <=   len ( options )   and   p_index   >   0   : \n             good_input   =   True \n         else : \n             print ( \"You should enter a number between 1 and \" ,   len ( options )) \n\n     return   p_index - 1   \u201cWhat should I do with this prompt? It asks about the base product, but I want to use this function for flavors and toppings too,\u201d asked Erik.  I said, \u201cGood question. If you want to reuse your function, you should move everything that is specific to some particular case, outside of the function. I suggest we ask this question  before  calling the function, in the main program. You will ask about base product and call the function with the list of base products, you ask about flavors and pass the list of flavors as a parameter.\u201d  \u201cOkay,\u201d said Erik. \u201cI\u2019ll remove it. Now I have to rewrite the main program and use function in it, right?\u201d  \u201cGo ahead!\u201d  He started working. After a while he asked, \u201cI use  p_index  both in the function and in the main program. Should I rename it?\u201d  \u201cFrom Python prespective, that\u2019s OK. It sees those variables differently.  p_index  in the main program and  p_index  inside a function are different variables. But from a readability perspective, I\u2019d suggest to rename it inside the function. It\u2019s better to avoid using same variable names inside functions and in the main program. Unless, of course, they are as simple as  a ,  i ,  x , which are usually temporary variables. So, rename it inside the function to something short but meaningful.\u201d  \u201cIt will be  p_int ,\u201d said Erik. Then he thought for a while and said, \u201cBut it starts with  p  because I copied it from the products menu. In the function it doesn\u2019t make sense anymore. I\u2019ll rename  p  to  choice  and  p_index  to  choice_int  because we convert it to integer.\u201d  \u201cGreat idea!\u201d I said.  He worked a bit more and discovered, \u201cNow I don\u2019t have to subtract 1 from the indexes in my final  print , because I have already done it in the function!\u201d  He finally came up with this:  #!/usr/bin/python3  products   =   [ \"chocolate\" ,   \"coffee\" ]  flavors   =   [ \"caramel\" , \n            \"butterscotch\" , \n            \"strawberry\" , \n            \"raspberry\" , \n            \"blueberry\" , \n            \"sweetstrawberry\" , \n            \"marshmallow\" , \n            \"plain\" ]  toppings   =   [ \"chocolate\" ,   \"sweetstrawberry\" ,   \"caramel\" ]  def   menu ( options ): \n     good_input   =   False \n     while   good_input   ==   False : \n         for   i ,   option   in   enumerate ( options ,   start = 1 ): \n             print ( i ,   option ) \n         choice   =   input () \n\n         try : \n             choice_int   =   int ( choice ) \n         except    ValueError : \n             print ( \"Error: you should enter a NUMBER!\" ) \n             continue \n\n         if   choice_int   <=   len ( options )   and   choice_int   >   0   : \n             good_input   =   True \n         else : \n             print ( \"You should enter a number between 1 and \" ,   len ( options )) \n\n     return   choice_int - 1  print ( \"Choose your base product from the menu (press the number):\" )  p_index   =   menu ( products )  print ( \"Choose your flavor from the menu (press the number):\" )  f_index   =   menu ( flavors )  print ( \"Choose your topping from the menu (press the number):\" )  t_index   =   menu ( toppings )  print ( \"Here is your order: base product: \" ,   products [ p_index ],  \n   \", flavor: \" ,   flavors [ f_index ],   \", topping: \" ,   toppings [ t_index ])   He tested it and it worked perfectly! He even tried to enter \u201cwrong\u201d choices and always received error messages until his choice was \u201cright\u201d.  \u201cCongratulations!\u201d I said. \u201cWe\u2019ve covered a lot of stuff during these days and you are moving very quickly. This is great!\u201d  Erik was happy. He was so happy that he even suggested: \u201cI want to add something to the program. Like we did in that online course, I want to ask the customer for his name and then print it out together with his order!\u201d  \u201cGood idea!\u201d I said. After a while his program printed out:  Hello, Erik! Here is your order ...  \u201cMuch better now,\u201d I said. \u201cNow, let\u2019s plan our next steps.\u201d  \u201cWhat next steps? I thought we are done with this menu. I like it!\u201d  \u201cYes, but as far as I remember, you have prepared 6 cups of beverage for your friends last time. Which means you have to collect and  save  all their orders somehow, instead of just printing them out.\u201d  \u201cRight\u2026 Yes, I understand now. I have to collect orders first and then print them out to know what I have to prepare.\u201d  \u201cAnd to whom to deliver it,\u201d added I. \u201cTomorrow let\u2019s try to use files: open, write, read. But this is for tomorrow. Go play outside now.\u201d",
            "title": "Python Vacation -- Day 4"
        }
    ]
}